/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ZigZagZogAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GameState"
      | "ZigZagZogVersion"
      | "buyPlays"
      | "choicesHash"
      | "circlePlayerCount"
      | "claimWinnings"
      | "commitChoices"
      | "commitDuration"
      | "currentGameNumber"
      | "eip712Domain"
      | "gameBalance"
      | "hasGameEnded"
      | "lastCircleRevealed"
      | "lastSquareRevealed"
      | "lastTriangleRevealed"
      | "playCost"
      | "playerHasCommitted"
      | "playerHasRevealed"
      | "purchasedPlays"
      | "revealChoices"
      | "revealDuration"
      | "squarePlayerCount"
      | "trianglePlayerCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EIP712DomainChanged" | "PlayerCommitment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GameState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ZigZagZogVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyPlays", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "choicesHash",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "circlePlayerCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitChoices",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentGameNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGameEnded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCircleRevealed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSquareRevealed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTriangleRevealed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "playCost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerHasCommitted",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerHasRevealed",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedPlays",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealChoices",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "squarePlayerCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trianglePlayerCount",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "GameState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZigZagZogVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyPlays", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "choicesHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circlePlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitChoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentGameNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGameEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCircleRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSquareRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTriangleRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerHasCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerHasRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedPlays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealChoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "squarePlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trianglePlayerCount",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerCommitmentEvent {
  export type InputTuple = [
    playerAddress: AddressLike,
    gameNumber: BigNumberish,
    roundNumber: BigNumberish
  ];
  export type OutputTuple = [
    playerAddress: string,
    gameNumber: bigint,
    roundNumber: bigint
  ];
  export interface OutputObject {
    playerAddress: string;
    gameNumber: bigint;
    roundNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZigZagZogAbi extends BaseContract {
  connect(runner?: ContractRunner | null): ZigZagZogAbi;
  waitForDeployment(): Promise<this>;

  interface: ZigZagZogAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GameState: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        gameTimestamp: bigint;
        roundNumber: bigint;
        roundTimestamp: bigint;
      }
    ],
    "view"
  >;

  ZigZagZogVersion: TypedContractMethod<[], [string], "view">;

  buyPlays: TypedContractMethod<[], [void], "payable">;

  choicesHash: TypedContractMethod<
    [
      nonce: BigNumberish,
      gameNumber: BigNumberish,
      roundNumber: BigNumberish,
      numCircles: BigNumberish,
      numSquares: BigNumberish,
      numTriangles: BigNumberish
    ],
    [string],
    "view"
  >;

  circlePlayerCount: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  claimWinnings: TypedContractMethod<
    [gameNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  commitChoices: TypedContractMethod<
    [gameNumber: BigNumberish, roundNumber: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  commitDuration: TypedContractMethod<[], [bigint], "view">;

  currentGameNumber: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  gameBalance: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  hasGameEnded: TypedContractMethod<
    [gameNumber: BigNumberish],
    [boolean],
    "view"
  >;

  lastCircleRevealed: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  lastSquareRevealed: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  lastTriangleRevealed: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  playCost: TypedContractMethod<[], [bigint], "view">;

  playerHasCommitted: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;

  playerHasRevealed: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;

  purchasedPlays: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  revealChoices: TypedContractMethod<
    [
      gameNumber: BigNumberish,
      roundNumber: BigNumberish,
      nonce: BigNumberish,
      numCircles: BigNumberish,
      numSquares: BigNumberish,
      numTriangles: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  revealDuration: TypedContractMethod<[], [bigint], "view">;

  squarePlayerCount: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  trianglePlayerCount: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GameState"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        gameTimestamp: bigint;
        roundNumber: bigint;
        roundTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ZigZagZogVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyPlays"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "choicesHash"
  ): TypedContractMethod<
    [
      nonce: BigNumberish,
      gameNumber: BigNumberish,
      roundNumber: BigNumberish,
      numCircles: BigNumberish,
      numSquares: BigNumberish,
      numTriangles: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "circlePlayerCount"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimWinnings"
  ): TypedContractMethod<[gameNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitChoices"
  ): TypedContractMethod<
    [gameNumber: BigNumberish, roundNumber: BigNumberish, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentGameNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameBalance"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasGameEnded"
  ): TypedContractMethod<[gameNumber: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastCircleRevealed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastSquareRevealed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastTriangleRevealed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "playCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerHasCommitted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerHasRevealed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchasedPlays"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "revealChoices"
  ): TypedContractMethod<
    [
      gameNumber: BigNumberish,
      roundNumber: BigNumberish,
      nonce: BigNumberish,
      numCircles: BigNumberish,
      numSquares: BigNumberish,
      numTriangles: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revealDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "squarePlayerCount"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "trianglePlayerCount"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerCommitment"
  ): TypedContractEvent<
    PlayerCommitmentEvent.InputTuple,
    PlayerCommitmentEvent.OutputTuple,
    PlayerCommitmentEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "PlayerCommitment(address,uint256,uint256)": TypedContractEvent<
      PlayerCommitmentEvent.InputTuple,
      PlayerCommitmentEvent.OutputTuple,
      PlayerCommitmentEvent.OutputObject
    >;
    PlayerCommitment: TypedContractEvent<
      PlayerCommitmentEvent.InputTuple,
      PlayerCommitmentEvent.OutputTuple,
      PlayerCommitmentEvent.OutputObject
    >;
  };
}
