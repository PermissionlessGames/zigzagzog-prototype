// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.4.0
// seer command: seer evm generate --package zigzagzog --cli --foundry out/ZigZagZog.sol/ZigZagZog.json --source-code src/ZigZagZog.sol --struct ZigZagZog --output bindings/zigzagzog/ZigZagZog.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zigzagzog

import (
	"bytes"
	"crypto/rand"
	"errors"
	"io"
	"math/big"
	"net/http"
	"net/url"
	"reflect"
	"strconv"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// ZigZagZogMetaData contains all meta data concerning the ZigZagZog contract.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var ZigZagZogMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_playCost\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_commitDuration\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"_revealDuration\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"GameState\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"gameTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ZigZagZogVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"buyPlays\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"choicesHash\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numCircles\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numSquares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numTriangles\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"circlePlayerCount\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"circlesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"claimWinnings\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitChoices\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"currentGameNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"gameBalance\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoundOutcome\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumZigZagZog.EliminationResult\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"hasGameEnded\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastCircleRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastSquareRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastTriangleRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playCost\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerCashedOut\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerCirclesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerCommitment\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerHasCommitted\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerHasRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerSquaresRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerSurvivingPlays\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerTrianglesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"purchasedPlays\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"revealChoices\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numCircles\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numSquares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numTriangles\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revealDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"squarePlayerCount\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"squaresRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"survivingPlays\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"trianglePlayerCount\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"trianglesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PlayerCommitment\",\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PlayerReveal\",\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"numCircles\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"numSquares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"numTriangles\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PlaysBought\",\"inputs\":[{\"name\":\"player\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"numPlays\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WinningsClaimed\",\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"payoutAmount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "",
}

// ZigZagZogABI is the input ABI used to generate the binding from.
// Deprecated: Use ZigZagZogMetaData.ABI instead.
var ZigZagZogABI = ZigZagZogMetaData.ABI

// ZigZagZogBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZigZagZogMetaData.Bin instead.
var ZigZagZogBin = ZigZagZogMetaData.Bin

// DeployZigZagZog deploys a new Ethereum contract, binding an instance of ZigZagZog to it.
func DeployZigZagZog(auth *bind.TransactOpts, backend bind.ContractBackend, _playCost *big.Int, _commitDuration uint64, _revealDuration uint64) (common.Address, *types.Transaction, *ZigZagZog, error) {
	parsed, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZigZagZogBin), backend, _playCost, _commitDuration, _revealDuration)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ZigZagZog{ZigZagZogCaller: ZigZagZogCaller{contract: contract}, ZigZagZogTransactor: ZigZagZogTransactor{contract: contract}, ZigZagZogFilterer: ZigZagZogFilterer{contract: contract}}, nil
}

// ZigZagZog is an auto generated Go binding around an Ethereum contract.
type ZigZagZog struct {
	ZigZagZogCaller     // Read-only binding to the contract
	ZigZagZogTransactor // Write-only binding to the contract
	ZigZagZogFilterer   // Log filterer for contract events
}

// ZigZagZogCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZigZagZogCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZigZagZogTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZigZagZogFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZigZagZogSession struct {
	Contract     *ZigZagZog        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZigZagZogCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZigZagZogCallerSession struct {
	Contract *ZigZagZogCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ZigZagZogTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZigZagZogTransactorSession struct {
	Contract     *ZigZagZogTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ZigZagZogRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZigZagZogRaw struct {
	Contract *ZigZagZog // Generic contract binding to access the raw methods on
}

// ZigZagZogCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZigZagZogCallerRaw struct {
	Contract *ZigZagZogCaller // Generic read-only contract binding to access the raw methods on
}

// ZigZagZogTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZigZagZogTransactorRaw struct {
	Contract *ZigZagZogTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZigZagZog creates a new instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZog(address common.Address, backend bind.ContractBackend) (*ZigZagZog, error) {
	contract, err := bindZigZagZog(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ZigZagZog{ZigZagZogCaller: ZigZagZogCaller{contract: contract}, ZigZagZogTransactor: ZigZagZogTransactor{contract: contract}, ZigZagZogFilterer: ZigZagZogFilterer{contract: contract}}, nil
}

// NewZigZagZogCaller creates a new read-only instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogCaller(address common.Address, caller bind.ContractCaller) (*ZigZagZogCaller, error) {
	contract, err := bindZigZagZog(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogCaller{contract: contract}, nil
}

// NewZigZagZogTransactor creates a new write-only instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogTransactor(address common.Address, transactor bind.ContractTransactor) (*ZigZagZogTransactor, error) {
	contract, err := bindZigZagZog(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogTransactor{contract: contract}, nil
}

// NewZigZagZogFilterer creates a new log filterer instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogFilterer(address common.Address, filterer bind.ContractFilterer) (*ZigZagZogFilterer, error) {
	contract, err := bindZigZagZog(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogFilterer{contract: contract}, nil
}

// bindZigZagZog binds a generic wrapper to an already deployed contract.
func bindZigZagZog(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZigZagZog *ZigZagZogRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZigZagZog.Contract.ZigZagZogCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZigZagZog *ZigZagZogRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ZigZagZogTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZigZagZog *ZigZagZogRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ZigZagZogTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZigZagZog *ZigZagZogCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZigZagZog.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZigZagZog *ZigZagZogTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZigZagZog.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZigZagZog *ZigZagZogTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZigZagZog.Contract.contract.Transact(opts, method, params...)
}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp)
func (_ZigZagZog *ZigZagZogCaller) GameState(opts *bind.CallOpts, arg0 *big.Int) (struct {
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
}, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "GameState", arg0)

	outstruct := new(struct {
		GameTimestamp  *big.Int
		RoundNumber    *big.Int
		RoundTimestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GameTimestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.RoundNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.RoundTimestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp)
func (_ZigZagZog *ZigZagZogSession) GameState(arg0 *big.Int) (struct {
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
}, error) {
	return _ZigZagZog.Contract.GameState(&_ZigZagZog.CallOpts, arg0)
}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp)
func (_ZigZagZog *ZigZagZogCallerSession) GameState(arg0 *big.Int) (struct {
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
}, error) {
	return _ZigZagZog.Contract.GameState(&_ZigZagZog.CallOpts, arg0)
}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogCaller) ZigZagZogVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "ZigZagZogVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogSession) ZigZagZogVersion() (string, error) {
	return _ZigZagZog.Contract.ZigZagZogVersion(&_ZigZagZog.CallOpts)
}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogCallerSession) ZigZagZogVersion() (string, error) {
	return _ZigZagZog.Contract.ZigZagZogVersion(&_ZigZagZog.CallOpts)
}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogCaller) ChoicesHash(opts *bind.CallOpts, nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "choicesHash", nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogSession) ChoicesHash(nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	return _ZigZagZog.Contract.ChoicesHash(&_ZigZagZog.CallOpts, nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)
}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogCallerSession) ChoicesHash(nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	return _ZigZagZog.Contract.ChoicesHash(&_ZigZagZog.CallOpts, nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)
}

// CirclePlayerCount is a free data retrieval call binding the contract method 0xa956f6cb.
//
// Solidity: function circlePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) CirclePlayerCount(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "circlePlayerCount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CirclePlayerCount is a free data retrieval call binding the contract method 0xa956f6cb.
//
// Solidity: function circlePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) CirclePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CirclePlayerCount is a free data retrieval call binding the contract method 0xa956f6cb.
//
// Solidity: function circlePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) CirclePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CirclesRevealed is a free data retrieval call binding the contract method 0x31bc98f8.
//
// Solidity: function circlesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) CirclesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "circlesRevealed", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CirclesRevealed is a free data retrieval call binding the contract method 0x31bc98f8.
//
// Solidity: function circlesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) CirclesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CirclesRevealed is a free data retrieval call binding the contract method 0x31bc98f8.
//
// Solidity: function circlesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) CirclesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCaller) CommitDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "commitDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogSession) CommitDuration() (uint64, error) {
	return _ZigZagZog.Contract.CommitDuration(&_ZigZagZog.CallOpts)
}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCallerSession) CommitDuration() (uint64, error) {
	return _ZigZagZog.Contract.CommitDuration(&_ZigZagZog.CallOpts)
}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) CurrentGameNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "currentGameNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) CurrentGameNumber() (*big.Int, error) {
	return _ZigZagZog.Contract.CurrentGameNumber(&_ZigZagZog.CallOpts)
}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) CurrentGameNumber() (*big.Int, error) {
	return _ZigZagZog.Contract.CurrentGameNumber(&_ZigZagZog.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ZigZagZog.Contract.Eip712Domain(&_ZigZagZog.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ZigZagZog.Contract.Eip712Domain(&_ZigZagZog.CallOpts)
}

// GameBalance is a free data retrieval call binding the contract method 0x19be5ad0.
//
// Solidity: function gameBalance(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GameBalance(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "gameBalance", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GameBalance is a free data retrieval call binding the contract method 0x19be5ad0.
//
// Solidity: function gameBalance(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GameBalance(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GameBalance(&_ZigZagZog.CallOpts, arg0)
}

// GameBalance is a free data retrieval call binding the contract method 0x19be5ad0.
//
// Solidity: function gameBalance(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GameBalance(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GameBalance(&_ZigZagZog.CallOpts, arg0)
}

// GetRoundOutcome is a free data retrieval call binding the contract method 0x19ceb612.
//
// Solidity: function getRoundOutcome(uint256 gameNumber, uint256 roundNumber) view returns(uint8)
func (_ZigZagZog *ZigZagZogCaller) GetRoundOutcome(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int) (uint8, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getRoundOutcome", gameNumber, roundNumber)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetRoundOutcome is a free data retrieval call binding the contract method 0x19ceb612.
//
// Solidity: function getRoundOutcome(uint256 gameNumber, uint256 roundNumber) view returns(uint8)
func (_ZigZagZog *ZigZagZogSession) GetRoundOutcome(gameNumber *big.Int, roundNumber *big.Int) (uint8, error) {
	return _ZigZagZog.Contract.GetRoundOutcome(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// GetRoundOutcome is a free data retrieval call binding the contract method 0x19ceb612.
//
// Solidity: function getRoundOutcome(uint256 gameNumber, uint256 roundNumber) view returns(uint8)
func (_ZigZagZog *ZigZagZogCallerSession) GetRoundOutcome(gameNumber *big.Int, roundNumber *big.Int) (uint8, error) {
	return _ZigZagZog.Contract.GetRoundOutcome(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// HasGameEnded is a free data retrieval call binding the contract method 0xecf16d4d.
//
// Solidity: function hasGameEnded(uint256 gameNumber) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) HasGameEnded(opts *bind.CallOpts, gameNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "hasGameEnded", gameNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasGameEnded is a free data retrieval call binding the contract method 0xecf16d4d.
//
// Solidity: function hasGameEnded(uint256 gameNumber) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) HasGameEnded(gameNumber *big.Int) (bool, error) {
	return _ZigZagZog.Contract.HasGameEnded(&_ZigZagZog.CallOpts, gameNumber)
}

// HasGameEnded is a free data retrieval call binding the contract method 0xecf16d4d.
//
// Solidity: function hasGameEnded(uint256 gameNumber) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) HasGameEnded(gameNumber *big.Int) (bool, error) {
	return _ZigZagZog.Contract.HasGameEnded(&_ZigZagZog.CallOpts, gameNumber)
}

// LastCircleRevealed is a free data retrieval call binding the contract method 0x1beb8902.
//
// Solidity: function lastCircleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCaller) LastCircleRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "lastCircleRevealed", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LastCircleRevealed is a free data retrieval call binding the contract method 0x1beb8902.
//
// Solidity: function lastCircleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogSession) LastCircleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastCircleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastCircleRevealed is a free data retrieval call binding the contract method 0x1beb8902.
//
// Solidity: function lastCircleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCallerSession) LastCircleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastCircleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastSquareRevealed is a free data retrieval call binding the contract method 0xa773f43a.
//
// Solidity: function lastSquareRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCaller) LastSquareRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "lastSquareRevealed", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LastSquareRevealed is a free data retrieval call binding the contract method 0xa773f43a.
//
// Solidity: function lastSquareRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogSession) LastSquareRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastSquareRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastSquareRevealed is a free data retrieval call binding the contract method 0xa773f43a.
//
// Solidity: function lastSquareRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCallerSession) LastSquareRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastSquareRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastTriangleRevealed is a free data retrieval call binding the contract method 0x1d310c2e.
//
// Solidity: function lastTriangleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCaller) LastTriangleRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "lastTriangleRevealed", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LastTriangleRevealed is a free data retrieval call binding the contract method 0x1d310c2e.
//
// Solidity: function lastTriangleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogSession) LastTriangleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastTriangleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastTriangleRevealed is a free data retrieval call binding the contract method 0x1d310c2e.
//
// Solidity: function lastTriangleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCallerSession) LastTriangleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastTriangleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayCost(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playCost")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayCost() (*big.Int, error) {
	return _ZigZagZog.Contract.PlayCost(&_ZigZagZog.CallOpts)
}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayCost() (*big.Int, error) {
	return _ZigZagZog.Contract.PlayCost(&_ZigZagZog.CallOpts)
}

// PlayerCashedOut is a free data retrieval call binding the contract method 0x1455249e.
//
// Solidity: function playerCashedOut(uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) PlayerCashedOut(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerCashedOut", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PlayerCashedOut is a free data retrieval call binding the contract method 0x1455249e.
//
// Solidity: function playerCashedOut(uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) PlayerCashedOut(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerCashedOut(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerCashedOut is a free data retrieval call binding the contract method 0x1455249e.
//
// Solidity: function playerCashedOut(uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerCashedOut(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerCashedOut(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerCirclesRevealed is a free data retrieval call binding the contract method 0x17774a36.
//
// Solidity: function playerCirclesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerCirclesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerCirclesRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerCirclesRevealed is a free data retrieval call binding the contract method 0x17774a36.
//
// Solidity: function playerCirclesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerCirclesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerCirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerCirclesRevealed is a free data retrieval call binding the contract method 0x17774a36.
//
// Solidity: function playerCirclesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerCirclesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerCirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerCommitment is a free data retrieval call binding the contract method 0x0ed348ae.
//
// Solidity: function playerCommitment(uint256 , uint256 , address ) view returns(bytes)
func (_ZigZagZog *ZigZagZogCaller) PlayerCommitment(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) ([]byte, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerCommitment", arg0, arg1, arg2)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// PlayerCommitment is a free data retrieval call binding the contract method 0x0ed348ae.
//
// Solidity: function playerCommitment(uint256 , uint256 , address ) view returns(bytes)
func (_ZigZagZog *ZigZagZogSession) PlayerCommitment(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) ([]byte, error) {
	return _ZigZagZog.Contract.PlayerCommitment(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerCommitment is a free data retrieval call binding the contract method 0x0ed348ae.
//
// Solidity: function playerCommitment(uint256 , uint256 , address ) view returns(bytes)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerCommitment(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) ([]byte, error) {
	return _ZigZagZog.Contract.PlayerCommitment(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasCommitted is a free data retrieval call binding the contract method 0x0ff10432.
//
// Solidity: function playerHasCommitted(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) PlayerHasCommitted(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerHasCommitted", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PlayerHasCommitted is a free data retrieval call binding the contract method 0x0ff10432.
//
// Solidity: function playerHasCommitted(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) PlayerHasCommitted(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasCommitted(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasCommitted is a free data retrieval call binding the contract method 0x0ff10432.
//
// Solidity: function playerHasCommitted(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerHasCommitted(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasCommitted(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasRevealed is a free data retrieval call binding the contract method 0xc24795d9.
//
// Solidity: function playerHasRevealed(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) PlayerHasRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerHasRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PlayerHasRevealed is a free data retrieval call binding the contract method 0xc24795d9.
//
// Solidity: function playerHasRevealed(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) PlayerHasRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasRevealed is a free data retrieval call binding the contract method 0xc24795d9.
//
// Solidity: function playerHasRevealed(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerHasRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerSquaresRevealed is a free data retrieval call binding the contract method 0xe78e4564.
//
// Solidity: function playerSquaresRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerSquaresRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerSquaresRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerSquaresRevealed is a free data retrieval call binding the contract method 0xe78e4564.
//
// Solidity: function playerSquaresRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerSquaresRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSquaresRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerSquaresRevealed is a free data retrieval call binding the contract method 0xe78e4564.
//
// Solidity: function playerSquaresRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerSquaresRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSquaresRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerSurvivingPlays is a free data retrieval call binding the contract method 0xddf39483.
//
// Solidity: function playerSurvivingPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerSurvivingPlays(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerSurvivingPlays", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerSurvivingPlays is a free data retrieval call binding the contract method 0xddf39483.
//
// Solidity: function playerSurvivingPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerSurvivingPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSurvivingPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerSurvivingPlays is a free data retrieval call binding the contract method 0xddf39483.
//
// Solidity: function playerSurvivingPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerSurvivingPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSurvivingPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerTrianglesRevealed is a free data retrieval call binding the contract method 0xa08306d1.
//
// Solidity: function playerTrianglesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerTrianglesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerTrianglesRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerTrianglesRevealed is a free data retrieval call binding the contract method 0xa08306d1.
//
// Solidity: function playerTrianglesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerTrianglesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerTrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerTrianglesRevealed is a free data retrieval call binding the contract method 0xa08306d1.
//
// Solidity: function playerTrianglesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerTrianglesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerTrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PurchasedPlays is a free data retrieval call binding the contract method 0x0d109da0.
//
// Solidity: function purchasedPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PurchasedPlays(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "purchasedPlays", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PurchasedPlays is a free data retrieval call binding the contract method 0x0d109da0.
//
// Solidity: function purchasedPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PurchasedPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PurchasedPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PurchasedPlays is a free data retrieval call binding the contract method 0x0d109da0.
//
// Solidity: function purchasedPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PurchasedPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PurchasedPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCaller) RevealDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "revealDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogSession) RevealDuration() (uint64, error) {
	return _ZigZagZog.Contract.RevealDuration(&_ZigZagZog.CallOpts)
}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCallerSession) RevealDuration() (uint64, error) {
	return _ZigZagZog.Contract.RevealDuration(&_ZigZagZog.CallOpts)
}

// SquarePlayerCount is a free data retrieval call binding the contract method 0xad026700.
//
// Solidity: function squarePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) SquarePlayerCount(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "squarePlayerCount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SquarePlayerCount is a free data retrieval call binding the contract method 0xad026700.
//
// Solidity: function squarePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) SquarePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquarePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SquarePlayerCount is a free data retrieval call binding the contract method 0xad026700.
//
// Solidity: function squarePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) SquarePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquarePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SquaresRevealed is a free data retrieval call binding the contract method 0x614fb350.
//
// Solidity: function squaresRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) SquaresRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "squaresRevealed", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SquaresRevealed is a free data retrieval call binding the contract method 0x614fb350.
//
// Solidity: function squaresRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) SquaresRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquaresRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SquaresRevealed is a free data retrieval call binding the contract method 0x614fb350.
//
// Solidity: function squaresRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) SquaresRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquaresRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SurvivingPlays is a free data retrieval call binding the contract method 0x91518686.
//
// Solidity: function survivingPlays(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) SurvivingPlays(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "survivingPlays", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SurvivingPlays is a free data retrieval call binding the contract method 0x91518686.
//
// Solidity: function survivingPlays(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) SurvivingPlays(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SurvivingPlays(&_ZigZagZog.CallOpts, arg0)
}

// SurvivingPlays is a free data retrieval call binding the contract method 0x91518686.
//
// Solidity: function survivingPlays(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) SurvivingPlays(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SurvivingPlays(&_ZigZagZog.CallOpts, arg0)
}

// TrianglePlayerCount is a free data retrieval call binding the contract method 0xa091e3e3.
//
// Solidity: function trianglePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) TrianglePlayerCount(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "trianglePlayerCount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrianglePlayerCount is a free data retrieval call binding the contract method 0xa091e3e3.
//
// Solidity: function trianglePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) TrianglePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// TrianglePlayerCount is a free data retrieval call binding the contract method 0xa091e3e3.
//
// Solidity: function trianglePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) TrianglePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// TrianglesRevealed is a free data retrieval call binding the contract method 0xde1f0f09.
//
// Solidity: function trianglesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) TrianglesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "trianglesRevealed", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrianglesRevealed is a free data retrieval call binding the contract method 0xde1f0f09.
//
// Solidity: function trianglesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) TrianglesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// TrianglesRevealed is a free data retrieval call binding the contract method 0xde1f0f09.
//
// Solidity: function trianglesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) TrianglesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x71db08c0.
//
// Solidity: function buyPlays(uint256 gameNumber) payable returns()
func (_ZigZagZog *ZigZagZogTransactor) BuyPlays(opts *bind.TransactOpts, gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "buyPlays", gameNumber)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x71db08c0.
//
// Solidity: function buyPlays(uint256 gameNumber) payable returns()
func (_ZigZagZog *ZigZagZogSession) BuyPlays(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.BuyPlays(&_ZigZagZog.TransactOpts, gameNumber)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x71db08c0.
//
// Solidity: function buyPlays(uint256 gameNumber) payable returns()
func (_ZigZagZog *ZigZagZogTransactorSession) BuyPlays(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.BuyPlays(&_ZigZagZog.TransactOpts, gameNumber)
}

// ClaimWinnings is a paid mutator transaction binding the contract method 0x677bd9ff.
//
// Solidity: function claimWinnings(uint256 gameNumber) returns()
func (_ZigZagZog *ZigZagZogTransactor) ClaimWinnings(opts *bind.TransactOpts, gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "claimWinnings", gameNumber)
}

// ClaimWinnings is a paid mutator transaction binding the contract method 0x677bd9ff.
//
// Solidity: function claimWinnings(uint256 gameNumber) returns()
func (_ZigZagZog *ZigZagZogSession) ClaimWinnings(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ClaimWinnings(&_ZigZagZog.TransactOpts, gameNumber)
}

// ClaimWinnings is a paid mutator transaction binding the contract method 0x677bd9ff.
//
// Solidity: function claimWinnings(uint256 gameNumber) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) ClaimWinnings(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ClaimWinnings(&_ZigZagZog.TransactOpts, gameNumber)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogTransactor) CommitChoices(opts *bind.TransactOpts, gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "commitChoices", gameNumber, roundNumber, signature)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogSession) CommitChoices(gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.Contract.CommitChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, signature)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) CommitChoices(gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.Contract.CommitChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, signature)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogTransactor) RevealChoices(opts *bind.TransactOpts, gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "revealChoices", gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogSession) RevealChoices(gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.RevealChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) RevealChoices(gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.RevealChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// ZigZagZogEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the ZigZagZog contract.
type ZigZagZogEIP712DomainChangedIterator struct {
	Event *ZigZagZogEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogEIP712DomainChanged represents a EIP712DomainChanged event raised by the ZigZagZog contract.
type ZigZagZogEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ZigZagZogEIP712DomainChangedIterator, error) {

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ZigZagZogEIP712DomainChangedIterator{contract: _ZigZagZog.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ZigZagZogEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogEIP712DomainChanged)
				if err := _ZigZagZog.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) ParseEIP712DomainChanged(log types.Log) (*ZigZagZogEIP712DomainChanged, error) {
	event := new(ZigZagZogEIP712DomainChanged)
	if err := _ZigZagZog.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZigZagZogPlayerCommitmentIterator is returned from FilterPlayerCommitment and is used to iterate over the raw logs and unpacked data for PlayerCommitment events raised by the ZigZagZog contract.
type ZigZagZogPlayerCommitmentIterator struct {
	Event *ZigZagZogPlayerCommitment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogPlayerCommitmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogPlayerCommitment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogPlayerCommitment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogPlayerCommitmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogPlayerCommitmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogPlayerCommitment represents a PlayerCommitment event raised by the ZigZagZog contract.
type ZigZagZogPlayerCommitment struct {
	PlayerAddress common.Address
	GameNumber    *big.Int
	RoundNumber   *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPlayerCommitment is a free log retrieval operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) FilterPlayerCommitment(opts *bind.FilterOpts, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (*ZigZagZogPlayerCommitmentIterator, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "PlayerCommitment", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogPlayerCommitmentIterator{contract: _ZigZagZog.contract, event: "PlayerCommitment", logs: logs, sub: sub}, nil
}

// WatchPlayerCommitment is a free log subscription operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) WatchPlayerCommitment(opts *bind.WatchOpts, sink chan<- *ZigZagZogPlayerCommitment, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (event.Subscription, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "PlayerCommitment", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogPlayerCommitment)
				if err := _ZigZagZog.contract.UnpackLog(event, "PlayerCommitment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlayerCommitment is a log parse operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) ParsePlayerCommitment(log types.Log) (*ZigZagZogPlayerCommitment, error) {
	event := new(ZigZagZogPlayerCommitment)
	if err := _ZigZagZog.contract.UnpackLog(event, "PlayerCommitment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZigZagZogPlayerRevealIterator is returned from FilterPlayerReveal and is used to iterate over the raw logs and unpacked data for PlayerReveal events raised by the ZigZagZog contract.
type ZigZagZogPlayerRevealIterator struct {
	Event *ZigZagZogPlayerReveal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogPlayerRevealIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogPlayerReveal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogPlayerReveal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogPlayerRevealIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogPlayerRevealIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogPlayerReveal represents a PlayerReveal event raised by the ZigZagZog contract.
type ZigZagZogPlayerReveal struct {
	PlayerAddress common.Address
	GameNumber    *big.Int
	RoundNumber   *big.Int
	NumCircles    *big.Int
	NumSquares    *big.Int
	NumTriangles  *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPlayerReveal is a free log retrieval operation binding the contract event 0x25c836b41b834c768acfc8c434e785472849e0412b29a3cde6edd5b5b9603ead.
//
// Solidity: event PlayerReveal(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles)
func (_ZigZagZog *ZigZagZogFilterer) FilterPlayerReveal(opts *bind.FilterOpts, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (*ZigZagZogPlayerRevealIterator, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "PlayerReveal", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogPlayerRevealIterator{contract: _ZigZagZog.contract, event: "PlayerReveal", logs: logs, sub: sub}, nil
}

// WatchPlayerReveal is a free log subscription operation binding the contract event 0x25c836b41b834c768acfc8c434e785472849e0412b29a3cde6edd5b5b9603ead.
//
// Solidity: event PlayerReveal(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles)
func (_ZigZagZog *ZigZagZogFilterer) WatchPlayerReveal(opts *bind.WatchOpts, sink chan<- *ZigZagZogPlayerReveal, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (event.Subscription, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "PlayerReveal", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogPlayerReveal)
				if err := _ZigZagZog.contract.UnpackLog(event, "PlayerReveal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlayerReveal is a log parse operation binding the contract event 0x25c836b41b834c768acfc8c434e785472849e0412b29a3cde6edd5b5b9603ead.
//
// Solidity: event PlayerReveal(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles)
func (_ZigZagZog *ZigZagZogFilterer) ParsePlayerReveal(log types.Log) (*ZigZagZogPlayerReveal, error) {
	event := new(ZigZagZogPlayerReveal)
	if err := _ZigZagZog.contract.UnpackLog(event, "PlayerReveal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZigZagZogPlaysBoughtIterator is returned from FilterPlaysBought and is used to iterate over the raw logs and unpacked data for PlaysBought events raised by the ZigZagZog contract.
type ZigZagZogPlaysBoughtIterator struct {
	Event *ZigZagZogPlaysBought // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogPlaysBoughtIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogPlaysBought)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogPlaysBought)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogPlaysBoughtIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogPlaysBoughtIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogPlaysBought represents a PlaysBought event raised by the ZigZagZog contract.
type ZigZagZogPlaysBought struct {
	Player     common.Address
	GameNumber *big.Int
	NumPlays   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPlaysBought is a free log retrieval operation binding the contract event 0x33da9ab7d4866b1026ba2cca35301ed006bcb5a5d5c49dbe6d3ff026238c22ad.
//
// Solidity: event PlaysBought(address indexed player, uint256 indexed gameNumber, uint256 indexed numPlays)
func (_ZigZagZog *ZigZagZogFilterer) FilterPlaysBought(opts *bind.FilterOpts, player []common.Address, gameNumber []*big.Int, numPlays []*big.Int) (*ZigZagZogPlaysBoughtIterator, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var numPlaysRule []interface{}
	for _, numPlaysItem := range numPlays {
		numPlaysRule = append(numPlaysRule, numPlaysItem)
	}

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "PlaysBought", playerRule, gameNumberRule, numPlaysRule)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogPlaysBoughtIterator{contract: _ZigZagZog.contract, event: "PlaysBought", logs: logs, sub: sub}, nil
}

// WatchPlaysBought is a free log subscription operation binding the contract event 0x33da9ab7d4866b1026ba2cca35301ed006bcb5a5d5c49dbe6d3ff026238c22ad.
//
// Solidity: event PlaysBought(address indexed player, uint256 indexed gameNumber, uint256 indexed numPlays)
func (_ZigZagZog *ZigZagZogFilterer) WatchPlaysBought(opts *bind.WatchOpts, sink chan<- *ZigZagZogPlaysBought, player []common.Address, gameNumber []*big.Int, numPlays []*big.Int) (event.Subscription, error) {

	var playerRule []interface{}
	for _, playerItem := range player {
		playerRule = append(playerRule, playerItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var numPlaysRule []interface{}
	for _, numPlaysItem := range numPlays {
		numPlaysRule = append(numPlaysRule, numPlaysItem)
	}

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "PlaysBought", playerRule, gameNumberRule, numPlaysRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogPlaysBought)
				if err := _ZigZagZog.contract.UnpackLog(event, "PlaysBought", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlaysBought is a log parse operation binding the contract event 0x33da9ab7d4866b1026ba2cca35301ed006bcb5a5d5c49dbe6d3ff026238c22ad.
//
// Solidity: event PlaysBought(address indexed player, uint256 indexed gameNumber, uint256 indexed numPlays)
func (_ZigZagZog *ZigZagZogFilterer) ParsePlaysBought(log types.Log) (*ZigZagZogPlaysBought, error) {
	event := new(ZigZagZogPlaysBought)
	if err := _ZigZagZog.contract.UnpackLog(event, "PlaysBought", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZigZagZogWinningsClaimedIterator is returned from FilterWinningsClaimed and is used to iterate over the raw logs and unpacked data for WinningsClaimed events raised by the ZigZagZog contract.
type ZigZagZogWinningsClaimedIterator struct {
	Event *ZigZagZogWinningsClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogWinningsClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogWinningsClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogWinningsClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogWinningsClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogWinningsClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogWinningsClaimed represents a WinningsClaimed event raised by the ZigZagZog contract.
type ZigZagZogWinningsClaimed struct {
	PlayerAddress common.Address
	GameNumber    *big.Int
	RoundNumber   *big.Int
	PayoutAmount  *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWinningsClaimed is a free log retrieval operation binding the contract event 0x6d96bc67e21ee11dbabcb74ef67fc380f16c21a20fb07a3c3a46bed3ee6b6820.
//
// Solidity: event WinningsClaimed(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber, uint256 payoutAmount)
func (_ZigZagZog *ZigZagZogFilterer) FilterWinningsClaimed(opts *bind.FilterOpts, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (*ZigZagZogWinningsClaimedIterator, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "WinningsClaimed", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogWinningsClaimedIterator{contract: _ZigZagZog.contract, event: "WinningsClaimed", logs: logs, sub: sub}, nil
}

// WatchWinningsClaimed is a free log subscription operation binding the contract event 0x6d96bc67e21ee11dbabcb74ef67fc380f16c21a20fb07a3c3a46bed3ee6b6820.
//
// Solidity: event WinningsClaimed(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber, uint256 payoutAmount)
func (_ZigZagZog *ZigZagZogFilterer) WatchWinningsClaimed(opts *bind.WatchOpts, sink chan<- *ZigZagZogWinningsClaimed, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (event.Subscription, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "WinningsClaimed", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogWinningsClaimed)
				if err := _ZigZagZog.contract.UnpackLog(event, "WinningsClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWinningsClaimed is a log parse operation binding the contract event 0x6d96bc67e21ee11dbabcb74ef67fc380f16c21a20fb07a3c3a46bed3ee6b6820.
//
// Solidity: event WinningsClaimed(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber, uint256 payoutAmount)
func (_ZigZagZog *ZigZagZogFilterer) ParseWinningsClaimed(log types.Log) (*ZigZagZogWinningsClaimed, error) {
	event := new(ZigZagZogWinningsClaimed)
	if err := _ZigZagZog.contract.UnpackLog(event, "WinningsClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateZigZagZogDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int
	var calldata bool
	var verify bool
	var apiURL, apiKey string
	var runs uint
	var evmVersion, compilerVersion string

	var playCost *big.Int
	var playCostRaw string
	var commitDuration uint64

	var revealDuration uint64

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {

			if !calldata {
				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if verify {
				if ZigZagZogContractCode == "" {
					return fmt.Errorf("Cannot use --verify flag when contract code is empty, please re-run evm generate passing the --source-code flag")
				}

				if apiURL == "" {
					return fmt.Errorf("--api not specified")
				}
			}

			if playCostRaw == "" {
				return fmt.Errorf("--play-cost argument not specified")
			}
			playCost = new(big.Int)
			playCost.SetString(playCostRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			// Generate deploy bytecode with constructor arguments
			deployCalldata, err := generateZigZagZogDeployBytecode(
				playCost,
				commitDuration,
				revealDuration,
			)
			if err != nil {
				return fmt.Errorf("failed to generate deploy bytecode: %v", err)
			}
			if calldata {
				deployCalldataHex := hex.EncodeToString(deployCalldata)
				cmd.Println(deployCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployCalldata)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployCalldata, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployZigZagZog(
				transactionOpts,
				client,
				playCost,
				commitDuration,
				revealDuration,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			if verify {
				compilerInfo, err := ExtractCompilerInfo(ZigZagZogBin)
				if err != nil {
					return fmt.Errorf("failed to extract compiler info: %v", err)
				}

				if compilerVersion != "" {
					compilerInfo.SolidityVersion = compilerVersion
				}
				if evmVersion != "" {
					compilerInfo.EVMVersion = evmVersion
				}

				err = VerifyContractCode(address, ZigZagZogContractCode, apiURL, apiKey, "ZigZagZog", compilerInfo.SolidityVersion, runs, compilerInfo.EVMVersion, playCost, commitDuration, revealDuration)
				if err != nil {
					fmt.Println("Failed to verify contract code:", err)
				} else {
					fmt.Println("Contract code verified successfully")
				}
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&verify, "verify", false, "Verify the contract code on a block explorer")
	cmd.Flags().StringVar(&apiURL, "api", "", "Block explorer API URL")
	cmd.Flags().StringVar(&apiKey, "api-key", "", "Block explorer API key")
	cmd.Flags().UintVar(&runs, "runs", 0, "The number of runs to use for optimization")
	cmd.Flags().StringVar(&evmVersion, "evm-version", "", "Override the EVM version to use for the contract")
	cmd.Flags().StringVar(&compilerVersion, "compiler-version", "", "Override the compiler version to use for the contract")

	cmd.Flags().StringVar(&playCostRaw, "play-cost", "", "play-cost argument")
	cmd.Flags().Uint64Var(&commitDuration, "commit-duration", 0, "commit-duration argument")
	cmd.Flags().Uint64Var(&revealDuration, "reveal-duration", 0, "reveal-duration argument")

	return cmd
}

func generateZigZagZogDeployBytecode(
	playCost *big.Int,
	commitDuration uint64,
	revealDuration uint64,
) ([]byte, error) {
	abiPacked, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("",
		playCost,
		commitDuration,
		revealDuration,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(ZigZagZogMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateChoicesHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var nonce0 *big.Int
	var nonce0Raw string
	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var numCircles *big.Int
	var numCirclesRaw string
	var numSquares *big.Int
	var numSquaresRaw string
	var numTriangles *big.Int
	var numTrianglesRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "choices-hash",
		Short: "Call the ChoicesHash view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if nonce0Raw == "" {
				return fmt.Errorf("--nonce-0 argument not specified")
			}
			nonce0 = new(big.Int)
			nonce0.SetString(nonce0Raw, 0)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if numCirclesRaw == "" {
				return fmt.Errorf("--num-circles argument not specified")
			}
			numCircles = new(big.Int)
			numCircles.SetString(numCirclesRaw, 0)

			if numSquaresRaw == "" {
				return fmt.Errorf("--num-squares argument not specified")
			}
			numSquares = new(big.Int)
			numSquares.SetString(numSquaresRaw, 0)

			if numTrianglesRaw == "" {
				return fmt.Errorf("--num-triangles argument not specified")
			}
			numTriangles = new(big.Int)
			numTriangles.SetString(numTrianglesRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ChoicesHash(
				nonce0,
				gameNumber,
				roundNumber,
				numCircles,
				numSquares,
				numTriangles,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&nonce0Raw, "nonce-0", "", "nonce-0 argument")
	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&numCirclesRaw, "num-circles", "", "num-circles argument")
	cmd.Flags().StringVar(&numSquaresRaw, "num-squares", "", "num-squares argument")
	cmd.Flags().StringVar(&numTrianglesRaw, "num-triangles", "", "num-triangles argument")

	return cmd
}
func CreateCirclePlayerCountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "circle-player-count",
		Short: "Call the CirclePlayerCount view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CirclePlayerCount(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateCirclesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "circles-revealed",
		Short: "Call the CirclesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CirclesRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateCommitDurationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 uint64

	cmd := &cobra.Command{
		Use:   "commit-duration",
		Short: "Call the CommitDuration view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CommitDuration()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateCurrentGameNumberCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "current-game-number",
		Short: "Call the CurrentGameNumber view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CurrentGameNumber()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateEip712DomainCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	}

	cmd := &cobra.Command{
		Use:   "eip-712-domain",
		Short: "Call the Eip712Domain view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Eip712Domain()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGameBalanceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "game-balance",
		Short: "Call the GameBalance view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GameBalance(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateGameStateCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 struct {
		GameTimestamp  *big.Int
		RoundNumber    *big.Int
		RoundTimestamp *big.Int
	}

	cmd := &cobra.Command{
		Use:   "game-state",
		Short: "Call the GameState view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GameState(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateGetRoundOutcomeCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string

	var capture0 uint8

	cmd := &cobra.Command{
		Use:   "get-round-outcome",
		Short: "Call the GetRoundOutcome view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetRoundOutcome(
				gameNumber,
				roundNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")

	return cmd
}
func CreateHasGameEndedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "has-game-ended",
		Short: "Call the HasGameEnded view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.HasGameEnded(
				gameNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")

	return cmd
}
func CreateLastCircleRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "last-circle-revealed",
		Short: "Call the LastCircleRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastCircleRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateLastSquareRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "last-square-revealed",
		Short: "Call the LastSquareRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastSquareRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateLastTriangleRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "last-triangle-revealed",
		Short: "Call the LastTriangleRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastTriangleRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreatePlayCostCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "play-cost",
		Short: "Call the PlayCost view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayCost()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreatePlayerCashedOutCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "player-cashed-out",
		Short: "Call the PlayerCashedOut view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerCashedOut(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")

	return cmd
}
func CreatePlayerCirclesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-circles-revealed",
		Short: "Call the PlayerCirclesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerCirclesRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerCommitmentCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "player-commitment",
		Short: "Call the PlayerCommitment view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerCommitment(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerHasCommittedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "player-has-committed",
		Short: "Call the PlayerHasCommitted view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerHasCommitted(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerHasRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "player-has-revealed",
		Short: "Call the PlayerHasRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerHasRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerSquaresRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-squares-revealed",
		Short: "Call the PlayerSquaresRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerSquaresRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerSurvivingPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-surviving-plays",
		Short: "Call the PlayerSurvivingPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerSurvivingPlays(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")

	return cmd
}
func CreatePlayerTrianglesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-triangles-revealed",
		Short: "Call the PlayerTrianglesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerTrianglesRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePurchasedPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "purchased-plays",
		Short: "Call the PurchasedPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PurchasedPlays(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")

	return cmd
}
func CreateRevealDurationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 uint64

	cmd := &cobra.Command{
		Use:   "reveal-duration",
		Short: "Call the RevealDuration view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.RevealDuration()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSquarePlayerCountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "square-player-count",
		Short: "Call the SquarePlayerCount view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SquarePlayerCount(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateSquaresRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "squares-revealed",
		Short: "Call the SquaresRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SquaresRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateSurvivingPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "surviving-plays",
		Short: "Call the SurvivingPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SurvivingPlays(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateTrianglePlayerCountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "triangle-player-count",
		Short: "Call the TrianglePlayerCount view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TrianglePlayerCount(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateTrianglesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "triangles-revealed",
		Short: "Call the TrianglesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TrianglesRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateZigZagZogVersionCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "zig-zag-zog-version",
		Short: "Call the ZigZagZogVersion view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ZigZagZogVersion()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateBuyPlaysCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string

	cmd := &cobra.Command{
		Use:   "buy-plays",
		Short: "Execute the BuyPlays method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "buyPlays"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.BuyPlays(

				gameNumber,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")

	return cmd
}
func CreateClaimWinningsCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string

	cmd := &cobra.Command{
		Use:   "claim-winnings",
		Short: "Execute the ClaimWinnings method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "claimWinnings"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.ClaimWinnings(

				gameNumber,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")

	return cmd
}
func CreateCommitChoicesCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var signature []byte
	var signatureRaw string

	cmd := &cobra.Command{
		Use:   "commit-choices",
		Short: "Execute the CommitChoices method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			var signatureIntermediate []byte

			var signatureIntermediateHexDecodeErr error
			signatureIntermediate, signatureIntermediateHexDecodeErr = hex.DecodeString(signatureRaw)
			if signatureIntermediateHexDecodeErr != nil {
				return signatureIntermediateHexDecodeErr
			}

			signature = make([]byte, len(signatureIntermediate))

			copy(signature[:], signatureIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "commitChoices"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
				roundNumber,
				signature,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.CommitChoices(

				gameNumber,
				roundNumber,
				signature,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&signatureRaw, "signature", "", "signature argument ([]byte)")

	return cmd
}
func CreateRevealChoicesCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var nonce0 *big.Int
	var nonce0Raw string
	var numCircles *big.Int
	var numCirclesRaw string
	var numSquares *big.Int
	var numSquaresRaw string
	var numTriangles *big.Int
	var numTrianglesRaw string

	cmd := &cobra.Command{
		Use:   "reveal-choices",
		Short: "Execute the RevealChoices method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if nonce0Raw == "" {
				return fmt.Errorf("--nonce-0 argument not specified")
			}
			nonce0 = new(big.Int)
			nonce0.SetString(nonce0Raw, 0)

			if numCirclesRaw == "" {
				return fmt.Errorf("--num-circles argument not specified")
			}
			numCircles = new(big.Int)
			numCircles.SetString(numCirclesRaw, 0)

			if numSquaresRaw == "" {
				return fmt.Errorf("--num-squares argument not specified")
			}
			numSquares = new(big.Int)
			numSquares.SetString(numSquaresRaw, 0)

			if numTrianglesRaw == "" {
				return fmt.Errorf("--num-triangles argument not specified")
			}
			numTriangles = new(big.Int)
			numTriangles.SetString(numTrianglesRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "revealChoices"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
				roundNumber,
				nonce0,
				numCircles,
				numSquares,
				numTriangles,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.RevealChoices(

				gameNumber,
				roundNumber,
				nonce0,
				numCircles,
				numSquares,
				numTriangles,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&nonce0Raw, "nonce-0", "", "nonce-0 argument")
	cmd.Flags().StringVar(&numCirclesRaw, "num-circles", "", "num-circles argument")
	cmd.Flags().StringVar(&numSquaresRaw, "num-squares", "", "num-squares argument")
	cmd.Flags().StringVar(&numTrianglesRaw, "num-triangles", "", "num-triangles argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the ZIG_ZAG_ZOG_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the ZIG_ZAG_ZOG_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("ZIG_ZAG_ZOG_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateZigZagZogCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "zig-zag-zog",
		Short: "Interact with the ZigZagZog contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)

	VerifyGroup := &cobra.Group{
		ID: "verify", Title: "Commands which verify contract code",
	}
	cmd.AddGroup(VerifyGroup)

	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployZigZagZog := CreateZigZagZogDeploymentCommand()
	cmdDeployZigZagZog.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployZigZagZog)

	cmdVerify := VerifyContractCodeCommand()
	cmdVerify.GroupID = VerifyGroup.ID
	cmd.AddCommand(cmdVerify)

	cmdViewChoicesHash := CreateChoicesHashCommand()
	cmdViewChoicesHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewChoicesHash)
	cmdViewCirclePlayerCount := CreateCirclePlayerCountCommand()
	cmdViewCirclePlayerCount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCirclePlayerCount)
	cmdViewCirclesRevealed := CreateCirclesRevealedCommand()
	cmdViewCirclesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCirclesRevealed)
	cmdViewCommitDuration := CreateCommitDurationCommand()
	cmdViewCommitDuration.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCommitDuration)
	cmdViewCurrentGameNumber := CreateCurrentGameNumberCommand()
	cmdViewCurrentGameNumber.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCurrentGameNumber)
	cmdViewEip712Domain := CreateEip712DomainCommand()
	cmdViewEip712Domain.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEip712Domain)
	cmdViewGameBalance := CreateGameBalanceCommand()
	cmdViewGameBalance.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGameBalance)
	cmdViewGameState := CreateGameStateCommand()
	cmdViewGameState.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGameState)
	cmdViewGetRoundOutcome := CreateGetRoundOutcomeCommand()
	cmdViewGetRoundOutcome.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetRoundOutcome)
	cmdViewHasGameEnded := CreateHasGameEndedCommand()
	cmdViewHasGameEnded.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewHasGameEnded)
	cmdViewLastCircleRevealed := CreateLastCircleRevealedCommand()
	cmdViewLastCircleRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastCircleRevealed)
	cmdViewLastSquareRevealed := CreateLastSquareRevealedCommand()
	cmdViewLastSquareRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastSquareRevealed)
	cmdViewLastTriangleRevealed := CreateLastTriangleRevealedCommand()
	cmdViewLastTriangleRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastTriangleRevealed)
	cmdViewPlayCost := CreatePlayCostCommand()
	cmdViewPlayCost.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayCost)
	cmdViewPlayerCashedOut := CreatePlayerCashedOutCommand()
	cmdViewPlayerCashedOut.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerCashedOut)
	cmdViewPlayerCirclesRevealed := CreatePlayerCirclesRevealedCommand()
	cmdViewPlayerCirclesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerCirclesRevealed)
	cmdViewPlayerCommitment := CreatePlayerCommitmentCommand()
	cmdViewPlayerCommitment.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerCommitment)
	cmdViewPlayerHasCommitted := CreatePlayerHasCommittedCommand()
	cmdViewPlayerHasCommitted.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerHasCommitted)
	cmdViewPlayerHasRevealed := CreatePlayerHasRevealedCommand()
	cmdViewPlayerHasRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerHasRevealed)
	cmdViewPlayerSquaresRevealed := CreatePlayerSquaresRevealedCommand()
	cmdViewPlayerSquaresRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerSquaresRevealed)
	cmdViewPlayerSurvivingPlays := CreatePlayerSurvivingPlaysCommand()
	cmdViewPlayerSurvivingPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerSurvivingPlays)
	cmdViewPlayerTrianglesRevealed := CreatePlayerTrianglesRevealedCommand()
	cmdViewPlayerTrianglesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerTrianglesRevealed)
	cmdViewPurchasedPlays := CreatePurchasedPlaysCommand()
	cmdViewPurchasedPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPurchasedPlays)
	cmdViewRevealDuration := CreateRevealDurationCommand()
	cmdViewRevealDuration.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewRevealDuration)
	cmdViewSquarePlayerCount := CreateSquarePlayerCountCommand()
	cmdViewSquarePlayerCount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSquarePlayerCount)
	cmdViewSquaresRevealed := CreateSquaresRevealedCommand()
	cmdViewSquaresRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSquaresRevealed)
	cmdViewSurvivingPlays := CreateSurvivingPlaysCommand()
	cmdViewSurvivingPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSurvivingPlays)
	cmdViewTrianglePlayerCount := CreateTrianglePlayerCountCommand()
	cmdViewTrianglePlayerCount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTrianglePlayerCount)
	cmdViewTrianglesRevealed := CreateTrianglesRevealedCommand()
	cmdViewTrianglesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTrianglesRevealed)
	cmdViewZigZagZogVersion := CreateZigZagZogVersionCommand()
	cmdViewZigZagZogVersion.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewZigZagZogVersion)

	cmdTransactBuyPlays := CreateBuyPlaysCommand()
	cmdTransactBuyPlays.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBuyPlays)
	cmdTransactClaimWinnings := CreateClaimWinningsCommand()
	cmdTransactClaimWinnings.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaimWinnings)
	cmdTransactCommitChoices := CreateCommitChoicesCommand()
	cmdTransactCommitChoices.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCommitChoices)
	cmdTransactRevealChoices := CreateRevealChoicesCommand()
	cmdTransactRevealChoices.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRevealChoices)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}

func PrintStruct(cmd *cobra.Command, name string, rv reflect.Value, depth int) {
	indent := strings.Repeat("  ", depth)
	cmd.Printf("%s%s:\n", indent, name)

	rt := rv.Type()
	for i := 0; i < rv.NumField(); i++ {
		field := rv.Field(i)
		fieldName := rt.Field(i).Name

		switch f := field.Interface().(type) {
		case common.Address:
			cmd.Printf("%s  %s: %s\n", indent, fieldName, f.Hex())
		case *big.Int:
			cmd.Printf("%s  %s: %s\n", indent, fieldName, f.String())
		default:
			// Check if field is a nested struct
			if field.Kind() == reflect.Struct {
				PrintStruct(cmd, fieldName, field, depth+1)
			} else {
				cmd.Printf("%s  %s: %v\n", indent, fieldName, f)
			}
		}
	}
}

type CompilerInfo struct {
	SolidityVersion string
	EVMVersion      string
}

func ExtractCompilerInfo(bytecode string) (*CompilerInfo, error) {
	// Remove "0x" prefix if present
	bytecode = strings.TrimPrefix(bytecode, "0x")

	if len(bytecode) < 20 {
		return nil, fmt.Errorf("bytecode too short (length: %d)", len(bytecode))
	}

	// Get the last bytes that contain version info
	versionData := bytecode[len(bytecode)-20:]

	// Check for solc identifier '736f6c6343' (which is 'solcC' in hex)
	if !strings.HasPrefix(versionData, "736f6c6343") {
		return nil, fmt.Errorf("no solidity version identifier found in version data: %s", versionData)
	}

	// Skip first 10 chars (736f6c6343)
	versionHex := versionData[10:18]

	// Parse major, minor, and patch versions
	major := int64(0)
	minor, err := strconv.ParseInt(versionHex[2:4], 16, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse minor version: %v", err)
	}
	patch, err := strconv.ParseInt(versionHex[4:6], 16, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse patch version: %v", err)
	}

	// Determine EVM version based on Solidity version
	evmVersion := determineEVMVersion(major, minor, patch)

	return &CompilerInfo{
		SolidityVersion: fmt.Sprintf("v0.%d.%d", minor, patch), // Changed format string
		EVMVersion:      evmVersion,
	}, nil
}

func determineEVMVersion(major, minor, patch int64) string {
	// This mapping is based on Solidity's default EVM version per compiler version
	// Reference: https://docs.soliditylang.org/en/latest/using-the-compiler.html#target-options
	switch {
	case minor >= 8 && patch >= 24:
		return "cancun" // Solidity 0.8.24+ defaults to Cancun
	case minor >= 8:
		return "london" // Solidity 0.8.0-0.8.23 defaults to London
	case minor == 7:
		return "istanbul" // Solidity 0.7.x defaults to Istanbul
	case minor == 6:
		return "istanbul" // Solidity 0.6.x defaults to Istanbul
	case minor == 5 && patch >= 5:
		return "petersburg" // Solidity 0.5.5+ defaults to Petersburg
	case minor == 5:
		return "byzantium" // Solidity 0.5.0-0.5.4 defaults to Byzantium
	default:
		return "homestead" // Earlier versions defaulted to Homestead
	}
}

type EtherscanResponse struct {
	Status  string `json:"status"`
	Message string `json:"message"`
	Result  string `json:"result"`
}

func (r *EtherscanResponse) IsOk() bool {
	return r.Status == "1"
}

func (r *EtherscanResponse) IsBytecodeMissingInNetworkError() bool {
	return strings.Contains(strings.ToLower(r.Message), "missing bytecode")
}

func (r *EtherscanResponse) IsAlreadyVerified() bool {
	return strings.Contains(strings.ToLower(r.Message), "already verified")
}

// SolidityTag represents a tag in the Solidity repository
type SolidityTag struct {
	Object struct {
		SHA string `json:"sha"`
	} `json:"object"`
}

// GetSolidityCommitHash fetches the commit hash for a specific Solidity version tag
func GetSolidityCommitHash(version string) (string, error) {
	// Clean version string (ensure it starts with 'v')
	if !strings.HasPrefix(version, "v") {
		version = "v" + version
	}

	// Create HTTP client with timeout
	client := &http.Client{Timeout: 10 * time.Second}

	// Get tag info from GitHub API
	url := fmt.Sprintf("https://api.github.com/repos/ethereum/solidity/git/refs/tags/%s", version)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return "", fmt.Errorf("failed to create request: %w", err)
	}

	// Add User-Agent header to avoid GitHub API limitations
	req.Header.Set("User-Agent", "seer-contract-verifier")

	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to fetch tag info: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("GitHub API returned status %d for version %s", resp.StatusCode, version)
	}

	var tag SolidityTag
	if err := json.NewDecoder(resp.Body).Decode(&tag); err != nil {
		return "", fmt.Errorf("failed to decode GitHub response: %w", err)
	}

	// Return first 8 characters of the commit hash
	if len(tag.Object.SHA) < 8 {
		return "", fmt.Errorf("invalid commit hash length")
	}
	return tag.Object.SHA[:8], nil
}

// GetFullCompilerVersion gets the full compiler version with commit hash
func GetFullCompilerVersion(version string) (string, error) {
	// Get commit hash from GitHub tag
	commitHash, err := GetSolidityCommitHash(version)
	if err != nil {
		return "", fmt.Errorf("failed to get commit hash: %w", err)
	}

	// Format full version string
	fullVersion := fmt.Sprintf("%s+commit.%s", version, commitHash)
	return fullVersion, nil
}

func VerifyContractCode(
	contractAddress common.Address,
	contractCode string,
	apiURL string,
	apiKey string,
	contractName string,
	compilerVersion string,
	runs uint,
	evmVersion string,
	playCost *big.Int,
	commitDuration uint64,
	revealDuration uint64,
) error {

	fmt.Println("Verifying contract code...")
	fmt.Println("EVM version:", evmVersion)

	// Pack constructor arguments
	abiPacked, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("",
		playCost,
		commitDuration,
		revealDuration,
	)
	if err != nil {
		return fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	// If no API key is provided, assume it's a Blockscout-compatible API
	if apiKey == "" {
		// Blockscout verification
		formData := url.Values{}
		formData.Set("module", "contract")
		formData.Set("action", "verify")
		formData.Set("addressHash", contractAddress.Hex())
		formData.Set("name", contractName)
		formData.Set("compilerVersion", compilerVersion)
		formData.Set("optimization", fmt.Sprintf("%t", runs > 0))
		formData.Set("optimizationRuns", fmt.Sprintf("%d", runs))
		formData.Set("evmVersion", evmVersion)
		formData.Set("contractSourceCode", contractCode)
		formData.Set("constructorArguments", hex.EncodeToString(constructorArguments))

		// Send verification request
		client := &http.Client{Timeout: time.Second * 30}
		resp, err := client.PostForm(apiURL, formData)
		if err != nil {
			return fmt.Errorf("network request error: %v", err)
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			return fmt.Errorf("Blockscout API returned status %d", resp.StatusCode)
		}

		fmt.Println("Contract verification submitted successfully to Blockscout")
		return nil
	}

	fullCompilerVersion, err := GetFullCompilerVersion(compilerVersion)
	if err != nil {
		return fmt.Errorf("failed to get full compiler version: %w", err)
	}

	fmt.Println("Compiler version:", fullCompilerVersion)

	// Prepare the form data
	formData := url.Values{}
	formData.Set("apikey", apiKey)
	formData.Set("module", "contract")
	formData.Set("action", "verifysourcecode")
	formData.Set("contractaddress", contractAddress.Hex())
	formData.Set("sourceCode", contractCode)
	formData.Set("codeformat", "solidity-single-file")
	formData.Set("contractname", contractName)
	formData.Set("compilerversion", fullCompilerVersion)
	formData.Set("evmversion", evmVersion)
	formData.Set("optimizationUsed", fmt.Sprintf("%t", runs > 0))
	formData.Set("runs", fmt.Sprintf("%d", runs))
	formData.Set("constructorArguments", hex.EncodeToString(constructorArguments))

	// Send the verification request
	// Create HTTP client
	client := &http.Client{
		Timeout: time.Second * 30,
	}

	// Send POST request
	resp, err := client.PostForm(apiURL, formData)
	if err != nil {
		return fmt.Errorf("network request error: %v", err)
	}
	defer resp.Body.Close()

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return fmt.Errorf("invalid status code: %d", resp.StatusCode)
	}

	// Read and parse response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("failed to read response body: %v", err)
	}

	var response EtherscanResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return fmt.Errorf("failed to parse response: %v", err)
	}

	// Check for specific error conditions
	if response.IsBytecodeMissingInNetworkError() {
		return fmt.Errorf("contract bytecode not found on network for address %s", contractAddress.Hex())
	}

	if response.IsAlreadyVerified() {
		return fmt.Errorf("contract %s at address %s is already verified", contractName, contractAddress.Hex())
	}

	if !response.IsOk() {
		return fmt.Errorf("verification failed: %s", response.Message)
	}

	guid := response.Result
	fmt.Printf("Contract verification submitted successfully. GUID: %s\n", guid)

	// Check verification status
	fmt.Println("Checking verification status...")
	for i := 0; i < 10; i++ { // Try up to 10 times
		status, err := CheckVerificationStatus(apiURL, apiKey, guid)
		if err != nil {
			return fmt.Errorf("failed to check verification status: %v", err)
		}

		if status == "Pass - Verified" {
			fmt.Println("Contract successfully verified!")
			return nil
		} else if status == "Fail - Unable to verify" {
			return fmt.Errorf("contract verification failed")
		}

		fmt.Println("Verification in progress, waiting 5 seconds...")
		time.Sleep(5 * time.Second)
	}

	return fmt.Errorf("verification status check timed out")
}

func CheckVerificationStatus(apiURL string, apiKey string, guid string) (string, error) {
	// Prepare the query parameters
	params := url.Values{}
	params.Set("apikey", apiKey)
	params.Set("module", "contract")
	params.Set("action", "checkverifystatus")
	params.Set("guid", guid)

	// Create the full URL
	fullURL := fmt.Sprintf("%s?%s", apiURL, params.Encode())

	// Create HTTP client
	client := &http.Client{
		Timeout: time.Second * 10,
	}

	// Send GET request
	resp, err := client.Get(fullURL)
	if err != nil {
		return "", fmt.Errorf("network request error: %v", err)
	}
	defer resp.Body.Close()

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return "", fmt.Errorf("invalid status code: %d", resp.StatusCode)
	}

	// Read and parse response
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response body: %v", err)
	}

	var response EtherscanResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return "", fmt.Errorf("failed to parse response: %v", err)
	}

	return response.Result, nil
}

func VerifyContractCodeCommand() *cobra.Command {
	var contractAddressRaw, apiURL, apiKey string
	var contractAddress common.Address
	var runs uint
	var evmVersion, compilerVersion string

	var playCost *big.Int
	var playCostRaw string
	var commitDuration uint64

	var revealDuration uint64

	cmd := &cobra.Command{
		Use:   "verify",
		Short: "Verify a contract code on a block explorer",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if ZigZagZogContractCode == "" {
				return fmt.Errorf("contract code is empty, please re-run evm generate passing the --source-code flag")
			}

			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if playCostRaw == "" {
				return fmt.Errorf("--play-cost argument not specified")
			}
			playCost = new(big.Int)
			playCost.SetString(playCostRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			compilerInfo, err := ExtractCompilerInfo(ZigZagZogBin)
			if err != nil {
				return fmt.Errorf("failed to extract compiler info: %v", err)
			}

			if compilerVersion != "" {
				compilerInfo.SolidityVersion = compilerVersion
			}
			if evmVersion != "" {
				compilerInfo.EVMVersion = evmVersion
			}

			return VerifyContractCode(contractAddress, ZigZagZogContractCode, apiURL, apiKey, "ZigZagZog", compilerInfo.SolidityVersion, runs, compilerInfo.EVMVersion, playCost, commitDuration, revealDuration)
		},
	}

	cmd.Flags().StringVar(&contractAddressRaw, "contract", "c", "The address of the contract to verify")
	cmd.Flags().StringVar(&apiURL, "api", "a", "The block explorer API to use")
	cmd.Flags().StringVar(&apiKey, "api-key", "k", "The API key to use for the block explorer")
	cmd.Flags().UintVar(&runs, "runs", 0, "The number of runs to use for optimization")
	cmd.Flags().StringVar(&evmVersion, "evm-version", "", "Override the EVM version to use for the contract")
	cmd.Flags().StringVar(&compilerVersion, "compiler-version", "", "Override the compiler version to use for the contract")

	cmd.Flags().StringVar(&playCostRaw, "play-cost", "", "play-cost argument")
	cmd.Flags().Uint64Var(&commitDuration, "commit-duration", 0, "commit-duration argument")
	cmd.Flags().Uint64Var(&revealDuration, "reveal-duration", 0, "reveal-duration argument")

	return cmd
}

const ZigZagZogContractCode = `// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;


// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)

pragma solidity ^0.8.20;

// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)

pragma solidity ^0.8.20;

// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)

pragma solidity ^0.8.20;

// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)

pragma solidity ^0.8.20;

// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)

pragma solidity ^0.8.20;

/**
 * @dev Helper library for emitting standardized panic codes.
 *
 * ` + "`" + `` + "`" + `` + "`" + `solidity
 * contract Example {
 *      using Panic for uint256;
 *
 *      // Use any of the declared internal constants
 *      function foo() { Panic.GENERIC.panic(); }
 *
 *      // Alternatively
 *      function foo() { Panic.panic(Panic.GENERIC); }
 * }
 * ` + "`" + `` + "`" + `` + "`" + `
 *
 * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].
 *
 * _Available since v5.1._
 */
// slither-disable-next-line unused-state
library Panic {
    /// @dev generic / unspecified error
    uint256 internal constant GENERIC = 0x00;
    /// @dev used by the assert() builtin
    uint256 internal constant ASSERT = 0x01;
    /// @dev arithmetic underflow or overflow
    uint256 internal constant UNDER_OVERFLOW = 0x11;
    /// @dev division or modulo by zero
    uint256 internal constant DIVISION_BY_ZERO = 0x12;
    /// @dev enum conversion error
    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;
    /// @dev invalid encoding in storage
    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;
    /// @dev empty array pop
    uint256 internal constant EMPTY_ARRAY_POP = 0x31;
    /// @dev array out of bounds access
    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;
    /// @dev resource error (too large allocation or too large array)
    uint256 internal constant RESOURCE_ERROR = 0x41;
    /// @dev calling invalid internal function
    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;

    /// @dev Reverts with a panic code. Recommended to use with
    /// the internal constants with predefined codes.
    function panic(uint256 code) internal pure {
        assembly ("memory-safe") {
            mstore(0x00, 0x4e487b71)
            mstore(0x20, code)
            revert(0x1c, 0x24)
        }
    }
}

// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)
// This file was procedurally generated from scripts/generate/templates/SafeCast.js.

pragma solidity ^0.8.20;

/**
 * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow
 * checks.
 *
 * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can
 * easily result in undesired exploitation or bugs, since developers usually
 * assume that overflows raise errors. ` + "`" + `SafeCast` + "`" + ` restores this intuition by
 * reverting the transaction when such an operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeCast {
    /**
     * @dev Value doesn't fit in an uint of ` + "`" + `bits` + "`" + ` size.
     */
    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);

    /**
     * @dev An int value doesn't fit in an uint of ` + "`" + `bits` + "`" + ` size.
     */
    error SafeCastOverflowedIntToUint(int256 value);

    /**
     * @dev Value doesn't fit in an int of ` + "`" + `bits` + "`" + ` size.
     */
    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);

    /**
     * @dev An uint value doesn't fit in an int of ` + "`" + `bits` + "`" + ` size.
     */
    error SafeCastOverflowedUintToInt(uint256 value);

    /**
     * @dev Returns the downcasted uint248 from uint256, reverting on
     * overflow (when the input is greater than largest uint248).
     *
     * Counterpart to Solidity's ` + "`" + `uint248` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 248 bits
     */
    function toUint248(uint256 value) internal pure returns (uint248) {
        if (value > type(uint248).max) {
            revert SafeCastOverflowedUintDowncast(248, value);
        }
        return uint248(value);
    }

    /**
     * @dev Returns the downcasted uint240 from uint256, reverting on
     * overflow (when the input is greater than largest uint240).
     *
     * Counterpart to Solidity's ` + "`" + `uint240` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 240 bits
     */
    function toUint240(uint256 value) internal pure returns (uint240) {
        if (value > type(uint240).max) {
            revert SafeCastOverflowedUintDowncast(240, value);
        }
        return uint240(value);
    }

    /**
     * @dev Returns the downcasted uint232 from uint256, reverting on
     * overflow (when the input is greater than largest uint232).
     *
     * Counterpart to Solidity's ` + "`" + `uint232` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 232 bits
     */
    function toUint232(uint256 value) internal pure returns (uint232) {
        if (value > type(uint232).max) {
            revert SafeCastOverflowedUintDowncast(232, value);
        }
        return uint232(value);
    }

    /**
     * @dev Returns the downcasted uint224 from uint256, reverting on
     * overflow (when the input is greater than largest uint224).
     *
     * Counterpart to Solidity's ` + "`" + `uint224` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 224 bits
     */
    function toUint224(uint256 value) internal pure returns (uint224) {
        if (value > type(uint224).max) {
            revert SafeCastOverflowedUintDowncast(224, value);
        }
        return uint224(value);
    }

    /**
     * @dev Returns the downcasted uint216 from uint256, reverting on
     * overflow (when the input is greater than largest uint216).
     *
     * Counterpart to Solidity's ` + "`" + `uint216` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 216 bits
     */
    function toUint216(uint256 value) internal pure returns (uint216) {
        if (value > type(uint216).max) {
            revert SafeCastOverflowedUintDowncast(216, value);
        }
        return uint216(value);
    }

    /**
     * @dev Returns the downcasted uint208 from uint256, reverting on
     * overflow (when the input is greater than largest uint208).
     *
     * Counterpart to Solidity's ` + "`" + `uint208` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 208 bits
     */
    function toUint208(uint256 value) internal pure returns (uint208) {
        if (value > type(uint208).max) {
            revert SafeCastOverflowedUintDowncast(208, value);
        }
        return uint208(value);
    }

    /**
     * @dev Returns the downcasted uint200 from uint256, reverting on
     * overflow (when the input is greater than largest uint200).
     *
     * Counterpart to Solidity's ` + "`" + `uint200` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 200 bits
     */
    function toUint200(uint256 value) internal pure returns (uint200) {
        if (value > type(uint200).max) {
            revert SafeCastOverflowedUintDowncast(200, value);
        }
        return uint200(value);
    }

    /**
     * @dev Returns the downcasted uint192 from uint256, reverting on
     * overflow (when the input is greater than largest uint192).
     *
     * Counterpart to Solidity's ` + "`" + `uint192` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 192 bits
     */
    function toUint192(uint256 value) internal pure returns (uint192) {
        if (value > type(uint192).max) {
            revert SafeCastOverflowedUintDowncast(192, value);
        }
        return uint192(value);
    }

    /**
     * @dev Returns the downcasted uint184 from uint256, reverting on
     * overflow (when the input is greater than largest uint184).
     *
     * Counterpart to Solidity's ` + "`" + `uint184` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 184 bits
     */
    function toUint184(uint256 value) internal pure returns (uint184) {
        if (value > type(uint184).max) {
            revert SafeCastOverflowedUintDowncast(184, value);
        }
        return uint184(value);
    }

    /**
     * @dev Returns the downcasted uint176 from uint256, reverting on
     * overflow (when the input is greater than largest uint176).
     *
     * Counterpart to Solidity's ` + "`" + `uint176` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 176 bits
     */
    function toUint176(uint256 value) internal pure returns (uint176) {
        if (value > type(uint176).max) {
            revert SafeCastOverflowedUintDowncast(176, value);
        }
        return uint176(value);
    }

    /**
     * @dev Returns the downcasted uint168 from uint256, reverting on
     * overflow (when the input is greater than largest uint168).
     *
     * Counterpart to Solidity's ` + "`" + `uint168` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 168 bits
     */
    function toUint168(uint256 value) internal pure returns (uint168) {
        if (value > type(uint168).max) {
            revert SafeCastOverflowedUintDowncast(168, value);
        }
        return uint168(value);
    }

    /**
     * @dev Returns the downcasted uint160 from uint256, reverting on
     * overflow (when the input is greater than largest uint160).
     *
     * Counterpart to Solidity's ` + "`" + `uint160` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 160 bits
     */
    function toUint160(uint256 value) internal pure returns (uint160) {
        if (value > type(uint160).max) {
            revert SafeCastOverflowedUintDowncast(160, value);
        }
        return uint160(value);
    }

    /**
     * @dev Returns the downcasted uint152 from uint256, reverting on
     * overflow (when the input is greater than largest uint152).
     *
     * Counterpart to Solidity's ` + "`" + `uint152` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 152 bits
     */
    function toUint152(uint256 value) internal pure returns (uint152) {
        if (value > type(uint152).max) {
            revert SafeCastOverflowedUintDowncast(152, value);
        }
        return uint152(value);
    }

    /**
     * @dev Returns the downcasted uint144 from uint256, reverting on
     * overflow (when the input is greater than largest uint144).
     *
     * Counterpart to Solidity's ` + "`" + `uint144` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 144 bits
     */
    function toUint144(uint256 value) internal pure returns (uint144) {
        if (value > type(uint144).max) {
            revert SafeCastOverflowedUintDowncast(144, value);
        }
        return uint144(value);
    }

    /**
     * @dev Returns the downcasted uint136 from uint256, reverting on
     * overflow (when the input is greater than largest uint136).
     *
     * Counterpart to Solidity's ` + "`" + `uint136` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 136 bits
     */
    function toUint136(uint256 value) internal pure returns (uint136) {
        if (value > type(uint136).max) {
            revert SafeCastOverflowedUintDowncast(136, value);
        }
        return uint136(value);
    }

    /**
     * @dev Returns the downcasted uint128 from uint256, reverting on
     * overflow (when the input is greater than largest uint128).
     *
     * Counterpart to Solidity's ` + "`" + `uint128` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 128 bits
     */
    function toUint128(uint256 value) internal pure returns (uint128) {
        if (value > type(uint128).max) {
            revert SafeCastOverflowedUintDowncast(128, value);
        }
        return uint128(value);
    }

    /**
     * @dev Returns the downcasted uint120 from uint256, reverting on
     * overflow (when the input is greater than largest uint120).
     *
     * Counterpart to Solidity's ` + "`" + `uint120` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 120 bits
     */
    function toUint120(uint256 value) internal pure returns (uint120) {
        if (value > type(uint120).max) {
            revert SafeCastOverflowedUintDowncast(120, value);
        }
        return uint120(value);
    }

    /**
     * @dev Returns the downcasted uint112 from uint256, reverting on
     * overflow (when the input is greater than largest uint112).
     *
     * Counterpart to Solidity's ` + "`" + `uint112` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 112 bits
     */
    function toUint112(uint256 value) internal pure returns (uint112) {
        if (value > type(uint112).max) {
            revert SafeCastOverflowedUintDowncast(112, value);
        }
        return uint112(value);
    }

    /**
     * @dev Returns the downcasted uint104 from uint256, reverting on
     * overflow (when the input is greater than largest uint104).
     *
     * Counterpart to Solidity's ` + "`" + `uint104` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 104 bits
     */
    function toUint104(uint256 value) internal pure returns (uint104) {
        if (value > type(uint104).max) {
            revert SafeCastOverflowedUintDowncast(104, value);
        }
        return uint104(value);
    }

    /**
     * @dev Returns the downcasted uint96 from uint256, reverting on
     * overflow (when the input is greater than largest uint96).
     *
     * Counterpart to Solidity's ` + "`" + `uint96` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 96 bits
     */
    function toUint96(uint256 value) internal pure returns (uint96) {
        if (value > type(uint96).max) {
            revert SafeCastOverflowedUintDowncast(96, value);
        }
        return uint96(value);
    }

    /**
     * @dev Returns the downcasted uint88 from uint256, reverting on
     * overflow (when the input is greater than largest uint88).
     *
     * Counterpart to Solidity's ` + "`" + `uint88` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 88 bits
     */
    function toUint88(uint256 value) internal pure returns (uint88) {
        if (value > type(uint88).max) {
            revert SafeCastOverflowedUintDowncast(88, value);
        }
        return uint88(value);
    }

    /**
     * @dev Returns the downcasted uint80 from uint256, reverting on
     * overflow (when the input is greater than largest uint80).
     *
     * Counterpart to Solidity's ` + "`" + `uint80` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 80 bits
     */
    function toUint80(uint256 value) internal pure returns (uint80) {
        if (value > type(uint80).max) {
            revert SafeCastOverflowedUintDowncast(80, value);
        }
        return uint80(value);
    }

    /**
     * @dev Returns the downcasted uint72 from uint256, reverting on
     * overflow (when the input is greater than largest uint72).
     *
     * Counterpart to Solidity's ` + "`" + `uint72` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 72 bits
     */
    function toUint72(uint256 value) internal pure returns (uint72) {
        if (value > type(uint72).max) {
            revert SafeCastOverflowedUintDowncast(72, value);
        }
        return uint72(value);
    }

    /**
     * @dev Returns the downcasted uint64 from uint256, reverting on
     * overflow (when the input is greater than largest uint64).
     *
     * Counterpart to Solidity's ` + "`" + `uint64` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 64 bits
     */
    function toUint64(uint256 value) internal pure returns (uint64) {
        if (value > type(uint64).max) {
            revert SafeCastOverflowedUintDowncast(64, value);
        }
        return uint64(value);
    }

    /**
     * @dev Returns the downcasted uint56 from uint256, reverting on
     * overflow (when the input is greater than largest uint56).
     *
     * Counterpart to Solidity's ` + "`" + `uint56` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 56 bits
     */
    function toUint56(uint256 value) internal pure returns (uint56) {
        if (value > type(uint56).max) {
            revert SafeCastOverflowedUintDowncast(56, value);
        }
        return uint56(value);
    }

    /**
     * @dev Returns the downcasted uint48 from uint256, reverting on
     * overflow (when the input is greater than largest uint48).
     *
     * Counterpart to Solidity's ` + "`" + `uint48` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 48 bits
     */
    function toUint48(uint256 value) internal pure returns (uint48) {
        if (value > type(uint48).max) {
            revert SafeCastOverflowedUintDowncast(48, value);
        }
        return uint48(value);
    }

    /**
     * @dev Returns the downcasted uint40 from uint256, reverting on
     * overflow (when the input is greater than largest uint40).
     *
     * Counterpart to Solidity's ` + "`" + `uint40` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 40 bits
     */
    function toUint40(uint256 value) internal pure returns (uint40) {
        if (value > type(uint40).max) {
            revert SafeCastOverflowedUintDowncast(40, value);
        }
        return uint40(value);
    }

    /**
     * @dev Returns the downcasted uint32 from uint256, reverting on
     * overflow (when the input is greater than largest uint32).
     *
     * Counterpart to Solidity's ` + "`" + `uint32` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 32 bits
     */
    function toUint32(uint256 value) internal pure returns (uint32) {
        if (value > type(uint32).max) {
            revert SafeCastOverflowedUintDowncast(32, value);
        }
        return uint32(value);
    }

    /**
     * @dev Returns the downcasted uint24 from uint256, reverting on
     * overflow (when the input is greater than largest uint24).
     *
     * Counterpart to Solidity's ` + "`" + `uint24` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 24 bits
     */
    function toUint24(uint256 value) internal pure returns (uint24) {
        if (value > type(uint24).max) {
            revert SafeCastOverflowedUintDowncast(24, value);
        }
        return uint24(value);
    }

    /**
     * @dev Returns the downcasted uint16 from uint256, reverting on
     * overflow (when the input is greater than largest uint16).
     *
     * Counterpart to Solidity's ` + "`" + `uint16` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 16 bits
     */
    function toUint16(uint256 value) internal pure returns (uint16) {
        if (value > type(uint16).max) {
            revert SafeCastOverflowedUintDowncast(16, value);
        }
        return uint16(value);
    }

    /**
     * @dev Returns the downcasted uint8 from uint256, reverting on
     * overflow (when the input is greater than largest uint8).
     *
     * Counterpart to Solidity's ` + "`" + `uint8` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 8 bits
     */
    function toUint8(uint256 value) internal pure returns (uint8) {
        if (value > type(uint8).max) {
            revert SafeCastOverflowedUintDowncast(8, value);
        }
        return uint8(value);
    }

    /**
     * @dev Converts a signed int256 into an unsigned uint256.
     *
     * Requirements:
     *
     * - input must be greater than or equal to 0.
     */
    function toUint256(int256 value) internal pure returns (uint256) {
        if (value < 0) {
            revert SafeCastOverflowedIntToUint(value);
        }
        return uint256(value);
    }

    /**
     * @dev Returns the downcasted int248 from int256, reverting on
     * overflow (when the input is less than smallest int248 or
     * greater than largest int248).
     *
     * Counterpart to Solidity's ` + "`" + `int248` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 248 bits
     */
    function toInt248(int256 value) internal pure returns (int248 downcasted) {
        downcasted = int248(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(248, value);
        }
    }

    /**
     * @dev Returns the downcasted int240 from int256, reverting on
     * overflow (when the input is less than smallest int240 or
     * greater than largest int240).
     *
     * Counterpart to Solidity's ` + "`" + `int240` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 240 bits
     */
    function toInt240(int256 value) internal pure returns (int240 downcasted) {
        downcasted = int240(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(240, value);
        }
    }

    /**
     * @dev Returns the downcasted int232 from int256, reverting on
     * overflow (when the input is less than smallest int232 or
     * greater than largest int232).
     *
     * Counterpart to Solidity's ` + "`" + `int232` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 232 bits
     */
    function toInt232(int256 value) internal pure returns (int232 downcasted) {
        downcasted = int232(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(232, value);
        }
    }

    /**
     * @dev Returns the downcasted int224 from int256, reverting on
     * overflow (when the input is less than smallest int224 or
     * greater than largest int224).
     *
     * Counterpart to Solidity's ` + "`" + `int224` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 224 bits
     */
    function toInt224(int256 value) internal pure returns (int224 downcasted) {
        downcasted = int224(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(224, value);
        }
    }

    /**
     * @dev Returns the downcasted int216 from int256, reverting on
     * overflow (when the input is less than smallest int216 or
     * greater than largest int216).
     *
     * Counterpart to Solidity's ` + "`" + `int216` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 216 bits
     */
    function toInt216(int256 value) internal pure returns (int216 downcasted) {
        downcasted = int216(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(216, value);
        }
    }

    /**
     * @dev Returns the downcasted int208 from int256, reverting on
     * overflow (when the input is less than smallest int208 or
     * greater than largest int208).
     *
     * Counterpart to Solidity's ` + "`" + `int208` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 208 bits
     */
    function toInt208(int256 value) internal pure returns (int208 downcasted) {
        downcasted = int208(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(208, value);
        }
    }

    /**
     * @dev Returns the downcasted int200 from int256, reverting on
     * overflow (when the input is less than smallest int200 or
     * greater than largest int200).
     *
     * Counterpart to Solidity's ` + "`" + `int200` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 200 bits
     */
    function toInt200(int256 value) internal pure returns (int200 downcasted) {
        downcasted = int200(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(200, value);
        }
    }

    /**
     * @dev Returns the downcasted int192 from int256, reverting on
     * overflow (when the input is less than smallest int192 or
     * greater than largest int192).
     *
     * Counterpart to Solidity's ` + "`" + `int192` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 192 bits
     */
    function toInt192(int256 value) internal pure returns (int192 downcasted) {
        downcasted = int192(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(192, value);
        }
    }

    /**
     * @dev Returns the downcasted int184 from int256, reverting on
     * overflow (when the input is less than smallest int184 or
     * greater than largest int184).
     *
     * Counterpart to Solidity's ` + "`" + `int184` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 184 bits
     */
    function toInt184(int256 value) internal pure returns (int184 downcasted) {
        downcasted = int184(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(184, value);
        }
    }

    /**
     * @dev Returns the downcasted int176 from int256, reverting on
     * overflow (when the input is less than smallest int176 or
     * greater than largest int176).
     *
     * Counterpart to Solidity's ` + "`" + `int176` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 176 bits
     */
    function toInt176(int256 value) internal pure returns (int176 downcasted) {
        downcasted = int176(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(176, value);
        }
    }

    /**
     * @dev Returns the downcasted int168 from int256, reverting on
     * overflow (when the input is less than smallest int168 or
     * greater than largest int168).
     *
     * Counterpart to Solidity's ` + "`" + `int168` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 168 bits
     */
    function toInt168(int256 value) internal pure returns (int168 downcasted) {
        downcasted = int168(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(168, value);
        }
    }

    /**
     * @dev Returns the downcasted int160 from int256, reverting on
     * overflow (when the input is less than smallest int160 or
     * greater than largest int160).
     *
     * Counterpart to Solidity's ` + "`" + `int160` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 160 bits
     */
    function toInt160(int256 value) internal pure returns (int160 downcasted) {
        downcasted = int160(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(160, value);
        }
    }

    /**
     * @dev Returns the downcasted int152 from int256, reverting on
     * overflow (when the input is less than smallest int152 or
     * greater than largest int152).
     *
     * Counterpart to Solidity's ` + "`" + `int152` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 152 bits
     */
    function toInt152(int256 value) internal pure returns (int152 downcasted) {
        downcasted = int152(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(152, value);
        }
    }

    /**
     * @dev Returns the downcasted int144 from int256, reverting on
     * overflow (when the input is less than smallest int144 or
     * greater than largest int144).
     *
     * Counterpart to Solidity's ` + "`" + `int144` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 144 bits
     */
    function toInt144(int256 value) internal pure returns (int144 downcasted) {
        downcasted = int144(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(144, value);
        }
    }

    /**
     * @dev Returns the downcasted int136 from int256, reverting on
     * overflow (when the input is less than smallest int136 or
     * greater than largest int136).
     *
     * Counterpart to Solidity's ` + "`" + `int136` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 136 bits
     */
    function toInt136(int256 value) internal pure returns (int136 downcasted) {
        downcasted = int136(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(136, value);
        }
    }

    /**
     * @dev Returns the downcasted int128 from int256, reverting on
     * overflow (when the input is less than smallest int128 or
     * greater than largest int128).
     *
     * Counterpart to Solidity's ` + "`" + `int128` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 128 bits
     */
    function toInt128(int256 value) internal pure returns (int128 downcasted) {
        downcasted = int128(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(128, value);
        }
    }

    /**
     * @dev Returns the downcasted int120 from int256, reverting on
     * overflow (when the input is less than smallest int120 or
     * greater than largest int120).
     *
     * Counterpart to Solidity's ` + "`" + `int120` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 120 bits
     */
    function toInt120(int256 value) internal pure returns (int120 downcasted) {
        downcasted = int120(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(120, value);
        }
    }

    /**
     * @dev Returns the downcasted int112 from int256, reverting on
     * overflow (when the input is less than smallest int112 or
     * greater than largest int112).
     *
     * Counterpart to Solidity's ` + "`" + `int112` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 112 bits
     */
    function toInt112(int256 value) internal pure returns (int112 downcasted) {
        downcasted = int112(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(112, value);
        }
    }

    /**
     * @dev Returns the downcasted int104 from int256, reverting on
     * overflow (when the input is less than smallest int104 or
     * greater than largest int104).
     *
     * Counterpart to Solidity's ` + "`" + `int104` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 104 bits
     */
    function toInt104(int256 value) internal pure returns (int104 downcasted) {
        downcasted = int104(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(104, value);
        }
    }

    /**
     * @dev Returns the downcasted int96 from int256, reverting on
     * overflow (when the input is less than smallest int96 or
     * greater than largest int96).
     *
     * Counterpart to Solidity's ` + "`" + `int96` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 96 bits
     */
    function toInt96(int256 value) internal pure returns (int96 downcasted) {
        downcasted = int96(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(96, value);
        }
    }

    /**
     * @dev Returns the downcasted int88 from int256, reverting on
     * overflow (when the input is less than smallest int88 or
     * greater than largest int88).
     *
     * Counterpart to Solidity's ` + "`" + `int88` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 88 bits
     */
    function toInt88(int256 value) internal pure returns (int88 downcasted) {
        downcasted = int88(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(88, value);
        }
    }

    /**
     * @dev Returns the downcasted int80 from int256, reverting on
     * overflow (when the input is less than smallest int80 or
     * greater than largest int80).
     *
     * Counterpart to Solidity's ` + "`" + `int80` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 80 bits
     */
    function toInt80(int256 value) internal pure returns (int80 downcasted) {
        downcasted = int80(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(80, value);
        }
    }

    /**
     * @dev Returns the downcasted int72 from int256, reverting on
     * overflow (when the input is less than smallest int72 or
     * greater than largest int72).
     *
     * Counterpart to Solidity's ` + "`" + `int72` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 72 bits
     */
    function toInt72(int256 value) internal pure returns (int72 downcasted) {
        downcasted = int72(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(72, value);
        }
    }

    /**
     * @dev Returns the downcasted int64 from int256, reverting on
     * overflow (when the input is less than smallest int64 or
     * greater than largest int64).
     *
     * Counterpart to Solidity's ` + "`" + `int64` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 64 bits
     */
    function toInt64(int256 value) internal pure returns (int64 downcasted) {
        downcasted = int64(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(64, value);
        }
    }

    /**
     * @dev Returns the downcasted int56 from int256, reverting on
     * overflow (when the input is less than smallest int56 or
     * greater than largest int56).
     *
     * Counterpart to Solidity's ` + "`" + `int56` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 56 bits
     */
    function toInt56(int256 value) internal pure returns (int56 downcasted) {
        downcasted = int56(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(56, value);
        }
    }

    /**
     * @dev Returns the downcasted int48 from int256, reverting on
     * overflow (when the input is less than smallest int48 or
     * greater than largest int48).
     *
     * Counterpart to Solidity's ` + "`" + `int48` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 48 bits
     */
    function toInt48(int256 value) internal pure returns (int48 downcasted) {
        downcasted = int48(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(48, value);
        }
    }

    /**
     * @dev Returns the downcasted int40 from int256, reverting on
     * overflow (when the input is less than smallest int40 or
     * greater than largest int40).
     *
     * Counterpart to Solidity's ` + "`" + `int40` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 40 bits
     */
    function toInt40(int256 value) internal pure returns (int40 downcasted) {
        downcasted = int40(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(40, value);
        }
    }

    /**
     * @dev Returns the downcasted int32 from int256, reverting on
     * overflow (when the input is less than smallest int32 or
     * greater than largest int32).
     *
     * Counterpart to Solidity's ` + "`" + `int32` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 32 bits
     */
    function toInt32(int256 value) internal pure returns (int32 downcasted) {
        downcasted = int32(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(32, value);
        }
    }

    /**
     * @dev Returns the downcasted int24 from int256, reverting on
     * overflow (when the input is less than smallest int24 or
     * greater than largest int24).
     *
     * Counterpart to Solidity's ` + "`" + `int24` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 24 bits
     */
    function toInt24(int256 value) internal pure returns (int24 downcasted) {
        downcasted = int24(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(24, value);
        }
    }

    /**
     * @dev Returns the downcasted int16 from int256, reverting on
     * overflow (when the input is less than smallest int16 or
     * greater than largest int16).
     *
     * Counterpart to Solidity's ` + "`" + `int16` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 16 bits
     */
    function toInt16(int256 value) internal pure returns (int16 downcasted) {
        downcasted = int16(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(16, value);
        }
    }

    /**
     * @dev Returns the downcasted int8 from int256, reverting on
     * overflow (when the input is less than smallest int8 or
     * greater than largest int8).
     *
     * Counterpart to Solidity's ` + "`" + `int8` + "`" + ` operator.
     *
     * Requirements:
     *
     * - input must fit into 8 bits
     */
    function toInt8(int256 value) internal pure returns (int8 downcasted) {
        downcasted = int8(value);
        if (downcasted != value) {
            revert SafeCastOverflowedIntDowncast(8, value);
        }
    }

    /**
     * @dev Converts an unsigned uint256 into a signed int256.
     *
     * Requirements:
     *
     * - input must be less than or equal to maxInt256.
     */
    function toInt256(uint256 value) internal pure returns (int256) {
        // Note: Unsafe cast below is okay because ` + "`" + `type(int256).max` + "`" + ` is guaranteed to be positive
        if (value > uint256(type(int256).max)) {
            revert SafeCastOverflowedUintToInt(value);
        }
        return int256(value);
    }

    /**
     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.
     */
    function toUint(bool b) internal pure returns (uint256 u) {
        assembly ("memory-safe") {
            u := iszero(iszero(b))
        }
    }
}

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Floor, // Toward negative infinity
        Ceil, // Toward positive infinity
        Trunc, // Toward zero
        Expand // Away from zero
    }

    /**
     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Branchless ternary evaluation for ` + "`" + `a ? b : c` + "`" + `. Gas costs are constant.
     *
     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
     * However, the compiler may optimize Solidity ternary operations (i.e. ` + "`" + `a ? b : c` + "`" + `) to only compute
     * one branch when needed, making this function more expensive.
     */
    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {
        unchecked {
            // branchless ternary works because:
            // b ^ (a ^ b) == a
            // b ^ 0 == b
            return b ^ ((a ^ b) * SafeCast.toUint(condition));
        }
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return ternary(a > b, a, b);
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return ternary(a < b, a, b);
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with ` + "`" + `/` + "`" + ` in that it rounds towards infinity instead
     * of rounding towards zero.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        if (b == 0) {
            // Guarantee the same behavior as in a regular Solidity division.
            Panic.panic(Panic.DIVISION_BY_ZERO);
        }

        // The following calculation ensures accurate ceiling division without overflow.
        // Since a is non-zero, (a - 1) / b will not overflow.
        // The largest possible result occurs when (a - 1) / b is type(uint256).max,
        // but the largest value we can obtain is type(uint256).max - 1, which happens
        // when a = type(uint256).max and b = 1.
        unchecked {
            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);
        }
    }

    /**
     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
     * denominator == 0.
     *
     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
     * Uniswap Labs also under MIT license.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use
            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2²⁵⁶ + prod0.
            uint256 prod0 = x * y; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                // Solidity will revert if denominator == 0, unlike the div opcode on its own.
                // The surrounding unchecked block does not change this fact.
                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
                return prod0 / denominator;
            }

            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.
            if (denominator <= prod1) {
                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));
            }

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.

            uint256 twos = denominator & (0 - denominator);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such
            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
            // works in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2⁸
            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶
            inverse *= 2 - denominator * inverse; // inverse mod 2³²
            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴
            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸
            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is
            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);
    }

    /**
     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.
     *
     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.
     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.
     *
     * If the input value is not inversible, 0 is returned.
     *
     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the
     * inverse using ` + "`" + `Math.modExp(a, n - 2, n)` + "`" + `. See {invModPrime}.
     */
    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {
        unchecked {
            if (n == 0) return 0;

            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)
            // Used to compute integers x and y such that: ax + ny = gcd(a, n).
            // When the gcd is 1, then the inverse of a modulo n exists and it's x.
            // ax + ny = 1
            // ax = 1 + (-y)n
            // ax ≡ 1 (mod n) # x is the inverse of a modulo n

            // If the remainder is 0 the gcd is n right away.
            uint256 remainder = a % n;
            uint256 gcd = n;

            // Therefore the initial coefficients are:
            // ax + ny = gcd(a, n) = n
            // 0a + 1n = n
            int256 x = 0;
            int256 y = 1;

            while (remainder != 0) {
                uint256 quotient = gcd / remainder;

                (gcd, remainder) = (
                    // The old remainder is the next gcd to try.
                    remainder,
                    // Compute the next remainder.
                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd
                    // where gcd is at most n (capped to type(uint256).max)
                    gcd - remainder * quotient
                );

                (x, y) = (
                    // Increment the coefficient of a.
                    y,
                    // Decrement the coefficient of n.
                    // Can overflow, but the result is casted to uint256 so that the
                    // next value of y is "wrapped around" to a value between 0 and n - 1.
                    x - y * int256(quotient)
                );
            }

            if (gcd != 1) return 0; // No inverse exists.
            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.
        }
    }

    /**
     * @dev Variant of {invMod}. More efficient, but only works if ` + "`" + `p` + "`" + ` is known to be a prime greater than ` + "`" + `2` + "`" + `.
     *
     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is
     * prime, then ` + "`" + `a**(p-1) ≡ 1 mod p` + "`" + `. As a consequence, we have ` + "`" + `a * a**(p-2) ≡ 1 mod p` + "`" + `, which means that
     * ` + "`" + `a**(p-2)` + "`" + ` is the modular multiplicative inverse of a in Fp.
     *
     * NOTE: this function does NOT check that ` + "`" + `p` + "`" + ` is a prime greater than ` + "`" + `2` + "`" + `.
     */
    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {
        unchecked {
            return Math.modExp(a, p - 2, p);
        }
    }

    /**
     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)
     *
     * Requirements:
     * - modulus can't be zero
     * - underlying staticcall to precompile must succeed
     *
     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make
     * sure the chain you're using it on supports the precompiled contract for modular exponentiation
     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,
     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly
     * interpreted as 0.
     */
    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {
        (bool success, uint256 result) = tryModExp(b, e, m);
        if (!success) {
            Panic.panic(Panic.DIVISION_BY_ZERO);
        }
        return result;
    }

    /**
     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).
     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying
     * to operate modulo 0 or if the underlying precompile reverted.
     *
     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain
     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in
     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack
     * of a revert, but the result may be incorrectly interpreted as 0.
     */
    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {
        if (m == 0) return (false, 0);
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            // | Offset    | Content    | Content (Hex)                                                      |
            // |-----------|------------|--------------------------------------------------------------------|
            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |
            // | 0x60:0x7f | value of b | 0x<.............................................................b> |
            // | 0x80:0x9f | value of e | 0x<.............................................................e> |
            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |
            mstore(ptr, 0x20)
            mstore(add(ptr, 0x20), 0x20)
            mstore(add(ptr, 0x40), 0x20)
            mstore(add(ptr, 0x60), b)
            mstore(add(ptr, 0x80), e)
            mstore(add(ptr, 0xa0), m)

            // Given the result < m, it's guaranteed to fit in 32 bytes,
            // so we can use the memory scratch space located at offset 0.
            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)
            result := mload(0x00)
        }
    }

    /**
     * @dev Variant of {modExp} that supports inputs of arbitrary length.
     */
    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {
        (bool success, bytes memory result) = tryModExp(b, e, m);
        if (!success) {
            Panic.panic(Panic.DIVISION_BY_ZERO);
        }
        return result;
    }

    /**
     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.
     */
    function tryModExp(
        bytes memory b,
        bytes memory e,
        bytes memory m
    ) internal view returns (bool success, bytes memory result) {
        if (_zeroBytes(m)) return (false, new bytes(0));

        uint256 mLen = m.length;

        // Encode call args in result and move the free memory pointer
        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);

        assembly ("memory-safe") {
            let dataPtr := add(result, 0x20)
            // Write result on top of args to avoid allocating extra memory.
            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)
            // Overwrite the length.
            // result.length > returndatasize() is guaranteed because returndatasize() == m.length
            mstore(result, mLen)
            // Set the memory pointer after the returned data.
            mstore(0x40, add(dataPtr, mLen))
        }
    }

    /**
     * @dev Returns whether the provided byte array is zero.
     */
    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {
        for (uint256 i = 0; i < byteArray.length; ++i) {
            if (byteArray[i] != 0) {
                return false;
            }
        }
        return true;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
     * towards zero.
     *
     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only
     * using integer operations.
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        unchecked {
            // Take care of easy edge cases when a == 0 or a == 1
            if (a <= 1) {
                return a;
            }

            // In this function, we use Newton's method to get a root of ` + "`" + `f(x) := x² - a` + "`" + `. It involves building a
            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between
            // the current value as ` + "`" + `ε_n = | x_n - sqrt(a) |` + "`" + `.
            //
            // For our first estimation, we consider ` + "`" + `e` + "`" + ` the smallest power of 2 which is bigger than the square root
            // of the target. (i.e. ` + "`" + `2**(e-1) ≤ sqrt(a) < 2**e` + "`" + `). We know that ` + "`" + `e ≤ 128` + "`" + ` because ` + "`" + `(2¹²⁸)² = 2²⁵⁶` + "`" + ` is
            // bigger than any uint256.
            //
            // By noticing that
            // ` + "`" + `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)` + "`" + `
            // we can deduce that ` + "`" + `e - 1` + "`" + ` is ` + "`" + `log2(a) / 2` + "`" + `. We can thus compute ` + "`" + `x_n = 2**(e-1)` + "`" + ` using a method similar
            // to the msb function.
            uint256 aa = a;
            uint256 xn = 1;

            if (aa >= (1 << 128)) {
                aa >>= 128;
                xn <<= 64;
            }
            if (aa >= (1 << 64)) {
                aa >>= 64;
                xn <<= 32;
            }
            if (aa >= (1 << 32)) {
                aa >>= 32;
                xn <<= 16;
            }
            if (aa >= (1 << 16)) {
                aa >>= 16;
                xn <<= 8;
            }
            if (aa >= (1 << 8)) {
                aa >>= 8;
                xn <<= 4;
            }
            if (aa >= (1 << 4)) {
                aa >>= 4;
                xn <<= 2;
            }
            if (aa >= (1 << 2)) {
                xn <<= 1;
            }

            // We now have x_n such that ` + "`" + `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n` + "`" + `. This implies ε_n ≤ 2**(e-1).
            //
            // We can refine our estimation by noticing that the middle of that interval minimizes the error.
            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).
            // This is going to be our x_0 (and ε_0)
            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)

            // From here, Newton's method give us:
            // x_{n+1} = (x_n + a / x_n) / 2
            //
            // One should note that:
            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a
            //              = ((x_n² + a) / (2 * x_n))² - a
            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a
            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)
            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)
            //              = (x_n² - a)² / (2 * x_n)²
            //              = ((x_n² - a) / (2 * x_n))²
            //              ≥ 0
            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n
            //
            // This gives us the proof of quadratic convergence of the sequence:
            // ε_{n+1} = | x_{n+1} - sqrt(a) |
            //         = | (x_n + a / x_n) / 2 - sqrt(a) |
            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |
            //         = | (x_n - sqrt(a))² / (2 * x_n) |
            //         = | ε_n² / (2 * x_n) |
            //         = ε_n² / | (2 * x_n) |
            //
            // For the first iteration, we have a special case where x_0 is known:
            // ε_1 = ε_0² / | (2 * x_0) |
            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))
            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))
            //     ≤ 2**(e-3) / 3
            //     ≤ 2**(e-3-log2(3))
            //     ≤ 2**(e-4.5)
            //
            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:
            // ε_{n+1} = ε_n² / | (2 * x_n) |
            //         ≤ (2**(e-k))² / (2 * 2**(e-1))
            //         ≤ 2**(2*e-2*k) / 2**e
            //         ≤ 2**(e-2*k)
            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above
            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5
            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9
            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18
            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36
            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72

            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision
            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either
            // sqrt(a) or sqrt(a) + 1.
            return xn - SafeCast.toUint(xn > a / xn);
        }
    }

    /**
     * @dev Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);
        }
    }

    /**
     * @dev Return the log in base 2 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        uint256 exp;
        unchecked {
            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);
            value >>= exp;
            result += exp;

            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);
            value >>= exp;
            result += exp;

            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);
            value >>= exp;
            result += exp;

            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);
            value >>= exp;
            result += exp;

            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);
            value >>= exp;
            result += exp;

            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);
            value >>= exp;
            result += exp;

            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);
            value >>= exp;
            result += exp;

            result += SafeCast.toUint(value > 1);
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);
        }
    }

    /**
     * @dev Return the log in base 10 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10 ** 64) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= 10 ** 32) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= 10 ** 16) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= 10 ** 8) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= 10 ** 4) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= 10 ** 2) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= 10 ** 1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);
        }
    }

    /**
     * @dev Return the log in base 256 of a positive value rounded towards zero.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent ` + "`" + `value` + "`" + ` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        uint256 isGt;
        unchecked {
            isGt = SafeCast.toUint(value > (1 << 128) - 1);
            value >>= isGt * 128;
            result += isGt * 16;

            isGt = SafeCast.toUint(value > (1 << 64) - 1);
            value >>= isGt * 64;
            result += isGt * 8;

            isGt = SafeCast.toUint(value > (1 << 32) - 1);
            value >>= isGt * 32;
            result += isGt * 4;

            isGt = SafeCast.toUint(value > (1 << 16) - 1);
            value >>= isGt * 16;
            result += isGt * 2;

            result += SafeCast.toUint(value > (1 << 8) - 1);
        }
        return result;
    }

    /**
     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);
        }
    }

    /**
     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
     */
    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
        return uint8(rounding) % 2 == 1;
    }
}

// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)

pragma solidity ^0.8.20;

/**
 * @dev Standard signed math utilities missing in the Solidity language.
 */
library SignedMath {
    /**
     * @dev Branchless ternary evaluation for ` + "`" + `a ? b : c` + "`" + `. Gas costs are constant.
     *
     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.
     * However, the compiler may optimize Solidity ternary operations (i.e. ` + "`" + `a ? b : c` + "`" + `) to only compute
     * one branch when needed, making this function more expensive.
     */
    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {
        unchecked {
            // branchless ternary works because:
            // b ^ (a ^ b) == a
            // b ^ 0 == b
            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));
        }
    }

    /**
     * @dev Returns the largest of two signed numbers.
     */
    function max(int256 a, int256 b) internal pure returns (int256) {
        return ternary(a > b, a, b);
    }

    /**
     * @dev Returns the smallest of two signed numbers.
     */
    function min(int256 a, int256 b) internal pure returns (int256) {
        return ternary(a < b, a, b);
    }

    /**
     * @dev Returns the average of two signed numbers without overflow.
     * The result is rounded towards zero.
     */
    function average(int256 a, int256 b) internal pure returns (int256) {
        // Formula from the book "Hacker's Delight"
        int256 x = (a & b) + ((a ^ b) >> 1);
        return x + (int256(uint256(x) >> 255) & (a ^ b));
    }

    /**
     * @dev Returns the absolute unsigned value of a signed value.
     */
    function abs(int256 n) internal pure returns (uint256) {
        unchecked {
            // Formula from the "Bit Twiddling Hacks" by Sean Eron Anderson.
            // Since ` + "`" + `n` + "`" + ` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,
            // taking advantage of the most significant (or "sign" bit) in two's complement representation.
            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,
            // the mask will either be ` + "`" + `bytes32(0)` + "`" + ` (if n is positive) or ` + "`" + `~bytes32(0)` + "`" + ` (if n is negative).
            int256 mask = n >> 255;

            // A ` + "`" + `bytes32(0)` + "`" + ` mask leaves the input unchanged, while a ` + "`" + `~bytes32(0)` + "`" + ` mask complements it.
            return uint256((n + mask) ^ mask);
        }
    }
}

/**
 * @dev String operations.
 */
library Strings {
    using SafeCast for *;

    bytes16 private constant HEX_DIGITS = "0123456789abcdef";
    uint8 private constant ADDRESS_LENGTH = 20;

    /**
     * @dev The ` + "`" + `value` + "`" + ` string doesn't fit in the specified ` + "`" + `length` + "`" + `.
     */
    error StringsInsufficientHexLength(uint256 value, uint256 length);

    /**
     * @dev The string being parsed contains characters that are not in scope of the given base.
     */
    error StringsInvalidChar();

    /**
     * @dev The string being parsed is not a properly formatted address.
     */
    error StringsInvalidAddressFormat();

    /**
     * @dev Converts a ` + "`" + `uint256` + "`" + ` to its ASCII ` + "`" + `string` + "`" + ` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            assembly ("memory-safe") {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                assembly ("memory-safe") {
                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a ` + "`" + `int256` + "`" + ` to its ASCII ` + "`" + `string` + "`" + ` decimal representation.
     */
    function toStringSigned(int256 value) internal pure returns (string memory) {
        return string.concat(value < 0 ? "-" : "", toString(SignedMath.abs(value)));
    }

    /**
     * @dev Converts a ` + "`" + `uint256` + "`" + ` to its ASCII ` + "`" + `string` + "`" + ` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a ` + "`" + `uint256` + "`" + ` to its ASCII ` + "`" + `string` + "`" + ` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        uint256 localValue = value;
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = HEX_DIGITS[localValue & 0xf];
            localValue >>= 4;
        }
        if (localValue != 0) {
            revert StringsInsufficientHexLength(value, length);
        }
        return string(buffer);
    }

    /**
     * @dev Converts an ` + "`" + `address` + "`" + ` with fixed length of 20 bytes to its not checksummed ASCII ` + "`" + `string` + "`" + ` hexadecimal
     * representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);
    }

    /**
     * @dev Converts an ` + "`" + `address` + "`" + ` with fixed length of 20 bytes to its checksummed ASCII ` + "`" + `string` + "`" + ` hexadecimal
     * representation, according to EIP-55.
     */
    function toChecksumHexString(address addr) internal pure returns (string memory) {
        bytes memory buffer = bytes(toHexString(addr));

        // hash the hex part of buffer (skip length + 2 bytes, length 40)
        uint256 hashValue;
        assembly ("memory-safe") {
            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))
        }

        for (uint256 i = 41; i > 1; --i) {
            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)
            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {
                // case shift by xoring with 0x20
                buffer[i] ^= 0x20;
            }
            hashValue >>= 4;
        }
        return string(buffer);
    }

    /**
     * @dev Returns true if the two strings are equal.
     */
    function equal(string memory a, string memory b) internal pure returns (bool) {
        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));
    }

    /**
     * @dev Parse a decimal string and returns the value as a ` + "`" + `uint256` + "`" + `.
     *
     * Requirements:
     * - The string must be formatted as ` + "`" + `[0-9]*` + "`" + `
     * - The result must fit into an ` + "`" + `uint256` + "`" + ` type
     */
    function parseUint(string memory input) internal pure returns (uint256) {
        return parseUint(input, 0, bytes(input).length);
    }

    /**
     * @dev Variant of {parseUint} that parses a substring of ` + "`" + `input` + "`" + ` located between position ` + "`" + `begin` + "`" + ` (included) and
     * ` + "`" + `end` + "`" + ` (excluded).
     *
     * Requirements:
     * - The substring must be formatted as ` + "`" + `[0-9]*` + "`" + `
     * - The result must fit into an ` + "`" + `uint256` + "`" + ` type
     */
    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {
        (bool success, uint256 value) = tryParseUint(input, begin, end);
        if (!success) revert StringsInvalidChar();
        return value;
    }

    /**
     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.
     *
     * NOTE: This function will revert if the result does not fit in a ` + "`" + `uint256` + "`" + `.
     */
    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {
        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);
    }

    /**
     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid
     * character.
     *
     * NOTE: This function will revert if the result does not fit in a ` + "`" + `uint256` + "`" + `.
     */
    function tryParseUint(
        string memory input,
        uint256 begin,
        uint256 end
    ) internal pure returns (bool success, uint256 value) {
        if (end > bytes(input).length || begin > end) return (false, 0);
        return _tryParseUintUncheckedBounds(input, begin, end);
    }

    /**
     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that
     * ` + "`" + `begin <= end <= input.length` + "`" + `. Other inputs would result in undefined behavior.
     */
    function _tryParseUintUncheckedBounds(
        string memory input,
        uint256 begin,
        uint256 end
    ) private pure returns (bool success, uint256 value) {
        bytes memory buffer = bytes(input);

        uint256 result = 0;
        for (uint256 i = begin; i < end; ++i) {
            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));
            if (chr > 9) return (false, 0);
            result *= 10;
            result += chr;
        }
        return (true, result);
    }

    /**
     * @dev Parse a decimal string and returns the value as a ` + "`" + `int256` + "`" + `.
     *
     * Requirements:
     * - The string must be formatted as ` + "`" + `[-+]?[0-9]*` + "`" + `
     * - The result must fit in an ` + "`" + `int256` + "`" + ` type.
     */
    function parseInt(string memory input) internal pure returns (int256) {
        return parseInt(input, 0, bytes(input).length);
    }

    /**
     * @dev Variant of {parseInt-string} that parses a substring of ` + "`" + `input` + "`" + ` located between position ` + "`" + `begin` + "`" + ` (included) and
     * ` + "`" + `end` + "`" + ` (excluded).
     *
     * Requirements:
     * - The substring must be formatted as ` + "`" + `[-+]?[0-9]*` + "`" + `
     * - The result must fit in an ` + "`" + `int256` + "`" + ` type.
     */
    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {
        (bool success, int256 value) = tryParseInt(input, begin, end);
        if (!success) revert StringsInvalidChar();
        return value;
    }

    /**
     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if
     * the result does not fit in a ` + "`" + `int256` + "`" + `.
     *
     * NOTE: This function will revert if the absolute value of the result does not fit in a ` + "`" + `uint256` + "`" + `.
     */
    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {
        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);
    }

    uint256 private constant ABS_MIN_INT256 = 2 ** 255;

    /**
     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid
     * character or if the result does not fit in a ` + "`" + `int256` + "`" + `.
     *
     * NOTE: This function will revert if the absolute value of the result does not fit in a ` + "`" + `uint256` + "`" + `.
     */
    function tryParseInt(
        string memory input,
        uint256 begin,
        uint256 end
    ) internal pure returns (bool success, int256 value) {
        if (end > bytes(input).length || begin > end) return (false, 0);
        return _tryParseIntUncheckedBounds(input, begin, end);
    }

    /**
     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that
     * ` + "`" + `begin <= end <= input.length` + "`" + `. Other inputs would result in undefined behavior.
     */
    function _tryParseIntUncheckedBounds(
        string memory input,
        uint256 begin,
        uint256 end
    ) private pure returns (bool success, int256 value) {
        bytes memory buffer = bytes(input);

        // Check presence of a negative sign.
        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty
        bool positiveSign = sign == bytes1("+");
        bool negativeSign = sign == bytes1("-");
        uint256 offset = (positiveSign || negativeSign).toUint();

        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);

        if (absSuccess && absValue < ABS_MIN_INT256) {
            return (true, negativeSign ? -int256(absValue) : int256(absValue));
        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {
            return (true, type(int256).min);
        } else return (false, 0);
    }

    /**
     * @dev Parse a hexadecimal string (with or without "0x" prefix), and returns the value as a ` + "`" + `uint256` + "`" + `.
     *
     * Requirements:
     * - The string must be formatted as ` + "`" + `(0x)?[0-9a-fA-F]*` + "`" + `
     * - The result must fit in an ` + "`" + `uint256` + "`" + ` type.
     */
    function parseHexUint(string memory input) internal pure returns (uint256) {
        return parseHexUint(input, 0, bytes(input).length);
    }

    /**
     * @dev Variant of {parseHexUint} that parses a substring of ` + "`" + `input` + "`" + ` located between position ` + "`" + `begin` + "`" + ` (included) and
     * ` + "`" + `end` + "`" + ` (excluded).
     *
     * Requirements:
     * - The substring must be formatted as ` + "`" + `(0x)?[0-9a-fA-F]*` + "`" + `
     * - The result must fit in an ` + "`" + `uint256` + "`" + ` type.
     */
    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {
        (bool success, uint256 value) = tryParseHexUint(input, begin, end);
        if (!success) revert StringsInvalidChar();
        return value;
    }

    /**
     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.
     *
     * NOTE: This function will revert if the result does not fit in a ` + "`" + `uint256` + "`" + `.
     */
    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {
        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);
    }

    /**
     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an
     * invalid character.
     *
     * NOTE: This function will revert if the result does not fit in a ` + "`" + `uint256` + "`" + `.
     */
    function tryParseHexUint(
        string memory input,
        uint256 begin,
        uint256 end
    ) internal pure returns (bool success, uint256 value) {
        if (end > bytes(input).length || begin > end) return (false, 0);
        return _tryParseHexUintUncheckedBounds(input, begin, end);
    }

    /**
     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that
     * ` + "`" + `begin <= end <= input.length` + "`" + `. Other inputs would result in undefined behavior.
     */
    function _tryParseHexUintUncheckedBounds(
        string memory input,
        uint256 begin,
        uint256 end
    ) private pure returns (bool success, uint256 value) {
        bytes memory buffer = bytes(input);

        // skip 0x prefix if present
        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2("0x"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty
        uint256 offset = hasPrefix.toUint() * 2;

        uint256 result = 0;
        for (uint256 i = begin + offset; i < end; ++i) {
            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));
            if (chr > 15) return (false, 0);
            result *= 16;
            unchecked {
                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).
                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.
                result += chr;
            }
        }
        return (true, result);
    }

    /**
     * @dev Parse a hexadecimal string (with or without "0x" prefix), and returns the value as an ` + "`" + `address` + "`" + `.
     *
     * Requirements:
     * - The string must be formatted as ` + "`" + `(0x)?[0-9a-fA-F]{40}` + "`" + `
     */
    function parseAddress(string memory input) internal pure returns (address) {
        return parseAddress(input, 0, bytes(input).length);
    }

    /**
     * @dev Variant of {parseAddress} that parses a substring of ` + "`" + `input` + "`" + ` located between position ` + "`" + `begin` + "`" + ` (included) and
     * ` + "`" + `end` + "`" + ` (excluded).
     *
     * Requirements:
     * - The substring must be formatted as ` + "`" + `(0x)?[0-9a-fA-F]{40}` + "`" + `
     */
    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {
        (bool success, address value) = tryParseAddress(input, begin, end);
        if (!success) revert StringsInvalidAddressFormat();
        return value;
    }

    /**
     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly
     * formatted address. See {parseAddress} requirements.
     */
    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {
        return tryParseAddress(input, 0, bytes(input).length);
    }

    /**
     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly
     * formatted address. See {parseAddress} requirements.
     */
    function tryParseAddress(
        string memory input,
        uint256 begin,
        uint256 end
    ) internal pure returns (bool success, address value) {
        if (end > bytes(input).length || begin > end) return (false, address(0));

        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2("0x"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty
        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;

        // check that input is the correct length
        if (end - begin == expectedLength) {
            // length guarantees that this does not overflow, and value is at most type(uint160).max
            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);
            return (s, address(uint160(v)));
        } else {
            return (false, address(0));
        }
    }

    function _tryParseChr(bytes1 chr) private pure returns (uint8) {
        uint8 value = uint8(chr);

        // Try to parse ` + "`" + `chr` + "`" + `:
        // - Case 1: [0-9]
        // - Case 2: [a-f]
        // - Case 3: [A-F]
        // - otherwise not supported
        unchecked {
            if (value > 47 && value < 58) value -= 48;
            else if (value > 96 && value < 103) value -= 87;
            else if (value > 64 && value < 71) value -= 55;
            else return type(uint8).max;
        }

        return value;
    }

    /**
     * @dev Reads a bytes32 from a bytes array without bounds checking.
     *
     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the
     * assembly block as such would prevent some optimizations.
     */
    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {
        // This is not memory safe in the general case, but all calls to this private function are within bounds.
        assembly ("memory-safe") {
            value := mload(add(buffer, add(0x20, offset)))
        }
    }
}

/**
 * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.
 *
 * The library provides methods for generating a hash of a message that conforms to the
 * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]
 * specifications.
 */
library MessageHashUtils {
    /**
     * @dev Returns the keccak256 digest of an ERC-191 signed data with version
     * ` + "`" + `0x45` + "`" + ` (` + "`" + `personal_sign` + "`" + ` messages).
     *
     * The digest is calculated by prefixing a bytes32 ` + "`" + `messageHash` + "`" + ` with
     * ` + "`" + `"\x19Ethereum Signed Message:\n32"` + "`" + ` and hashing the result. It corresponds with the
     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[` + "`" + `eth_sign` + "`" + `] JSON-RPC method.
     *
     * NOTE: The ` + "`" + `messageHash` + "`" + ` parameter is intended to be the result of hashing a raw message with
     * keccak256, although any bytes32 value can be safely used because the final digest will
     * be re-hashed.
     *
     * See {ECDSA-recover}.
     */
    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {
        assembly ("memory-safe") {
            mstore(0x00, "\x19Ethereum Signed Message:\n32") // 32 is the bytes-length of messageHash
            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix
            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)
        }
    }

    /**
     * @dev Returns the keccak256 digest of an ERC-191 signed data with version
     * ` + "`" + `0x45` + "`" + ` (` + "`" + `personal_sign` + "`" + ` messages).
     *
     * The digest is calculated by prefixing an arbitrary ` + "`" + `message` + "`" + ` with
     * ` + "`" + `"\x19Ethereum Signed Message:\n" + len(message)` + "`" + ` and hashing the result. It corresponds with the
     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[` + "`" + `eth_sign` + "`" + `] JSON-RPC method.
     *
     * See {ECDSA-recover}.
     */
    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {
        return
            keccak256(bytes.concat("\x19Ethereum Signed Message:\n", bytes(Strings.toString(message.length)), message));
    }

    /**
     * @dev Returns the keccak256 digest of an ERC-191 signed data with version
     * ` + "`" + `0x00` + "`" + ` (data with intended validator).
     *
     * The digest is calculated by prefixing an arbitrary ` + "`" + `data` + "`" + ` with ` + "`" + `"\x19\x00"` + "`" + ` and the intended
     * ` + "`" + `validator` + "`" + ` address. Then hashing the result.
     *
     * See {ECDSA-recover}.
     */
    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(hex"19_00", validator, data));
    }

    /**
     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version ` + "`" + `0x01` + "`" + `).
     *
     * The digest is calculated from a ` + "`" + `domainSeparator` + "`" + ` and a ` + "`" + `structHash` + "`" + `, by prefixing them with
     * ` + "`" + `\x19\x01` + "`" + ` and hashing the result. It corresponds to the hash signed by the
     * https://eips.ethereum.org/EIPS/eip-712[` + "`" + `eth_signTypedData` + "`" + `] JSON-RPC method as part of EIP-712.
     *
     * See {ECDSA-recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {
        assembly ("memory-safe") {
            let ptr := mload(0x40)
            mstore(ptr, hex"19_01")
            mstore(add(ptr, 0x02), domainSeparator)
            mstore(add(ptr, 0x22), structHash)
            digest := keccak256(ptr, 0x42)
        }
    }
}

// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)

pragma solidity ^0.8.20;

// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)
// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.

pragma solidity ^0.8.20;

/**
 * @dev Library for reading and writing primitive types to specific storage slots.
 *
 * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
 * This library helps with reading and writing to such slots without the need for inline assembly.
 *
 * The functions in this library return Slot structs that contain a ` + "`" + `value` + "`" + ` member that can be used to read or write.
 *
 * Example usage to set ERC-1967 implementation slot:
 * ` + "`" + `` + "`" + `` + "`" + `solidity
 * contract ERC1967 {
 *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.
 *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
 *
 *     function _getImplementation() internal view returns (address) {
 *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
 *     }
 *
 *     function _setImplementation(address newImplementation) internal {
 *         require(newImplementation.code.length > 0);
 *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
 *     }
 * }
 * ` + "`" + `` + "`" + `` + "`" + `
 *
 * TIP: Consider using this library along with {SlotDerivation}.
 */
library StorageSlot {
    struct AddressSlot {
        address value;
    }

    struct BooleanSlot {
        bool value;
    }

    struct Bytes32Slot {
        bytes32 value;
    }

    struct Uint256Slot {
        uint256 value;
    }

    struct Int256Slot {
        int256 value;
    }

    struct StringSlot {
        string value;
    }

    struct BytesSlot {
        bytes value;
    }

    /**
     * @dev Returns an ` + "`" + `AddressSlot` + "`" + ` with member ` + "`" + `value` + "`" + ` located at ` + "`" + `slot` + "`" + `.
     */
    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
        assembly ("memory-safe") {
            r.slot := slot
        }
    }

    /**
     * @dev Returns a ` + "`" + `BooleanSlot` + "`" + ` with member ` + "`" + `value` + "`" + ` located at ` + "`" + `slot` + "`" + `.
     */
    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
        assembly ("memory-safe") {
            r.slot := slot
        }
    }

    /**
     * @dev Returns a ` + "`" + `Bytes32Slot` + "`" + ` with member ` + "`" + `value` + "`" + ` located at ` + "`" + `slot` + "`" + `.
     */
    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
        assembly ("memory-safe") {
            r.slot := slot
        }
    }

    /**
     * @dev Returns a ` + "`" + `Uint256Slot` + "`" + ` with member ` + "`" + `value` + "`" + ` located at ` + "`" + `slot` + "`" + `.
     */
    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
        assembly ("memory-safe") {
            r.slot := slot
        }
    }

    /**
     * @dev Returns a ` + "`" + `Int256Slot` + "`" + ` with member ` + "`" + `value` + "`" + ` located at ` + "`" + `slot` + "`" + `.
     */
    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {
        assembly ("memory-safe") {
            r.slot := slot
        }
    }

    /**
     * @dev Returns a ` + "`" + `StringSlot` + "`" + ` with member ` + "`" + `value` + "`" + ` located at ` + "`" + `slot` + "`" + `.
     */
    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
        assembly ("memory-safe") {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an ` + "`" + `StringSlot` + "`" + ` representation of the string storage pointer ` + "`" + `store` + "`" + `.
     */
    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
        assembly ("memory-safe") {
            r.slot := store.slot
        }
    }

    /**
     * @dev Returns a ` + "`" + `BytesSlot` + "`" + ` with member ` + "`" + `value` + "`" + ` located at ` + "`" + `slot` + "`" + `.
     */
    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
        assembly ("memory-safe") {
            r.slot := slot
        }
    }

    /**
     * @dev Returns an ` + "`" + `BytesSlot` + "`" + ` representation of the bytes storage pointer ` + "`" + `store` + "`" + `.
     */
    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
        assembly ("memory-safe") {
            r.slot := store.slot
        }
    }
}

// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |
// | length  | 0x                                                              BB |
type ShortString is bytes32;

/**
 * @dev This library provides functions to convert short memory strings
 * into a ` + "`" + `ShortString` + "`" + ` type that can be used as an immutable variable.
 *
 * Strings of arbitrary length can be optimized using this library if
 * they are short enough (up to 31 bytes) by packing them with their
 * length (1 byte) in a single EVM word (32 bytes). Additionally, a
 * fallback mechanism can be used for every other case.
 *
 * Usage example:
 *
 * ` + "`" + `` + "`" + `` + "`" + `solidity
 * contract Named {
 *     using ShortStrings for *;
 *
 *     ShortString private immutable _name;
 *     string private _nameFallback;
 *
 *     constructor(string memory contractName) {
 *         _name = contractName.toShortStringWithFallback(_nameFallback);
 *     }
 *
 *     function name() external view returns (string memory) {
 *         return _name.toStringWithFallback(_nameFallback);
 *     }
 * }
 * ` + "`" + `` + "`" + `` + "`" + `
 */
library ShortStrings {
    // Used as an identifier for strings longer than 31 bytes.
    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;

    error StringTooLong(string str);
    error InvalidShortString();

    /**
     * @dev Encode a string of at most 31 chars into a ` + "`" + `ShortString` + "`" + `.
     *
     * This will trigger a ` + "`" + `StringTooLong` + "`" + ` error is the input string is too long.
     */
    function toShortString(string memory str) internal pure returns (ShortString) {
        bytes memory bstr = bytes(str);
        if (bstr.length > 31) {
            revert StringTooLong(str);
        }
        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));
    }

    /**
     * @dev Decode a ` + "`" + `ShortString` + "`" + ` back to a "normal" string.
     */
    function toString(ShortString sstr) internal pure returns (string memory) {
        uint256 len = byteLength(sstr);
        // using ` + "`" + `new string(len)` + "`" + ` would work locally but is not memory safe.
        string memory str = new string(32);
        assembly ("memory-safe") {
            mstore(str, len)
            mstore(add(str, 0x20), sstr)
        }
        return str;
    }

    /**
     * @dev Return the length of a ` + "`" + `ShortString` + "`" + `.
     */
    function byteLength(ShortString sstr) internal pure returns (uint256) {
        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;
        if (result > 31) {
            revert InvalidShortString();
        }
        return result;
    }

    /**
     * @dev Encode a string into a ` + "`" + `ShortString` + "`" + `, or write it to storage if it is too long.
     */
    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {
        if (bytes(value).length < 32) {
            return toShortString(value);
        } else {
            StorageSlot.getStringSlot(store).value = value;
            return ShortString.wrap(FALLBACK_SENTINEL);
        }
    }

    /**
     * @dev Decode a string that was encoded to ` + "`" + `ShortString` + "`" + ` or written to storage using {setWithFallback}.
     */
    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {
        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
            return toString(value);
        } else {
            return store;
        }
    }

    /**
     * @dev Return the length of a string that was encoded to ` + "`" + `ShortString` + "`" + ` or written to storage using
     * {setWithFallback}.
     *
     * WARNING: This will return the "byte length" of the string. This may not reflect the actual length in terms of
     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.
     */
    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {
        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
            return byteLength(value);
        } else {
            return bytes(store).length;
        }
    }
}

// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)

pragma solidity ^0.8.20;

interface IERC5267 {
    /**
     * @dev MAY be emitted to signal that the domain could have changed.
     */
    event EIP712DomainChanged();

    /**
     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712
     * signature.
     */
    function eip712Domain()
        external
        view
        returns (
            bytes1 fields,
            string memory name,
            string memory version,
            uint256 chainId,
            address verifyingContract,
            bytes32 salt,
            uint256[] memory extensions
        );
}

/**
 * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.
 *
 * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose
 * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract
 * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to
 * produce the hash of their typed data using a combination of ` + "`" + `abi.encode` + "`" + ` and ` + "`" + `keccak256` + "`" + `.
 *
 * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
 * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
 * ({_hashTypedDataV4}).
 *
 * The implementation of the domain separator was designed to be as efficient as possible while still properly updating
 * the chain id to protect against replay attacks on an eventual fork of the chain.
 *
 * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
 * https://docs.metamask.io/guide/signing-data.html[` + "`" + `eth_signTypedDataV4` + "`" + ` in MetaMask].
 *
 * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain
 * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the
 * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.
 *
 * @custom:oz-upgrades-unsafe-allow state-variable-immutable
 */
abstract contract EIP712 is IERC5267 {
    using ShortStrings for *;

    bytes32 private constant TYPE_HASH =
        keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");

    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to
    // invalidate the cached domain separator if the chain id changes.
    bytes32 private immutable _cachedDomainSeparator;
    uint256 private immutable _cachedChainId;
    address private immutable _cachedThis;

    bytes32 private immutable _hashedName;
    bytes32 private immutable _hashedVersion;

    ShortString private immutable _name;
    ShortString private immutable _version;
    string private _nameFallback;
    string private _versionFallback;

    /**
     * @dev Initializes the domain separator and parameter caches.
     *
     * The meaning of ` + "`" + `name` + "`" + ` and ` + "`" + `version` + "`" + ` is specified in
     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:
     *
     * - ` + "`" + `name` + "`" + `: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
     * - ` + "`" + `version` + "`" + `: the current major version of the signing domain.
     *
     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
     * contract upgrade].
     */
    constructor(string memory name, string memory version) {
        _name = name.toShortStringWithFallback(_nameFallback);
        _version = version.toShortStringWithFallback(_versionFallback);
        _hashedName = keccak256(bytes(name));
        _hashedVersion = keccak256(bytes(version));

        _cachedChainId = block.chainid;
        _cachedDomainSeparator = _buildDomainSeparator();
        _cachedThis = address(this);
    }

    /**
     * @dev Returns the domain separator for the current chain.
     */
    function _domainSeparatorV4() internal view returns (bytes32) {
        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {
            return _cachedDomainSeparator;
        } else {
            return _buildDomainSeparator();
        }
    }

    function _buildDomainSeparator() private view returns (bytes32) {
        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));
    }

    /**
     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
     * function returns the hash of the fully encoded EIP712 message for this domain.
     *
     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
     *
     * ` + "`" + `` + "`" + `` + "`" + `solidity
     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
     *     keccak256("Mail(address to,string contents)"),
     *     mailTo,
     *     keccak256(bytes(mailContents))
     * )));
     * address signer = ECDSA.recover(digest, signature);
     * ` + "`" + `` + "`" + `` + "`" + `
     */
    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);
    }

    /**
     * @dev See {IERC-5267}.
     */
    function eip712Domain()
        public
        view
        virtual
        returns (
            bytes1 fields,
            string memory name,
            string memory version,
            uint256 chainId,
            address verifyingContract,
            bytes32 salt,
            uint256[] memory extensions
        )
    {
        return (
            hex"0f", // 01111
            _EIP712Name(),
            _EIP712Version(),
            block.chainid,
            address(this),
            bytes32(0),
            new uint256[](0)
        );
    }

    /**
     * @dev The name parameter for the EIP712 domain.
     *
     * NOTE: By default this function reads _name which is an immutable value.
     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
     */
    // solhint-disable-next-line func-name-mixedcase
    function _EIP712Name() internal view returns (string memory) {
        return _name.toStringWithFallback(_nameFallback);
    }

    /**
     * @dev The version parameter for the EIP712 domain.
     *
     * NOTE: By default this function reads _version which is an immutable value.
     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
     */
    // solhint-disable-next-line func-name-mixedcase
    function _EIP712Version() internal view returns (string memory) {
        return _version.toStringWithFallback(_versionFallback);
    }
}


// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.20;

// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC-165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[ERC].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * ` + "`" + `interfaceId` + "`" + `. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

/**
 * @dev Required interface of an ERC-721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when ` + "`" + `tokenId` + "`" + ` token is transferred from ` + "`" + `from` + "`" + ` to ` + "`" + `to` + "`" + `.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when ` + "`" + `owner` + "`" + ` enables ` + "`" + `approved` + "`" + ` to manage the ` + "`" + `tokenId` + "`" + ` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when ` + "`" + `owner` + "`" + ` enables or disables (` + "`" + `approved` + "`" + `) ` + "`" + `operator` + "`" + ` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ` + "`" + `` + "`" + `owner` + "`" + `` + "`" + `'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the ` + "`" + `tokenId` + "`" + ` token.
     *
     * Requirements:
     *
     * - ` + "`" + `tokenId` + "`" + ` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers ` + "`" + `tokenId` + "`" + ` token from ` + "`" + `from` + "`" + ` to ` + "`" + `to` + "`" + `.
     *
     * Requirements:
     *
     * - ` + "`" + `from` + "`" + ` cannot be the zero address.
     * - ` + "`" + `to` + "`" + ` cannot be the zero address.
     * - ` + "`" + `tokenId` + "`" + ` token must exist and be owned by ` + "`" + `from` + "`" + `.
     * - If the caller is not ` + "`" + `from` + "`" + `, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If ` + "`" + `to` + "`" + ` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;

    /**
     * @dev Safely transfers ` + "`" + `tokenId` + "`" + ` token from ` + "`" + `from` + "`" + ` to ` + "`" + `to` + "`" + `, checking first that contract recipients
     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - ` + "`" + `from` + "`" + ` cannot be the zero address.
     * - ` + "`" + `to` + "`" + ` cannot be the zero address.
     * - ` + "`" + `tokenId` + "`" + ` token must exist and be owned by ` + "`" + `from` + "`" + `.
     * - If the caller is not ` + "`" + `from` + "`" + `, it must have been allowed to move this token by either {approve} or
     *   {setApprovalForAll}.
     * - If ` + "`" + `to` + "`" + ` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers ` + "`" + `tokenId` + "`" + ` token from ` + "`" + `from` + "`" + ` to ` + "`" + `to` + "`" + `.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - ` + "`" + `from` + "`" + ` cannot be the zero address.
     * - ` + "`" + `to` + "`" + ` cannot be the zero address.
     * - ` + "`" + `tokenId` + "`" + ` token must be owned by ` + "`" + `from` + "`" + `.
     * - If the caller is not ` + "`" + `from` + "`" + `, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to ` + "`" + `to` + "`" + ` to transfer ` + "`" + `tokenId` + "`" + ` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - ` + "`" + `tokenId` + "`" + ` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove ` + "`" + `operator` + "`" + ` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The ` + "`" + `operator` + "`" + ` cannot be the address zero.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns the account approved for ` + "`" + `tokenId` + "`" + ` token.
     *
     * Requirements:
     *
     * - ` + "`" + `tokenId` + "`" + ` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the ` + "`" + `operator` + "`" + ` is allowed to manage all of the assets of ` + "`" + `owner` + "`" + `.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/SignatureChecker.sol)

pragma solidity ^0.8.20;

// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.20;

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS
    }

    /**
     * @dev The signature derives the ` + "`" + `address(0)` + "`" + `.
     */
    error ECDSAInvalidSignature();

    /**
     * @dev The signature has an invalid length.
     */
    error ECDSAInvalidSignatureLength(uint256 length);

    /**
     * @dev The signature has an S value that is in the upper half order.
     */
    error ECDSAInvalidSignatureS(bytes32 s);

    /**
     * @dev Returns the address that signed a hashed message (` + "`" + `hash` + "`" + `) with ` + "`" + `signature` + "`" + ` or an error. This will not
     * return address(0) without also returning an error description. Errors are documented using an enum (error type)
     * and a bytes32 providing additional information about the error.
     *
     * If no error is returned, then the address can be used for verification purposes.
     *
     * The ` + "`" + `ecrecover` + "`" + ` EVM precompile allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the ` + "`" + `s` + "`" + ` value to be in the lower
     * half order, and the ` + "`" + `v` + "`" + ` value to be either 27 or 28.
     *
     * IMPORTANT: ` + "`" + `hash` + "`" + ` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     */
    function tryRecover(
        bytes32 hash,
        bytes memory signature
    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            assembly ("memory-safe") {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (` + "`" + `hash` + "`" + `) with
     * ` + "`" + `signature` + "`" + `. This address can then be used for verification purposes.
     *
     * The ` + "`" + `ecrecover` + "`" + ` EVM precompile allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the ` + "`" + `s` + "`" + ` value to be in the lower
     * half order, and the ` + "`" + `v` + "`" + ` value to be either 27 or 28.
     *
     * IMPORTANT: ` + "`" + `hash` + "`" + ` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);
        _throwError(error, errorArg);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the ` + "`" + `r` + "`" + ` and ` + "`" + `vs` + "`" + ` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {
        unchecked {
            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
            // We do not check for an overflow here since the shift operation results in 0 or 1.
            uint8 v = uint8((uint256(vs) >> 255) + 27);
            return tryRecover(hash, v, r, s);
        }
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the ` + "`" + `r and ` + "`" + `vs` + "`" + ` short-signature fields separately.
     */
    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);
        _throwError(error, errorArg);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the ` + "`" + `v` + "`" + `,
     * ` + "`" + `r` + "`" + ` and ` + "`" + `s` + "`" + ` signature fields separately.
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS, s);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature, bytes32(0));
        }

        return (signer, RecoverError.NoError, bytes32(0));
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the ` + "`" + `v` + "`" + `,
     * ` + "`" + `r` + "`" + ` and ` + "`" + `s` + "`" + ` signature fields separately.
     */
    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);
        _throwError(error, errorArg);
        return recovered;
    }

    /**
     * @dev Optionally reverts with the corresponding custom error according to the ` + "`" + `error` + "`" + ` argument provided.
     */
    function _throwError(RecoverError error, bytes32 errorArg) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert ECDSAInvalidSignature();
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert ECDSAInvalidSignatureLength(uint256(errorArg));
        } else if (error == RecoverError.InvalidSignatureS) {
            revert ECDSAInvalidSignatureS(errorArg);
        }
    }
}

// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1271.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC-1271 standard signature validation method for
 * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].
 */
interface IERC1271 {
    /**
     * @dev Should return whether the signature provided is valid for the provided data
     * @param hash      Hash of the data to be signed
     * @param signature Signature byte array associated with _data
     */
    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);
}

/**
 * @dev Signature verification helper that can be used instead of ` + "`" + `ECDSA.recover` + "`" + ` to seamlessly support both ECDSA
 * signatures from externally owned accounts (EOAs) as well as ERC-1271 signatures from smart contract wallets like
 * Argent and Safe Wallet (previously Gnosis Safe).
 */
library SignatureChecker {
    /**
     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the
     * signature is validated against that smart contract using ERC-1271, otherwise it's validated using ` + "`" + `ECDSA.recover` + "`" + `.
     *
     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus
     * change through time. It could return true at block N and false at block N+1 (or the opposite).
     */
    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {
        if (signer.code.length == 0) {
            (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(hash, signature);
            return err == ECDSA.RecoverError.NoError && recovered == signer;
        } else {
            return isValidERC1271SignatureNow(signer, hash, signature);
        }
    }

    /**
     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated
     * against the signer smart contract using ERC-1271.
     *
     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus
     * change through time. It could return true at block N and false at block N+1 (or the opposite).
     */
    function isValidERC1271SignatureNow(
        address signer,
        bytes32 hash,
        bytes memory signature
    ) internal view returns (bool) {
        (bool success, bytes memory result) = signer.staticcall(
            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))
        );
        return (success &&
            result.length >= 32 &&
            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));
    }
}


contract ZigZagZog is EIP712 {
    string public constant ZigZagZogVersion = "0.1.0";
    uint256 public playCost;
    uint64 public commitDuration;
    uint64 public revealDuration;

    enum Phase {
        None,
        Commit,
        Reveal
    }

    enum EliminationResult {
        CircleEliminated,
        SquareEliminated,
        TriangleEliminated,
        NothingEliminated
    }

    struct Game {
        uint256 gameTimestamp;
        uint256 roundNumber;
        uint256 roundTimestamp;
    }

    // Game number => value staked into game
    mapping(uint256 => uint256) public gameBalance;
    // Game number => player address => number of hands purchased
    mapping(uint256 => mapping(address => uint256)) public purchasedPlays;
    // Game number => number of plays remaining
    mapping(uint256 => uint256) public survivingPlays;
    // Game number => player address => number of plays remaining
    mapping(uint256 => mapping(address => uint256)) public playerSurvivingPlays;
    // Game number => round number => player address => player has committed
    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public playerHasCommitted;
    // Game number => round number => player address => player has revealed
    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public playerHasRevealed;
    // Game number => round number => player address => player commitment
    mapping(uint256 => mapping(uint256 => mapping(address => bytes))) public playerCommitment;
    // Game number => round number => # of circles revealed
    mapping(uint256 => mapping(uint256 => uint256)) public circlesRevealed;
    // Game number => round number => # of squares revealed
    mapping(uint256 => mapping(uint256 => uint256)) public squaresRevealed;
    // Game number => round number => # of triangles revealed
    mapping(uint256 => mapping(uint256 => uint256)) public trianglesRevealed;
    // Game number => round number => player address => # of circles revealed by player
    mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public playerCirclesRevealed;
    // Game number => round number => player address => # of squares revealed by player
    mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public playerSquaresRevealed;
    // Game number => round number => player address => # of triangles revealed by player
    mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public playerTrianglesRevealed;
    // Game number => round number => # of accounts revealing a circle
    mapping(uint256 => mapping(uint256 => uint256)) public circlePlayerCount;
    // Game number => round number => # of accounts revealing a square
    mapping(uint256 => mapping(uint256 => uint256)) public squarePlayerCount;
    // Game number => round number => # of accounts revealing a triangle
    mapping(uint256 => mapping(uint256 => uint256)) public trianglePlayerCount;
    // Game number => round number => account revealing last circle
    mapping(uint256 => mapping(uint256 => address)) public lastCircleRevealed;
    // Game number => round number => account revealing last square
    mapping(uint256 => mapping(uint256 => address)) public lastSquareRevealed;
    // Game number => round number => account revealing last triangle
    mapping(uint256 => mapping(uint256 => address)) public lastTriangleRevealed;
    // Game number => player address => has claimed
    mapping(uint256 => mapping(address => bool)) public playerCashedOut;

    uint256 public currentGameNumber = 0;

    mapping(uint256 => Game) public GameState;

    event PlaysBought(address indexed player, uint256 indexed gameNumber, uint256 indexed numPlays);
    event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber);
    event PlayerReveal(
        address indexed playerAddress,
        uint256 indexed gameNumber,
        uint256 indexed roundNumber,
        uint256 numCircles,
        uint256 numSquares,
        uint256 numTriangles
    );
    event WinningsClaimed(
        address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber, uint256 payoutAmount
    );

    constructor(uint256 _playCost, uint64 _commitDuration, uint64 _revealDuration)
        EIP712("ZigZagZog", ZigZagZogVersion)
    {
        playCost = _playCost;
        commitDuration = _commitDuration;
        revealDuration = _revealDuration;
        // Deployed event
    }

    function buyPlays(uint256 gameNumber) external payable {
        if (currentGameNumber == 0) {
            currentGameNumber++;
            GameState[currentGameNumber].gameTimestamp = block.timestamp;
            GameState[currentGameNumber].roundNumber = 1;
            GameState[currentGameNumber].roundTimestamp = block.timestamp;
        }

        if (gameNumber == currentGameNumber) {
            require(
                block.timestamp <= GameState[currentGameNumber].gameTimestamp + commitDuration,
                "ZigZagZog.buyPlays: game is not in the first commit phase"
            );
        } else if (gameNumber == currentGameNumber + 1) {
            Game storage currentGame = GameState[currentGameNumber];
            require(
                block.timestamp > currentGame.roundTimestamp + commitDuration + revealDuration
                    && _willGameEnd(currentGameNumber, currentGame.roundNumber),
                "ZigZagZog.buyPlays: previous game has not yet ended"
            );
            currentGameNumber++;
            GameState[currentGameNumber].gameTimestamp = block.timestamp;
            GameState[currentGameNumber].roundNumber = 1;
            GameState[currentGameNumber].roundTimestamp = block.timestamp;
        } else {
            revert("ZigZagZog.buyPlays: game number is invalid");
        }

        uint256 numPlays = msg.value / playCost;
        require(numPlays > 0, "ZigZagZog.buyPlays(): insufficient value to buy a play.");
        purchasedPlays[currentGameNumber][msg.sender] = numPlays;
        playerSurvivingPlays[currentGameNumber][msg.sender] = numPlays;
        survivingPlays[currentGameNumber] += numPlays;

        uint256 stakedAmount = numPlays * playCost;
        gameBalance[currentGameNumber] += stakedAmount;
        uint256 excess = msg.value - stakedAmount;
        if (excess > 0) {
            payable(msg.sender).transfer(excess); // Refund excess native token
        }

        emit PlaysBought(msg.sender, gameNumber, numPlays);
    }

    function choicesHash(
        uint256 nonce,
        uint256 gameNumber,
        uint256 roundNumber,
        uint256 numCircles,
        uint256 numSquares,
        uint256 numTriangles
    ) public view returns (bytes32) {
        bytes32 structHash = keccak256(
            abi.encode(
                keccak256(
                    "ChoicesMessage(uint256 nonce,uint256 gameNumber,uint256 roundNumber,uint256 numCircles,uint256 numSquares,uint256 numTriangles)"
                ),
                nonce,
                gameNumber,
                roundNumber,
                numCircles,
                numSquares,
                numTriangles
            )
        );
        return _hashTypedDataV4(structHash);
    }

    function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes memory signature) external {
        Game storage game = GameState[gameNumber];

        if (roundNumber > game.roundNumber) {
            require(
                (block.timestamp > game.roundTimestamp + commitDuration + revealDuration)
                    && (roundNumber - game.roundNumber == 1),
                "ZigZagZog.commitChoices: round hasn't started yet"
            );
            game.roundNumber++;
            game.roundTimestamp = block.timestamp;
        }
        require(signature.length > 0, "ZigZagZog.commitChoices: signature is empty");

        require(
            block.timestamp <= game.roundTimestamp + commitDuration, "ZigZagZog.commitChoices: commit window has passed"
        );

        require(
            !playerHasCommitted[gameNumber][roundNumber][msg.sender],
            "ZigZagZog.commitChoices: player already committed"
        );

        if (roundNumber > 1) {
            uint256 previousRound = roundNumber - 1;
            EliminationResult elimResult = _calculateEliminationResult(
                circlesRevealed[gameNumber][previousRound],
                squaresRevealed[gameNumber][previousRound],
                trianglesRevealed[gameNumber][previousRound]
            );

            _updateSurvivingPlays(gameNumber, roundNumber, elimResult);

            if (elimResult == EliminationResult.CircleEliminated) {
                playerSurvivingPlays[gameNumber][msg.sender] = playerSquaresRevealed[gameNumber][previousRound][msg
                    .sender] + playerTrianglesRevealed[gameNumber][previousRound][msg.sender];
            } else if (elimResult == EliminationResult.SquareEliminated) {
                playerSurvivingPlays[gameNumber][msg.sender] = playerCirclesRevealed[gameNumber][previousRound][msg
                    .sender] + playerTrianglesRevealed[gameNumber][previousRound][msg.sender];
            } else if (elimResult == EliminationResult.TriangleEliminated) {
                playerSurvivingPlays[gameNumber][msg.sender] = playerCirclesRevealed[gameNumber][previousRound][msg
                    .sender] + playerSquaresRevealed[gameNumber][previousRound][msg.sender];
            } else {
                revert("ZigZagZog.commitChoices: game has ended");
            }

            require(
                playerSurvivingPlays[gameNumber][msg.sender] > 0,
                "ZigZagZog.commitChoices: player has no remaining plays"
            );

            if (
                survivingPlays[gameNumber] <= 2
                    || survivingPlays[gameNumber] == playerSurvivingPlays[gameNumber][msg.sender]
            ) {
                revert("ZigZagZog.commitChoices: game has ended");
            }
        }

        playerHasCommitted[gameNumber][roundNumber][msg.sender] = true;
        playerCommitment[gameNumber][roundNumber][msg.sender] = signature;

        emit PlayerCommitment(msg.sender, gameNumber, roundNumber);
    }

    function revealChoices(
        uint256 gameNumber,
        uint256 roundNumber,
        uint256 nonce,
        uint256 numCircles,
        uint256 numSquares,
        uint256 numTriangles
    ) external {
        require(
            !playerHasRevealed[gameNumber][roundNumber][msg.sender], "ZigZagZog.revealChoices: player already revealed"
        );

        Game memory game = GameState[gameNumber];
        require(
            block.timestamp > game.roundTimestamp + commitDuration,
            "ZigZagZog.revealChoices: reveal phase has not yet begun"
        );
        require(
            block.timestamp <= game.roundTimestamp + commitDuration + revealDuration,
            "ZigZagZog.revealChoices: reveal phase has ended"
        );

        bytes32 choicesMessageHash = choicesHash(nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles);
        require(
            SignatureChecker.isValidSignatureNow(
                msg.sender, choicesMessageHash, playerCommitment[gameNumber][roundNumber][msg.sender]
            ),
            "ZigZagZog.revealChoices: invalid signature"
        );

        require(
            numCircles + numSquares + numTriangles == playerSurvivingPlays[gameNumber][msg.sender],
            "ZigZagZog.revealChoices: number of revealed plays does not match surviving plays"
        );

        if (numCircles > 0) {
            circlePlayerCount[gameNumber][roundNumber] += 1;
            circlesRevealed[gameNumber][roundNumber] += numCircles;
            playerCirclesRevealed[gameNumber][roundNumber][msg.sender] = numCircles;
            lastCircleRevealed[gameNumber][roundNumber] = msg.sender;
        }

        if (numSquares > 0) {
            squarePlayerCount[gameNumber][roundNumber] += 1;
            squaresRevealed[gameNumber][roundNumber] += numSquares;
            playerSquaresRevealed[gameNumber][roundNumber][msg.sender] = numSquares;
            lastSquareRevealed[gameNumber][roundNumber] = msg.sender;
        }

        if (numTriangles > 0) {
            trianglePlayerCount[gameNumber][roundNumber] += 1;
            trianglesRevealed[gameNumber][roundNumber] += numTriangles;
            playerTrianglesRevealed[gameNumber][roundNumber][msg.sender] = numTriangles;
            lastTriangleRevealed[gameNumber][roundNumber] = msg.sender;
        }

        playerHasRevealed[gameNumber][roundNumber][msg.sender] = true;

        if (_willGameEnd(gameNumber, roundNumber)) {
            GameState[gameNumber + 1].gameTimestamp = block.timestamp;
        } else {
            GameState[gameNumber + 1].gameTimestamp = 0;
        }

        emit PlayerReveal(msg.sender, gameNumber, roundNumber, numCircles, numSquares, numTriangles);
    }

    function claimWinnings(uint256 gameNumber) external {
        Game memory game = GameState[gameNumber];

        require(block.timestamp > game.roundTimestamp + commitDuration + revealDuration);
        require(!playerCashedOut[gameNumber][msg.sender], "ZigZagZog.claimWinnings: player already claimed");

        EliminationResult elimResult = _calculateEliminationResult(
            circlesRevealed[gameNumber][game.roundNumber],
            squaresRevealed[gameNumber][game.roundNumber],
            trianglesRevealed[gameNumber][game.roundNumber]
        );

        _updateSurvivingPlays(gameNumber, game.roundNumber + 1, elimResult);

        if (elimResult == EliminationResult.CircleEliminated) {
            playerSurvivingPlays[gameNumber][msg.sender] = playerSquaresRevealed[gameNumber][game.roundNumber][msg
                .sender] + playerTrianglesRevealed[gameNumber][game.roundNumber][msg.sender];
        } else if (elimResult == EliminationResult.SquareEliminated) {
            playerSurvivingPlays[gameNumber][msg.sender] = playerCirclesRevealed[gameNumber][game.roundNumber][msg
                .sender] + playerTrianglesRevealed[gameNumber][game.roundNumber][msg.sender];
        } else if (elimResult == EliminationResult.TriangleEliminated) {
            playerSurvivingPlays[gameNumber][msg.sender] = playerCirclesRevealed[gameNumber][game.roundNumber][msg
                .sender] + playerSquaresRevealed[gameNumber][game.roundNumber][msg.sender];
        } else {
            playerSurvivingPlays[gameNumber][msg.sender] = playerCirclesRevealed[gameNumber][game.roundNumber][msg
                .sender] + playerSquaresRevealed[gameNumber][game.roundNumber][msg.sender]
                + playerTrianglesRevealed[gameNumber][game.roundNumber][msg.sender];
        }

        require(_willGameEnd(gameNumber, game.roundNumber), "ZigZagZog.claimWinnings: game has not yet ended");

        // Payout
        playerCashedOut[gameNumber][msg.sender] = true;
        uint256 payoutAmount = (
            ((gameBalance[gameNumber] * playerSurvivingPlays[gameNumber][msg.sender]) << 64)
                / survivingPlays[gameNumber]
        ) >> 64;
        payable(msg.sender).transfer(payoutAmount);

        emit WinningsClaimed(msg.sender, gameNumber, game.roundNumber, payoutAmount);
    }

    function hasGameEnded(uint256 gameNumber) external view returns (bool) {
        // Check timers.
        Game memory game = GameState[gameNumber];

        return _willGameEnd(gameNumber, game.roundNumber);
    }

    function getRoundOutcome(uint256 gameNumber, uint256 roundNumber) public view returns (EliminationResult) {
        return _calculateEliminationResult(
            circlesRevealed[gameNumber][roundNumber],
            squaresRevealed[gameNumber][roundNumber],
            trianglesRevealed[gameNumber][roundNumber]
        );
    }

    function _willGameEnd(uint256 gameNumber, uint256 roundNumber) internal view returns (bool) {
        uint256 circles = circlesRevealed[gameNumber][roundNumber];
        uint256 squares = squaresRevealed[gameNumber][roundNumber];
        uint256 triangles = trianglesRevealed[gameNumber][roundNumber];
        if (
            circlePlayerCount[gameNumber][roundNumber] + squarePlayerCount[gameNumber][roundNumber]
                + trianglePlayerCount[gameNumber][roundNumber] == 1
        ) {
            return true;
        }

        EliminationResult elimResult = _calculateEliminationResult(circles, squares, triangles);

        uint256 rawCountRemaining;
        if (elimResult == EliminationResult.CircleEliminated) {
            if (squares + triangles <= 2) {
                return true;
            }
            rawCountRemaining =
                squarePlayerCount[gameNumber][roundNumber] + trianglePlayerCount[gameNumber][roundNumber];
            if (rawCountRemaining == 1) {
                return true;
            } else if (rawCountRemaining == 2) {
                return lastSquareRevealed[gameNumber][roundNumber] == lastTriangleRevealed[gameNumber][roundNumber];
            } else {
                return false;
            }
        } else if (elimResult == EliminationResult.SquareEliminated) {
            if (circles + triangles <= 2) {
                return true;
            }
            rawCountRemaining =
                circlePlayerCount[gameNumber][roundNumber] + trianglePlayerCount[gameNumber][roundNumber];
            if (rawCountRemaining == 1) {
                return true;
            } else if (rawCountRemaining == 2) {
                return lastCircleRevealed[gameNumber][roundNumber] == lastTriangleRevealed[gameNumber][roundNumber];
            } else {
                return false;
            }
        } else if (elimResult == EliminationResult.TriangleEliminated) {
            if (circles + squares <= 2) {
                return true;
            }
            rawCountRemaining = circlePlayerCount[gameNumber][roundNumber] + squarePlayerCount[gameNumber][roundNumber];
            if (rawCountRemaining == 1) {
                return true;
            } else if (rawCountRemaining == 2) {
                return lastCircleRevealed[gameNumber][roundNumber] == lastSquareRevealed[gameNumber][roundNumber];
            } else {
                return false;
            }
        } else {
            return true;
        }
    }

    function _calculateEliminationResult(uint256 _circlesRevealed, uint256 _squaresRevealed, uint256 _trianglesRevealed)
        internal
        pure
        returns (EliminationResult)
    {
        // I'm assuming trump order is Circle > Square > Triangle (can change later)
        if (_circlesRevealed > _squaresRevealed) {
            if (_circlesRevealed >= _trianglesRevealed) {
                return EliminationResult.CircleEliminated;
            } else {
                return EliminationResult.TriangleEliminated;
            }
        } else if (_circlesRevealed == _squaresRevealed) {
            if (_circlesRevealed < _trianglesRevealed) {
                return EliminationResult.TriangleEliminated;
            } else if (_circlesRevealed == _trianglesRevealed) {
                return EliminationResult.NothingEliminated;
            } else {
                return EliminationResult.CircleEliminated;
            }
        } else {
            if (_squaresRevealed >= _trianglesRevealed) {
                return EliminationResult.SquareEliminated;
            } else {
                return EliminationResult.TriangleEliminated;
            }
        }
    }

    function _updateSurvivingPlays(uint256 gameNumber, uint256 roundNumber, EliminationResult elimResult) internal {
        uint256 previousRound = roundNumber - 1;

        if (elimResult == EliminationResult.CircleEliminated) {
            survivingPlays[gameNumber] =
                squaresRevealed[gameNumber][previousRound] + trianglesRevealed[gameNumber][previousRound];
        } else if (elimResult == EliminationResult.SquareEliminated) {
            survivingPlays[gameNumber] =
                circlesRevealed[gameNumber][previousRound] + trianglesRevealed[gameNumber][previousRound];
        } else if (elimResult == EliminationResult.TriangleEliminated) {
            survivingPlays[gameNumber] =
                circlesRevealed[gameNumber][previousRound] + squaresRevealed[gameNumber][previousRound];
        }
    }
}
`
