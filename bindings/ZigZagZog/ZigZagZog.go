// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.21
// seer command: seer evm generate --package zigzagzog --cli --foundry out/ZigZagZog.sol/ZigZagZog.json --struct ZigZagZog --output bindings/zigzagzog/ZigZagZog.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zigzagzog

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"reflect"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// ZigZagZogMetaData contains all meta data concerning the ZigZagZog contract.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var ZigZagZogMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_playCost\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_commitDuration\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"_revealDuration\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"GameState\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"gameTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ZigZagZogVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"buyPlays\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"choicesHash\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numCircles\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numSquares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numTriangles\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"circlePlayerCount\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"circlesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"claimWinnings\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitChoices\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"currentGameNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"gameBalance\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRoundOutcome\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumZigZagZog.EliminationResult\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"hasGameEnded\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastCircleRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastSquareRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastTriangleRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playCost\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerCashedOut\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerCirclesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerCommitment\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerHasCommitted\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerHasRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerSquaresRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerSurvivingPlays\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playerTrianglesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"purchasedPlays\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"revealChoices\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numCircles\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numSquares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numTriangles\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revealDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"squarePlayerCount\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"squaredRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"survivingPlays\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"trianglePlayerCount\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"trianglesRevealed\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PlayerCommitment\",\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "0x6101606040525f60185534801562000015575f80fd5b5060405162005cb138038062005cb183398181016040528101906200003b919062000359565b6040518060400160405280600981526020017f5a69675a61675a6f6700000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f302e312e30000000000000000000000000000000000000000000000000000000815250620000bc5f83620001b760201b90919060201c565b6101208181525050620000da600182620001b760201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a08181525050620001196200020c60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250505050826002819055508160035f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600360086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505062000904565b5f602083511015620001dc57620001d4836200026860201b60201c565b905062000206565b82620001ee83620002d260201b60201c565b5f019081620001fe91906200060d565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016200024d9594939291906200075f565b60405160208183030381529060405280519060200120905090565b5f80829050601f81511115620002b757826040517f305a27a9000000000000000000000000000000000000000000000000000000008152600401620002ae919062000844565b60405180910390fd5b805181620002c59062000895565b5f1c175f1b915050919050565b5f819050919050565b5f80fd5b5f819050919050565b620002f381620002df565b8114620002fe575f80fd5b50565b5f815190506200031181620002e8565b92915050565b5f67ffffffffffffffff82169050919050565b620003358162000317565b811462000340575f80fd5b50565b5f8151905062000353816200032a565b92915050565b5f805f60608486031215620003735762000372620002db565b5b5f620003828682870162000301565b9350506020620003958682870162000343565b9250506040620003a88682870162000343565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200042e57607f821691505b602082108103620004445762000443620003e9565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200046b565b620004b486836200046b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f620004f5620004ef620004e984620002df565b620004cc565b620002df565b9050919050565b5f819050919050565b6200051083620004d5565b620005286200051f82620004fc565b84845462000477565b825550505050565b5f90565b6200053e62000530565b6200054b81848462000505565b505050565b5b818110156200057257620005665f8262000534565b60018101905062000551565b5050565b601f821115620005c1576200058b816200044a565b62000596846200045c565b81016020851015620005a6578190505b620005be620005b5856200045c565b83018262000550565b50505b505050565b5f82821c905092915050565b5f620005e35f1984600802620005c6565b1980831691505092915050565b5f620005fd8383620005d2565b9150826002028217905092915050565b6200061882620003b2565b67ffffffffffffffff811115620006345762000633620003bc565b5b62000640825462000416565b6200064d82828562000576565b5f60209050601f83116001811462000683575f84156200066e578287015190505b6200067a8582620005f0565b865550620006e9565b601f19841662000693866200044a565b5f5b82811015620006bc5784890151825560018201915060208501945060208101905062000695565b86831015620006dc5784890151620006d8601f891682620005d2565b8355505b6001600288020188555050505b505050505050565b5f819050919050565b6200070581620006f1565b82525050565b6200071681620002df565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f62000747826200071c565b9050919050565b62000759816200073b565b82525050565b5f60a082019050620007745f830188620006fa565b620007836020830187620006fa565b620007926040830186620006fa565b620007a160608301856200070b565b620007b060808301846200074e565b9695505050505050565b5f82825260208201905092915050565b5f5b83811015620007e9578082015181840152602081019050620007cc565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6200081082620003b2565b6200081c8185620007ba565b93506200082e818560208601620007ca565b6200083981620007f4565b840191505092915050565b5f6020820190508181035f8301526200085e818462000804565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f6200088c8251620006f1565b80915050919050565b5f620008a18262000866565b82620008ad8462000870565b9050620008ba816200087f565b92506020821015620008fd57620008f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026200046b565b831692505b5050919050565b60805160a05160c05160e05161010051610120516101405161535b620009565f395f6135f401525f6135b901525f613af401525f613ad301525f61386301525f6138b901525f6138e2015261535b5ff3fe6080604052600436106101f8575f3560e01c8063886a6de11161010c578063ad0267001161009f578063ddf394831161006e578063ddf394831461081a578063de1f0f0914610856578063e78e456414610892578063ecf16d4d146108ce578063fb22198b1461090a576101f8565b8063ad0267001461073c578063c24795d914610778578063c96ac341146107b4578063d1ae4e75146107dc576101f8565b8063a091e3e3116100db578063a091e3e31461065e578063a4516fad1461069a578063a773f43a146106c4578063a956f6cb14610700576101f8565b8063886a6de1146105805780638ffa3623146105aa57806391518686146105e6578063a08306d114610622576101f8565b80631d310c2e1161018f578063677bd9ff1161015e578063677bd9ff146104a65780636f833811146104ce57806371db08c0146104f857806377b0f89d1461051457806384b0196e14610550576101f8565b80631d310c2e146103dc5780632eb1713e1461041857806331bc98f81461044257806363a483a81461047e576101f8565b806317774a36116101cb57806317774a36146102ec57806319be5ad01461032857806319ceb612146103645780631beb8902146103a0576101f8565b80630d109da0146101fc5780630ed348ae146102385780630ff10432146102745780631455249e146102b0575b5f80fd5b348015610207575f80fd5b50610222600480360381019061021d9190613c30565b610934565b60405161022f9190613c7d565b60405180910390f35b348015610243575f80fd5b5061025e60048036038101906102599190613c96565b610954565b60405161026b9190613d70565b60405180910390f35b34801561027f575f80fd5b5061029a60048036038101906102959190613c96565b610a05565b6040516102a79190613daa565b60405180910390f35b3480156102bb575f80fd5b506102d660048036038101906102d19190613c30565b610a3a565b6040516102e39190613daa565b60405180910390f35b3480156102f7575f80fd5b50610312600480360381019061030d9190613c96565b610a64565b60405161031f9190613c7d565b60405180910390f35b348015610333575f80fd5b5061034e60048036038101906103499190613dc3565b610a8f565b60405161035b9190613c7d565b60405180910390f35b34801561036f575f80fd5b5061038a60048036038101906103859190613dee565b610aa4565b6040516103979190613e9f565b60405180910390f35b3480156103ab575f80fd5b506103c660048036038101906103c19190613dee565b610b18565b6040516103d39190613ec7565b60405180910390f35b3480156103e7575f80fd5b5061040260048036038101906103fd9190613dee565b610b55565b60405161040f9190613ec7565b60405180910390f35b348015610423575f80fd5b5061042c610b92565b6040516104399190613f32565b60405180910390f35b34801561044d575f80fd5b5061046860048036038101906104639190613dee565b610bcb565b6040516104759190613c7d565b60405180910390f35b348015610489575f80fd5b506104a4600480360381019061049f9190613f52565b610beb565b005b3480156104b1575f80fd5b506104cc60048036038101906104c79190613dc3565b611431565b005b3480156104d9575f80fd5b506104e2611cf1565b6040516104ef9190613ffd565b60405180910390f35b610512600480360381019061050d9190613dc3565b611d0a565b005b34801561051f575f80fd5b5061053a60048036038101906105359190613dee565b612152565b6040516105479190613c7d565b60405180910390f35b34801561055b575f80fd5b50610564612172565b604051610577979695949392919061411f565b60405180910390f35b34801561058b575f80fd5b50610594612217565b6040516105a19190613ffd565b60405180910390f35b3480156105b5575f80fd5b506105d060048036038101906105cb9190613f52565b612231565b6040516105dd91906141a1565b60405180910390f35b3480156105f1575f80fd5b5061060c60048036038101906106079190613dc3565b61229e565b6040516106199190613c7d565b60405180910390f35b34801561062d575f80fd5b5061064860048036038101906106439190613c96565b6122b3565b6040516106559190613c7d565b60405180910390f35b348015610669575f80fd5b50610684600480360381019061067f9190613dee565b6122de565b6040516106919190613c7d565b60405180910390f35b3480156106a5575f80fd5b506106ae6122fe565b6040516106bb9190613c7d565b60405180910390f35b3480156106cf575f80fd5b506106ea60048036038101906106e59190613dee565b612304565b6040516106f79190613ec7565b60405180910390f35b34801561070b575f80fd5b5061072660048036038101906107219190613dee565b612341565b6040516107339190613c7d565b60405180910390f35b348015610747575f80fd5b50610762600480360381019061075d9190613dee565b612361565b60405161076f9190613c7d565b60405180910390f35b348015610783575f80fd5b5061079e60048036038101906107999190613c96565b612381565b6040516107ab9190613daa565b60405180910390f35b3480156107bf575f80fd5b506107da60048036038101906107d591906142e6565b6123b6565b005b3480156107e7575f80fd5b5061080260048036038101906107fd9190613dc3565b612d17565b60405161081193929190614352565b60405180910390f35b348015610825575f80fd5b50610840600480360381019061083b9190613c30565b612d3d565b60405161084d9190613c7d565b60405180910390f35b348015610861575f80fd5b5061087c60048036038101906108779190613dee565b612d5d565b6040516108899190613c7d565b60405180910390f35b34801561089d575f80fd5b506108b860048036038101906108b39190613c96565b612d7d565b6040516108c59190613c7d565b60405180910390f35b3480156108d9575f80fd5b506108f460048036038101906108ef9190613dc3565b612da8565b6040516109019190613daa565b60405180910390f35b348015610915575f80fd5b5061091e612dfb565b60405161092b9190613c7d565b60405180910390f35b6005602052815f5260405f20602052805f5260405f205f91509150505481565b600a602052825f5260405f20602052815f5260405f20602052805f5260405f205f9250925050508054610986906143b4565b80601f01602080910402602001604051908101604052809291908181526020018280546109b2906143b4565b80156109fd5780601f106109d4576101008083540402835291602001916109fd565b820191905f5260205f20905b8154815290600101906020018083116109e057829003601f168201915b505050505081565b6008602052825f5260405f20602052815f5260405f20602052805f5260405f205f92509250509054906101000a900460ff1681565b6017602052815f5260405f20602052805f5260405f205f915091509054906101000a900460ff1681565b600e602052825f5260405f20602052815f5260405f20602052805f5260405f205f9250925050505481565b6004602052805f5260405f205f915090505481565b5f610b10600b5f8581526020019081526020015f205f8481526020019081526020015f2054600c5f8681526020019081526020015f205f8581526020019081526020015f2054600d5f8781526020019081526020015f205f8681526020019081526020015f2054612e01565b905092915050565b6014602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6016602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b600b602052815f5260405f20602052805f5260405f205f91509150505481565b60095f8781526020019081526020015f205f8681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a90614454565b60405180910390fd5b5f60195f8881526020019081526020015f206040518060600160405290815f820154815260200160018201548152602001600282015481525050905060035f9054906101000a900467ffffffffffffffff1667ffffffffffffffff168160400151610cfe919061449f565b4211610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690614542565b60405180910390fd5b600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff1660035f9054906101000a900467ffffffffffffffff1667ffffffffffffffff168260400151610d8f919061449f565b610d99919061449f565b421115610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd2906145d0565b60405180910390fd5b5f610dea868989888888612231565b9050610ed83382600a5f8c81526020019081526020015f205f8b81526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208054610e57906143b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e83906143b4565b8015610ece5780601f10610ea557610100808354040283529160200191610ece565b820191905f5260205f20905b815481529060010190602001808311610eb157829003601f168201915b5050505050612e6e565b610f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0e9061465e565b60405180910390fd5b60075f8981526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054838587610f71919061449f565b610f7b919061449f565b14610fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb2906146ec565b60405180910390fd5b5f8511156110ef57600160115f8a81526020019081526020015f205f8981526020019081526020015f205f828254610ff3919061449f565b9250508190555084600b5f8a81526020019081526020015f205f8981526020019081526020015f205f828254611029919061449f565b9250508190555084600e5f8a81526020019081526020015f205f8981526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503360145f8a81526020019081526020015f205f8981526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5f84111561122357600160125f8a81526020019081526020015f205f8981526020019081526020015f205f828254611127919061449f565b9250508190555083600c5f8a81526020019081526020015f205f8981526020019081526020015f205f82825461115d919061449f565b9250508190555083600f5f8a81526020019081526020015f205f8981526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503360155f8a81526020019081526020015f205f8981526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5f83111561135757600160135f8a81526020019081526020015f205f8981526020019081526020015f205f82825461125b919061449f565b9250508190555082600d5f8a81526020019081526020015f205f8981526020019081526020015f205f828254611291919061449f565b925050819055508260105f8a81526020019081526020015f205f8981526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503360165f8a81526020019081526020015f205f8981526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160095f8a81526020019081526020015f205f8981526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506113d48888612f1a565b15611402574260195f60018b6113ea919061449f565b81526020019081526020015f205f0181905550611427565b5f60195f60018b611413919061449f565b81526020019081526020015f205f01819055505b5050505050505050565b5f60195f8381526020019081526020015f206040518060600160405290815f8201548152602001600182015481526020016002820154815250509050600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff1660035f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1682604001516114bd919061449f565b6114c7919061449f565b42116114d1575f80fd5b60175f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161561156a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115619061477a565b60405180910390fd5b5f6115e2600b5f8581526020019081526020015f205f846020015181526020019081526020015f2054600c5f8681526020019081526020015f205f856020015181526020019081526020015f2054600d5f8781526020019081526020015f205f866020015181526020019081526020015f2054612e01565b90506115ff83600184602001516115f9919061449f565b836133e8565b5f600381111561161257611611613e2c565b5b81600381111561162557611624613e2c565b5b036117495760105f8481526020019081526020015f205f836020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600f5f8581526020019081526020015f205f846020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546116f4919061449f565b60075f8581526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550611b66565b6001600381111561175d5761175c613e2c565b5b8160038111156117705761176f613e2c565b5b036118945760105f8481526020019081526020015f205f836020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600e5f8581526020019081526020015f205f846020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461183f919061449f565b60075f8581526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550611b65565b600260038111156118a8576118a7613e2c565b5b8160038111156118bb576118ba613e2c565b5b036119df57600f5f8481526020019081526020015f205f836020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600e5f8581526020019081526020015f205f846020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461198a919061449f565b60075f8581526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550611b64565b60105f8481526020019081526020015f205f836020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600f5f8581526020019081526020015f205f846020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600e5f8681526020019081526020015f205f856020015181526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054611b09919061449f565b611b13919061449f565b60075f8581526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b5b5b611b74838360200151612f1a565b611bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baa90614808565b60405180910390fd5b600160175f8581526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505f604060065f8681526020019081526020015f2054604060075f8881526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205460045f8981526020019081526020015f2054611c979190614826565b901b611ca39190614894565b901c90503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611cea573d5f803e3d5ffd5b5050505050565b60035f9054906101000a900467ffffffffffffffff1681565b5f60185403611d7c5760185f815480929190611d25906148c4565b91905055504260195f60185481526020019081526020015f205f0181905550600160195f60185481526020019081526020015f20600101819055504260195f60185481526020019081526020015f20600201819055505b6018548103611e0c5760035f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1660195f60185481526020019081526020015f205f0154611dc5919061449f565b421115611e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfe9061497b565b60405180910390fd5b611f94565b6001601854611e1b919061449f565b8103611f58575f60195f60185481526020019081526020015f209050600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff1660035f9054906101000a900467ffffffffffffffff1667ffffffffffffffff168260020154611e87919061449f565b611e91919061449f565b42118015611eab5750611eaa6018548260010154612f1a565b5b611eea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee190614a09565b60405180910390fd5b60185f815480929190611efc906148c4565b91905055504260195f60185481526020019081526020015f205f0181905550600160195f60185481526020019081526020015f20600101819055504260195f60185481526020019081526020015f206002018190555050611f93565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8a90614a97565b60405180910390fd5b5b5f60025434611fa39190614894565b90505f8111611fe7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fde90614b25565b60405180910390fd5b8060055f60185481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508060075f60185481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508060065f60185481526020019081526020015f205f8282546120af919061449f565b925050819055505f600254826120c59190614826565b90508060045f60185481526020019081526020015f205f8282546120e9919061449f565b925050819055505f81346120fd9190614b43565b90505f81111561214c573373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f1935050505015801561214a573d5f803e3d5ffd5b505b50505050565b600c602052815f5260405f20602052805f5260405f205f91509150505481565b5f6060805f805f60606121836135b1565b61218b6135eb565b46305f801b5f67ffffffffffffffff8111156121aa576121a96141c2565b5b6040519080825280602002602001820160405280156121d85781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b600360089054906101000a900467ffffffffffffffff1681565b5f807f0bf13bf07d9cf2111cab3b66057c105b0fa1e62159747b7f78670ba637f3b30f8888888888886040516020016122709796959493929190614b76565b60405160208183030381529060405280519060200120905061229181613626565b9150509695505050505050565b6006602052805f5260405f205f915090505481565b6010602052825f5260405f20602052815f5260405f20602052805f5260405f205f9250925050505481565b6013602052815f5260405f20602052805f5260405f205f91509150505481565b60185481565b6015602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6011602052815f5260405f20602052805f5260405f205f91509150505481565b6012602052815f5260405f20602052805f5260405f205f91509150505481565b6009602052825f5260405f20602052815f5260405f20602052805f5260405f205f92509250509054906101000a900460ff1681565b5f60195f8581526020019081526020015f20905080600101548311156124af57600360089054906101000a900467ffffffffffffffff1667ffffffffffffffff1660035f9054906101000a900467ffffffffffffffff1667ffffffffffffffff168260020154612426919061449f565b612430919061449f565b4211801561244d5750600181600101548461244b9190614b43565b145b61248c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248390614c53565b60405180910390fd5b806001015f8154809291906124a0906148c4565b91905055504281600201819055505b5f8251116124f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e990614ce1565b60405180910390fd5b60035f9054906101000a900467ffffffffffffffff1667ffffffffffffffff168160020154612521919061449f565b421115612563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255a90614d6f565b60405180910390fd5b60085f8581526020019081526020015f205f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161561260b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260290614dfd565b60405180910390fd5b6001831115612bf0575f6001846126229190614b43565b90505f612690600b5f8881526020019081526020015f205f8481526020019081526020015f2054600c5f8981526020019081526020015f205f8581526020019081526020015f2054600d5f8a81526020019081526020015f205f8681526020019081526020015f2054612e01565b905061269d8686836133e8565b5f60038111156126b0576126af613e2c565b5b8160038111156126c3576126c2613e2c565b5b036127df5760105f8781526020019081526020015f205f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600f5f8881526020019081526020015f205f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461278a919061449f565b60075f8881526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550612aa2565b600160038111156127f3576127f2613e2c565b5b81600381111561280657612805613e2c565b5b036129225760105f8781526020019081526020015f205f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600e5f8881526020019081526020015f205f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546128cd919061449f565b60075f8881526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550612aa1565b6002600381111561293657612935613e2c565b5b81600381111561294957612948613e2c565b5b03612a6557600f5f8781526020019081526020015f205f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054600e5f8881526020019081526020015f205f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054612a10919061449f565b60075f8881526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550612aa0565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9790614e8b565b60405180910390fd5b5b5b5f60075f8881526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411612b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2790614f19565b60405180910390fd5b600260065f8881526020019081526020015f2054111580612bad575060075f8781526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205460065f8881526020019081526020015f2054145b15612bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be490614e8b565b60405180910390fd5b50505b600160085f8681526020019081526020015f205f8581526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555081600a5f8681526020019081526020015f205f8581526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209081612ccb91906150d4565b5082843373ffffffffffffffffffffffffffffffffffffffff167f012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede60405160405180910390a450505050565b6019602052805f5260405f205f91509050805f0154908060010154908060020154905083565b6007602052815f5260405f20602052805f5260405f205f91509150505481565b600d602052815f5260405f20602052805f5260405f205f91509150505481565b600f602052825f5260405f20602052815f5260405f20602052805f5260405f205f9250925050505481565b5f8060195f8481526020019081526020015f206040518060600160405290815f8201548152602001600182015481526020016002820154815250509050612df3838260200151612f1a565b915050919050565b60025481565b5f82841115612e2257818410612e19575f9050612e67565b60029050612e67565b828403612e525781841015612e3a5760029050612e67565b818403612e4a5760039050612e67565b5f9050612e67565b818310612e625760019050612e67565b600290505b9392505050565b5f808473ffffffffffffffffffffffffffffffffffffffff163b03612f05575f80612e99858561363f565b50915091505f6003811115612eb157612eb0613e2c565b5b816003811115612ec457612ec3613e2c565b5b148015612efc57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b92505050612f13565b612f10848484613694565b90505b9392505050565b5f80600b5f8581526020019081526020015f205f8481526020019081526020015f205490505f600c5f8681526020019081526020015f205f8581526020019081526020015f205490505f600d5f8781526020019081526020015f205f8681526020019081526020015f205490505f818385612f95919061449f565b612f9f919061449f565b03612fb057600193505050506133e2565b5f612fbc848484612e01565b90505f806003811115612fd257612fd1613e2c565b5b826003811115612fe557612fe4613e2c565b5b0361311c5760135f8981526020019081526020015f205f8881526020019081526020015f205460125f8a81526020019081526020015f205f8981526020019081526020015f2054613036919061449f565b90506001810361304e576001955050505050506133e2565b6002810361310f5760165f8981526020019081526020015f205f8881526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660155f8a81526020019081526020015f205f8981526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614955050505050506133e2565b5f955050505050506133e2565b600160038111156131305761312f613e2c565b5b82600381111561314357613142613e2c565b5b0361327a5760135f8981526020019081526020015f205f8881526020019081526020015f205460115f8a81526020019081526020015f205f8981526020019081526020015f2054613194919061449f565b9050600181036131ac576001955050505050506133e2565b6002810361326d5760165f8981526020019081526020015f205f8881526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660145f8a81526020019081526020015f205f8981526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614955050505050506133e2565b5f955050505050506133e2565b6002600381111561328e5761328d613e2c565b5b8260038111156132a1576132a0613e2c565b5b036133d85760125f8981526020019081526020015f205f8881526020019081526020015f205460115f8a81526020019081526020015f205f8981526020019081526020015f20546132f2919061449f565b90506001810361330a576001955050505050506133e2565b600281036133cb5760155f8981526020019081526020015f205f8881526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660145f8a81526020019081526020015f205f8981526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614955050505050506133e2565b5f955050505050506133e2565b6001955050505050505b92915050565b5f6001836133f69190614b43565b90505f600381111561340b5761340a613e2c565b5b82600381111561341e5761341d613e2c565b5b0361348957600d5f8581526020019081526020015f205f8281526020019081526020015f2054600c5f8681526020019081526020015f205f8381526020019081526020015f205461346f919061449f565b60065f8681526020019081526020015f20819055506135ab565b6001600381111561349d5761349c613e2c565b5b8260038111156134b0576134af613e2c565b5b0361351b57600d5f8581526020019081526020015f205f8281526020019081526020015f2054600b5f8681526020019081526020015f205f8381526020019081526020015f2054613501919061449f565b60065f8681526020019081526020015f20819055506135aa565b6002600381111561352f5761352e613e2c565b5b82600381111561354257613541613e2c565b5b036135a957600c5f8581526020019081526020015f205f8281526020019081526020015f2054600b5f8681526020019081526020015f205f8381526020019081526020015f2054613593919061449f565b60065f8681526020019081526020015f20819055505b5b5b50505050565b60606135e65f7f00000000000000000000000000000000000000000000000000000000000000006137b390919063ffffffff16565b905090565b606061362160017f00000000000000000000000000000000000000000000000000000000000000006137b390919063ffffffff16565b905090565b5f613638613632613860565b83613916565b9050919050565b5f805f604184510361367f575f805f602087015192506040870151915060608701515f1a905061367188828585613956565b95509550955050505061368d565b5f600285515f1b9250925092505b9250925092565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1685856040516024016136c19291906151a3565b604051602081830303815290604052631626ba7e60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613713919061520b565b5f60405180830381855afa9150503d805f811461374b576040519150601f19603f3d011682016040523d82523d5f602084013e613750565b606091505b509150915081801561376457506020815110155b80156137a85750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906137a6919061524b565b145b925050509392505050565b606060ff5f1b83146137cf576137c883613a3d565b905061385a565b8180546137db906143b4565b80601f0160208091040260200160405190810160405280929190818152602001828054613807906143b4565b80156138525780601f1061382957610100808354040283529160200191613852565b820191905f5260205f20905b81548152906001019060200180831161383557829003601f168201915b505050505090505b92915050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156138db57507f000000000000000000000000000000000000000000000000000000000000000046145b15613908577f00000000000000000000000000000000000000000000000000000000000000009050613913565b613910613aaf565b90505b90565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c1115613992575f600385925092509250613a33565b5f6001888888886040515f81526020016040526040516139b59493929190615291565b6020604051602081039080840390855afa1580156139d5573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613a26575f60015f801b93509350935050613a33565b805f805f1b935093509350505b9450945094915050565b60605f613a4983613b44565b90505f602067ffffffffffffffff811115613a6757613a666141c2565b5b6040519080825280601f01601f191660200182016040528015613a995781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001613b299594939291906152d4565b60405160208183030381529060405280519060200120905090565b5f8060ff835f1c169050601f811115613b89576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b613bb581613ba3565b8114613bbf575f80fd5b50565b5f81359050613bd081613bac565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f613bff82613bd6565b9050919050565b613c0f81613bf5565b8114613c19575f80fd5b50565b5f81359050613c2a81613c06565b92915050565b5f8060408385031215613c4657613c45613b9b565b5b5f613c5385828601613bc2565b9250506020613c6485828601613c1c565b9150509250929050565b613c7781613ba3565b82525050565b5f602082019050613c905f830184613c6e565b92915050565b5f805f60608486031215613cad57613cac613b9b565b5b5f613cba86828701613bc2565b9350506020613ccb86828701613bc2565b9250506040613cdc86828701613c1c565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613d1d578082015181840152602081019050613d02565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613d4282613ce6565b613d4c8185613cf0565b9350613d5c818560208601613d00565b613d6581613d28565b840191505092915050565b5f6020820190508181035f830152613d888184613d38565b905092915050565b5f8115159050919050565b613da481613d90565b82525050565b5f602082019050613dbd5f830184613d9b565b92915050565b5f60208284031215613dd857613dd7613b9b565b5b5f613de584828501613bc2565b91505092915050565b5f8060408385031215613e0457613e03613b9b565b5b5f613e1185828601613bc2565b9250506020613e2285828601613bc2565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60048110613e6a57613e69613e2c565b5b50565b5f819050613e7a82613e59565b919050565b5f613e8982613e6d565b9050919050565b613e9981613e7f565b82525050565b5f602082019050613eb25f830184613e90565b92915050565b613ec181613bf5565b82525050565b5f602082019050613eda5f830184613eb8565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f613f0482613ee0565b613f0e8185613eea565b9350613f1e818560208601613d00565b613f2781613d28565b840191505092915050565b5f6020820190508181035f830152613f4a8184613efa565b905092915050565b5f805f805f8060c08789031215613f6c57613f6b613b9b565b5b5f613f7989828a01613bc2565b9650506020613f8a89828a01613bc2565b9550506040613f9b89828a01613bc2565b9450506060613fac89828a01613bc2565b9350506080613fbd89828a01613bc2565b92505060a0613fce89828a01613bc2565b9150509295509295509295565b5f67ffffffffffffffff82169050919050565b613ff781613fdb565b82525050565b5f6020820190506140105f830184613fee565b92915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61404a81614016565b82525050565b5f819050919050565b61406281614050565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61409a81613ba3565b82525050565b5f6140ab8383614091565b60208301905092915050565b5f602082019050919050565b5f6140cd82614068565b6140d78185614072565b93506140e283614082565b805f5b838110156141125781516140f988826140a0565b9750614104836140b7565b9250506001810190506140e5565b5085935050505092915050565b5f60e0820190506141325f83018a614041565b81810360208301526141448189613efa565b905081810360408301526141588188613efa565b90506141676060830187613c6e565b6141746080830186613eb8565b61418160a0830185614059565b81810360c083015261419381846140c3565b905098975050505050505050565b5f6020820190506141b45f830184614059565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6141f882613d28565b810181811067ffffffffffffffff82111715614217576142166141c2565b5b80604052505050565b5f614229613b92565b905061423582826141ef565b919050565b5f67ffffffffffffffff821115614254576142536141c2565b5b61425d82613d28565b9050602081019050919050565b828183375f83830152505050565b5f61428a6142858461423a565b614220565b9050828152602081018484840111156142a6576142a56141be565b5b6142b184828561426a565b509392505050565b5f82601f8301126142cd576142cc6141ba565b5b81356142dd848260208601614278565b91505092915050565b5f805f606084860312156142fd576142fc613b9b565b5b5f61430a86828701613bc2565b935050602061431b86828701613bc2565b925050604084013567ffffffffffffffff81111561433c5761433b613b9f565b5b614348868287016142b9565b9150509250925092565b5f6060820190506143655f830186613c6e565b6143726020830185613c6e565b61437f6040830184613c6e565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806143cb57607f821691505b6020821081036143de576143dd614387565b5b50919050565b7f5a69675a61675a6f672e72657665616c43686f696365733a20706c61796572205f8201527f616c72656164792072657665616c656400000000000000000000000000000000602082015250565b5f61443e603083613eea565b9150614449826143e4565b604082019050919050565b5f6020820190508181035f83015261446b81614432565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6144a982613ba3565b91506144b483613ba3565b92508282019050808211156144cc576144cb614472565b5b92915050565b7f5a69675a61675a6f672e72657665616c43686f696365733a2072657665616c205f8201527f706861736520686173206e6f742079657420626567756e000000000000000000602082015250565b5f61452c603783613eea565b9150614537826144d2565b604082019050919050565b5f6020820190508181035f83015261455981614520565b9050919050565b7f5a69675a61675a6f672e72657665616c43686f696365733a2072657665616c205f8201527f70686173652068617320656e6465640000000000000000000000000000000000602082015250565b5f6145ba602f83613eea565b91506145c582614560565b604082019050919050565b5f6020820190508181035f8301526145e7816145ae565b9050919050565b7f5a69675a61675a6f672e72657665616c43686f696365733a20696e76616c69645f8201527f207369676e617475726500000000000000000000000000000000000000000000602082015250565b5f614648602a83613eea565b9150614653826145ee565b604082019050919050565b5f6020820190508181035f8301526146758161463c565b9050919050565b7f5a69675a61675a6f672e72657665616c43686f696365733a20696e73756666695f8201527f6369656e742072656d61696e696e6720706c6179730000000000000000000000602082015250565b5f6146d6603583613eea565b91506146e18261467c565b604082019050919050565b5f6020820190508181035f830152614703816146ca565b9050919050565b7f5a69675a61675a6f672e636c61696d57696e6e696e67733a20706c61796572205f8201527f616c726561647920636c61696d65640000000000000000000000000000000000602082015250565b5f614764602f83613eea565b915061476f8261470a565b604082019050919050565b5f6020820190508181035f83015261479181614758565b9050919050565b7f5a69675a61675a6f672e636c61696d57696e6e696e67733a2067616d652068615f8201527f73206e6f742079657420656e6465640000000000000000000000000000000000602082015250565b5f6147f2602f83613eea565b91506147fd82614798565b604082019050919050565b5f6020820190508181035f83015261481f816147e6565b9050919050565b5f61483082613ba3565b915061483b83613ba3565b925082820261484981613ba3565b915082820484148315176148605761485f614472565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61489e82613ba3565b91506148a983613ba3565b9250826148b9576148b8614867565b5b828204905092915050565b5f6148ce82613ba3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614900576148ff614472565b5b600182019050919050565b7f5a69675a61675a6f672e627579506c6179733a2067616d65206973206e6f74205f8201527f696e2074686520666972737420636f6d6d697420706861736500000000000000602082015250565b5f614965603983613eea565b91506149708261490b565b604082019050919050565b5f6020820190508181035f83015261499281614959565b9050919050565b7f5a69675a61675a6f672e627579506c6179733a2070726576696f75732067616d5f8201527f6520686173206e6f742079657420656e64656400000000000000000000000000602082015250565b5f6149f3603383613eea565b91506149fe82614999565b604082019050919050565b5f6020820190508181035f830152614a20816149e7565b9050919050565b7f5a69675a61675a6f672e627579506c6179733a2067616d65206e756d626572205f8201527f697320696e76616c696400000000000000000000000000000000000000000000602082015250565b5f614a81602a83613eea565b9150614a8c82614a27565b604082019050919050565b5f6020820190508181035f830152614aae81614a75565b9050919050565b7f5a69675a61675a6f672e627579506c61797328293a20696e73756666696369655f8201527f6e742076616c756520746f20627579206120706c61792e000000000000000000602082015250565b5f614b0f603783613eea565b9150614b1a82614ab5565b604082019050919050565b5f6020820190508181035f830152614b3c81614b03565b9050919050565b5f614b4d82613ba3565b9150614b5883613ba3565b9250828203905081811115614b7057614b6f614472565b5b92915050565b5f60e082019050614b895f83018a614059565b614b966020830189613c6e565b614ba36040830188613c6e565b614bb06060830187613c6e565b614bbd6080830186613c6e565b614bca60a0830185613c6e565b614bd760c0830184613c6e565b98975050505050505050565b7f5a69675a61675a6f672e636f6d6d697443686f696365733a20726f756e6420685f8201527f61736e2774207374617274656420796574000000000000000000000000000000602082015250565b5f614c3d603183613eea565b9150614c4882614be3565b604082019050919050565b5f6020820190508181035f830152614c6a81614c31565b9050919050565b7f5a69675a61675a6f672e636f6d6d697443686f696365733a207369676e6174755f8201527f726520697320656d707479000000000000000000000000000000000000000000602082015250565b5f614ccb602b83613eea565b9150614cd682614c71565b604082019050919050565b5f6020820190508181035f830152614cf881614cbf565b9050919050565b7f5a69675a61675a6f672e636f6d6d697443686f696365733a20636f6d6d6974205f8201527f77696e646f772068617320706173736564000000000000000000000000000000602082015250565b5f614d59603183613eea565b9150614d6482614cff565b604082019050919050565b5f6020820190508181035f830152614d8681614d4d565b9050919050565b7f5a69675a61675a6f672e636f6d6d697443686f696365733a20706c61796572205f8201527f616c726561647920636f6d6d6974746564000000000000000000000000000000602082015250565b5f614de7603183613eea565b9150614df282614d8d565b604082019050919050565b5f6020820190508181035f830152614e1481614ddb565b9050919050565b7f5a69675a61675a6f672e636f6d6d697443686f696365733a2067616d652068615f8201527f7320656e64656400000000000000000000000000000000000000000000000000602082015250565b5f614e75602783613eea565b9150614e8082614e1b565b604082019050919050565b5f6020820190508181035f830152614ea281614e69565b9050919050565b7f5a69675a61675a6f672e636f6d6d697443686f696365733a20706c61796572205f8201527f686173206e6f2072656d61696e696e6720706c61797300000000000000000000602082015250565b5f614f03603683613eea565b9150614f0e82614ea9565b604082019050919050565b5f6020820190508181035f830152614f3081614ef7565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302614f937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614f58565b614f9d8683614f58565b95508019841693508086168417925050509392505050565b5f819050919050565b5f614fd8614fd3614fce84613ba3565b614fb5565b613ba3565b9050919050565b5f819050919050565b614ff183614fbe565b615005614ffd82614fdf565b848454614f64565b825550505050565b5f90565b61501961500d565b615024818484614fe8565b505050565b5b818110156150475761503c5f82615011565b60018101905061502a565b5050565b601f82111561508c5761505d81614f37565b61506684614f49565b81016020851015615075578190505b61508961508185614f49565b830182615029565b50505b505050565b5f82821c905092915050565b5f6150ac5f1984600802615091565b1980831691505092915050565b5f6150c4838361509d565b9150826002028217905092915050565b6150dd82613ce6565b67ffffffffffffffff8111156150f6576150f56141c2565b5b61510082546143b4565b61510b82828561504b565b5f60209050601f83116001811461513c575f841561512a578287015190505b61513485826150b9565b86555061519b565b601f19841661514a86614f37565b5f5b828110156151715784890151825560018201915060208501945060208101905061514c565b8683101561518e578489015161518a601f89168261509d565b8355505b6001600288020188555050505b505050505050565b5f6040820190506151b65f830185614059565b81810360208301526151c88184613d38565b90509392505050565b5f81905092915050565b5f6151e582613ce6565b6151ef81856151d1565b93506151ff818560208601613d00565b80840191505092915050565b5f61521682846151db565b915081905092915050565b61522a81614050565b8114615234575f80fd5b50565b5f8151905061524581615221565b92915050565b5f602082840312156152605761525f613b9b565b5b5f61526d84828501615237565b91505092915050565b5f60ff82169050919050565b61528b81615276565b82525050565b5f6080820190506152a45f830187614059565b6152b16020830186615282565b6152be6040830185614059565b6152cb6060830184614059565b95945050505050565b5f60a0820190506152e75f830188614059565b6152f46020830187614059565b6153016040830186614059565b61530e6060830185613c6e565b61531b6080830184613eb8565b969550505050505056fea2646970667358221220f051c8eb3e43e860208d8c13e6e914a2577d39c2ca106aa8c57360c9a36296e464736f6c63430008140033",
}

// ZigZagZogABI is the input ABI used to generate the binding from.
// Deprecated: Use ZigZagZogMetaData.ABI instead.
var ZigZagZogABI = ZigZagZogMetaData.ABI

// ZigZagZogBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZigZagZogMetaData.Bin instead.
var ZigZagZogBin = ZigZagZogMetaData.Bin

// DeployZigZagZog deploys a new Ethereum contract, binding an instance of ZigZagZog to it.
func DeployZigZagZog(auth *bind.TransactOpts, backend bind.ContractBackend, _playCost *big.Int, _commitDuration uint64, _revealDuration uint64) (common.Address, *types.Transaction, *ZigZagZog, error) {
	parsed, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZigZagZogBin), backend, _playCost, _commitDuration, _revealDuration)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ZigZagZog{ZigZagZogCaller: ZigZagZogCaller{contract: contract}, ZigZagZogTransactor: ZigZagZogTransactor{contract: contract}, ZigZagZogFilterer: ZigZagZogFilterer{contract: contract}}, nil
}

// ZigZagZog is an auto generated Go binding around an Ethereum contract.
type ZigZagZog struct {
	ZigZagZogCaller     // Read-only binding to the contract
	ZigZagZogTransactor // Write-only binding to the contract
	ZigZagZogFilterer   // Log filterer for contract events
}

// ZigZagZogCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZigZagZogCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZigZagZogTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZigZagZogFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZigZagZogSession struct {
	Contract     *ZigZagZog        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZigZagZogCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZigZagZogCallerSession struct {
	Contract *ZigZagZogCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ZigZagZogTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZigZagZogTransactorSession struct {
	Contract     *ZigZagZogTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ZigZagZogRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZigZagZogRaw struct {
	Contract *ZigZagZog // Generic contract binding to access the raw methods on
}

// ZigZagZogCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZigZagZogCallerRaw struct {
	Contract *ZigZagZogCaller // Generic read-only contract binding to access the raw methods on
}

// ZigZagZogTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZigZagZogTransactorRaw struct {
	Contract *ZigZagZogTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZigZagZog creates a new instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZog(address common.Address, backend bind.ContractBackend) (*ZigZagZog, error) {
	contract, err := bindZigZagZog(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ZigZagZog{ZigZagZogCaller: ZigZagZogCaller{contract: contract}, ZigZagZogTransactor: ZigZagZogTransactor{contract: contract}, ZigZagZogFilterer: ZigZagZogFilterer{contract: contract}}, nil
}

// NewZigZagZogCaller creates a new read-only instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogCaller(address common.Address, caller bind.ContractCaller) (*ZigZagZogCaller, error) {
	contract, err := bindZigZagZog(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogCaller{contract: contract}, nil
}

// NewZigZagZogTransactor creates a new write-only instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogTransactor(address common.Address, transactor bind.ContractTransactor) (*ZigZagZogTransactor, error) {
	contract, err := bindZigZagZog(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogTransactor{contract: contract}, nil
}

// NewZigZagZogFilterer creates a new log filterer instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogFilterer(address common.Address, filterer bind.ContractFilterer) (*ZigZagZogFilterer, error) {
	contract, err := bindZigZagZog(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogFilterer{contract: contract}, nil
}

// bindZigZagZog binds a generic wrapper to an already deployed contract.
func bindZigZagZog(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZigZagZog *ZigZagZogRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZigZagZog.Contract.ZigZagZogCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZigZagZog *ZigZagZogRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ZigZagZogTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZigZagZog *ZigZagZogRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ZigZagZogTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZigZagZog *ZigZagZogCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZigZagZog.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZigZagZog *ZigZagZogTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZigZagZog.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZigZagZog *ZigZagZogTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZigZagZog.Contract.contract.Transact(opts, method, params...)
}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp)
func (_ZigZagZog *ZigZagZogCaller) GameState(opts *bind.CallOpts, arg0 *big.Int) (struct {
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
}, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "GameState", arg0)

	outstruct := new(struct {
		GameTimestamp  *big.Int
		RoundNumber    *big.Int
		RoundTimestamp *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GameTimestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.RoundNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.RoundTimestamp = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp)
func (_ZigZagZog *ZigZagZogSession) GameState(arg0 *big.Int) (struct {
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
}, error) {
	return _ZigZagZog.Contract.GameState(&_ZigZagZog.CallOpts, arg0)
}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp)
func (_ZigZagZog *ZigZagZogCallerSession) GameState(arg0 *big.Int) (struct {
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
}, error) {
	return _ZigZagZog.Contract.GameState(&_ZigZagZog.CallOpts, arg0)
}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogCaller) ZigZagZogVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "ZigZagZogVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogSession) ZigZagZogVersion() (string, error) {
	return _ZigZagZog.Contract.ZigZagZogVersion(&_ZigZagZog.CallOpts)
}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogCallerSession) ZigZagZogVersion() (string, error) {
	return _ZigZagZog.Contract.ZigZagZogVersion(&_ZigZagZog.CallOpts)
}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogCaller) ChoicesHash(opts *bind.CallOpts, nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "choicesHash", nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogSession) ChoicesHash(nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	return _ZigZagZog.Contract.ChoicesHash(&_ZigZagZog.CallOpts, nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)
}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogCallerSession) ChoicesHash(nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	return _ZigZagZog.Contract.ChoicesHash(&_ZigZagZog.CallOpts, nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)
}

// CirclePlayerCount is a free data retrieval call binding the contract method 0xa956f6cb.
//
// Solidity: function circlePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) CirclePlayerCount(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "circlePlayerCount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CirclePlayerCount is a free data retrieval call binding the contract method 0xa956f6cb.
//
// Solidity: function circlePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) CirclePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CirclePlayerCount is a free data retrieval call binding the contract method 0xa956f6cb.
//
// Solidity: function circlePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) CirclePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CirclesRevealed is a free data retrieval call binding the contract method 0x31bc98f8.
//
// Solidity: function circlesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) CirclesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "circlesRevealed", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CirclesRevealed is a free data retrieval call binding the contract method 0x31bc98f8.
//
// Solidity: function circlesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) CirclesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CirclesRevealed is a free data retrieval call binding the contract method 0x31bc98f8.
//
// Solidity: function circlesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) CirclesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.CirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCaller) CommitDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "commitDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogSession) CommitDuration() (uint64, error) {
	return _ZigZagZog.Contract.CommitDuration(&_ZigZagZog.CallOpts)
}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCallerSession) CommitDuration() (uint64, error) {
	return _ZigZagZog.Contract.CommitDuration(&_ZigZagZog.CallOpts)
}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) CurrentGameNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "currentGameNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) CurrentGameNumber() (*big.Int, error) {
	return _ZigZagZog.Contract.CurrentGameNumber(&_ZigZagZog.CallOpts)
}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) CurrentGameNumber() (*big.Int, error) {
	return _ZigZagZog.Contract.CurrentGameNumber(&_ZigZagZog.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ZigZagZog.Contract.Eip712Domain(&_ZigZagZog.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ZigZagZog.Contract.Eip712Domain(&_ZigZagZog.CallOpts)
}

// GameBalance is a free data retrieval call binding the contract method 0x19be5ad0.
//
// Solidity: function gameBalance(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GameBalance(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "gameBalance", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GameBalance is a free data retrieval call binding the contract method 0x19be5ad0.
//
// Solidity: function gameBalance(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GameBalance(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GameBalance(&_ZigZagZog.CallOpts, arg0)
}

// GameBalance is a free data retrieval call binding the contract method 0x19be5ad0.
//
// Solidity: function gameBalance(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GameBalance(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GameBalance(&_ZigZagZog.CallOpts, arg0)
}

// GetRoundOutcome is a free data retrieval call binding the contract method 0x19ceb612.
//
// Solidity: function getRoundOutcome(uint256 gameNumber, uint256 roundNumber) view returns(uint8)
func (_ZigZagZog *ZigZagZogCaller) GetRoundOutcome(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int) (uint8, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getRoundOutcome", gameNumber, roundNumber)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetRoundOutcome is a free data retrieval call binding the contract method 0x19ceb612.
//
// Solidity: function getRoundOutcome(uint256 gameNumber, uint256 roundNumber) view returns(uint8)
func (_ZigZagZog *ZigZagZogSession) GetRoundOutcome(gameNumber *big.Int, roundNumber *big.Int) (uint8, error) {
	return _ZigZagZog.Contract.GetRoundOutcome(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// GetRoundOutcome is a free data retrieval call binding the contract method 0x19ceb612.
//
// Solidity: function getRoundOutcome(uint256 gameNumber, uint256 roundNumber) view returns(uint8)
func (_ZigZagZog *ZigZagZogCallerSession) GetRoundOutcome(gameNumber *big.Int, roundNumber *big.Int) (uint8, error) {
	return _ZigZagZog.Contract.GetRoundOutcome(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// HasGameEnded is a free data retrieval call binding the contract method 0xecf16d4d.
//
// Solidity: function hasGameEnded(uint256 gameNumber) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) HasGameEnded(opts *bind.CallOpts, gameNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "hasGameEnded", gameNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasGameEnded is a free data retrieval call binding the contract method 0xecf16d4d.
//
// Solidity: function hasGameEnded(uint256 gameNumber) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) HasGameEnded(gameNumber *big.Int) (bool, error) {
	return _ZigZagZog.Contract.HasGameEnded(&_ZigZagZog.CallOpts, gameNumber)
}

// HasGameEnded is a free data retrieval call binding the contract method 0xecf16d4d.
//
// Solidity: function hasGameEnded(uint256 gameNumber) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) HasGameEnded(gameNumber *big.Int) (bool, error) {
	return _ZigZagZog.Contract.HasGameEnded(&_ZigZagZog.CallOpts, gameNumber)
}

// LastCircleRevealed is a free data retrieval call binding the contract method 0x1beb8902.
//
// Solidity: function lastCircleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCaller) LastCircleRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "lastCircleRevealed", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LastCircleRevealed is a free data retrieval call binding the contract method 0x1beb8902.
//
// Solidity: function lastCircleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogSession) LastCircleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastCircleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastCircleRevealed is a free data retrieval call binding the contract method 0x1beb8902.
//
// Solidity: function lastCircleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCallerSession) LastCircleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastCircleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastSquareRevealed is a free data retrieval call binding the contract method 0xa773f43a.
//
// Solidity: function lastSquareRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCaller) LastSquareRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "lastSquareRevealed", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LastSquareRevealed is a free data retrieval call binding the contract method 0xa773f43a.
//
// Solidity: function lastSquareRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogSession) LastSquareRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastSquareRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastSquareRevealed is a free data retrieval call binding the contract method 0xa773f43a.
//
// Solidity: function lastSquareRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCallerSession) LastSquareRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastSquareRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastTriangleRevealed is a free data retrieval call binding the contract method 0x1d310c2e.
//
// Solidity: function lastTriangleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCaller) LastTriangleRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "lastTriangleRevealed", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LastTriangleRevealed is a free data retrieval call binding the contract method 0x1d310c2e.
//
// Solidity: function lastTriangleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogSession) LastTriangleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastTriangleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// LastTriangleRevealed is a free data retrieval call binding the contract method 0x1d310c2e.
//
// Solidity: function lastTriangleRevealed(uint256 , uint256 ) view returns(address)
func (_ZigZagZog *ZigZagZogCallerSession) LastTriangleRevealed(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ZigZagZog.Contract.LastTriangleRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayCost(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playCost")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayCost() (*big.Int, error) {
	return _ZigZagZog.Contract.PlayCost(&_ZigZagZog.CallOpts)
}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayCost() (*big.Int, error) {
	return _ZigZagZog.Contract.PlayCost(&_ZigZagZog.CallOpts)
}

// PlayerCashedOut is a free data retrieval call binding the contract method 0x1455249e.
//
// Solidity: function playerCashedOut(uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) PlayerCashedOut(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerCashedOut", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PlayerCashedOut is a free data retrieval call binding the contract method 0x1455249e.
//
// Solidity: function playerCashedOut(uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) PlayerCashedOut(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerCashedOut(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerCashedOut is a free data retrieval call binding the contract method 0x1455249e.
//
// Solidity: function playerCashedOut(uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerCashedOut(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerCashedOut(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerCirclesRevealed is a free data retrieval call binding the contract method 0x17774a36.
//
// Solidity: function playerCirclesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerCirclesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerCirclesRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerCirclesRevealed is a free data retrieval call binding the contract method 0x17774a36.
//
// Solidity: function playerCirclesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerCirclesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerCirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerCirclesRevealed is a free data retrieval call binding the contract method 0x17774a36.
//
// Solidity: function playerCirclesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerCirclesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerCirclesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerCommitment is a free data retrieval call binding the contract method 0x0ed348ae.
//
// Solidity: function playerCommitment(uint256 , uint256 , address ) view returns(bytes)
func (_ZigZagZog *ZigZagZogCaller) PlayerCommitment(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) ([]byte, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerCommitment", arg0, arg1, arg2)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// PlayerCommitment is a free data retrieval call binding the contract method 0x0ed348ae.
//
// Solidity: function playerCommitment(uint256 , uint256 , address ) view returns(bytes)
func (_ZigZagZog *ZigZagZogSession) PlayerCommitment(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) ([]byte, error) {
	return _ZigZagZog.Contract.PlayerCommitment(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerCommitment is a free data retrieval call binding the contract method 0x0ed348ae.
//
// Solidity: function playerCommitment(uint256 , uint256 , address ) view returns(bytes)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerCommitment(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) ([]byte, error) {
	return _ZigZagZog.Contract.PlayerCommitment(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasCommitted is a free data retrieval call binding the contract method 0x0ff10432.
//
// Solidity: function playerHasCommitted(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) PlayerHasCommitted(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerHasCommitted", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PlayerHasCommitted is a free data retrieval call binding the contract method 0x0ff10432.
//
// Solidity: function playerHasCommitted(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) PlayerHasCommitted(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasCommitted(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasCommitted is a free data retrieval call binding the contract method 0x0ff10432.
//
// Solidity: function playerHasCommitted(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerHasCommitted(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasCommitted(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasRevealed is a free data retrieval call binding the contract method 0xc24795d9.
//
// Solidity: function playerHasRevealed(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) PlayerHasRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerHasRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PlayerHasRevealed is a free data retrieval call binding the contract method 0xc24795d9.
//
// Solidity: function playerHasRevealed(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) PlayerHasRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerHasRevealed is a free data retrieval call binding the contract method 0xc24795d9.
//
// Solidity: function playerHasRevealed(uint256 , uint256 , address ) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerHasRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _ZigZagZog.Contract.PlayerHasRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerSquaresRevealed is a free data retrieval call binding the contract method 0xe78e4564.
//
// Solidity: function playerSquaresRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerSquaresRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerSquaresRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerSquaresRevealed is a free data retrieval call binding the contract method 0xe78e4564.
//
// Solidity: function playerSquaresRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerSquaresRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSquaresRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerSquaresRevealed is a free data retrieval call binding the contract method 0xe78e4564.
//
// Solidity: function playerSquaresRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerSquaresRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSquaresRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerSurvivingPlays is a free data retrieval call binding the contract method 0xddf39483.
//
// Solidity: function playerSurvivingPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerSurvivingPlays(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerSurvivingPlays", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerSurvivingPlays is a free data retrieval call binding the contract method 0xddf39483.
//
// Solidity: function playerSurvivingPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerSurvivingPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSurvivingPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerSurvivingPlays is a free data retrieval call binding the contract method 0xddf39483.
//
// Solidity: function playerSurvivingPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerSurvivingPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerSurvivingPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PlayerTrianglesRevealed is a free data retrieval call binding the contract method 0xa08306d1.
//
// Solidity: function playerTrianglesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayerTrianglesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playerTrianglesRevealed", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayerTrianglesRevealed is a free data retrieval call binding the contract method 0xa08306d1.
//
// Solidity: function playerTrianglesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayerTrianglesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerTrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PlayerTrianglesRevealed is a free data retrieval call binding the contract method 0xa08306d1.
//
// Solidity: function playerTrianglesRevealed(uint256 , uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayerTrianglesRevealed(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PlayerTrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1, arg2)
}

// PurchasedPlays is a free data retrieval call binding the contract method 0x0d109da0.
//
// Solidity: function purchasedPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PurchasedPlays(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "purchasedPlays", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PurchasedPlays is a free data retrieval call binding the contract method 0x0d109da0.
//
// Solidity: function purchasedPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PurchasedPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PurchasedPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// PurchasedPlays is a free data retrieval call binding the contract method 0x0d109da0.
//
// Solidity: function purchasedPlays(uint256 , address ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PurchasedPlays(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.PurchasedPlays(&_ZigZagZog.CallOpts, arg0, arg1)
}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCaller) RevealDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "revealDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogSession) RevealDuration() (uint64, error) {
	return _ZigZagZog.Contract.RevealDuration(&_ZigZagZog.CallOpts)
}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCallerSession) RevealDuration() (uint64, error) {
	return _ZigZagZog.Contract.RevealDuration(&_ZigZagZog.CallOpts)
}

// SquarePlayerCount is a free data retrieval call binding the contract method 0xad026700.
//
// Solidity: function squarePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) SquarePlayerCount(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "squarePlayerCount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SquarePlayerCount is a free data retrieval call binding the contract method 0xad026700.
//
// Solidity: function squarePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) SquarePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquarePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SquarePlayerCount is a free data retrieval call binding the contract method 0xad026700.
//
// Solidity: function squarePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) SquarePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquarePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SquaredRevealed is a free data retrieval call binding the contract method 0x77b0f89d.
//
// Solidity: function squaredRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) SquaredRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "squaredRevealed", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SquaredRevealed is a free data retrieval call binding the contract method 0x77b0f89d.
//
// Solidity: function squaredRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) SquaredRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquaredRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SquaredRevealed is a free data retrieval call binding the contract method 0x77b0f89d.
//
// Solidity: function squaredRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) SquaredRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SquaredRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// SurvivingPlays is a free data retrieval call binding the contract method 0x91518686.
//
// Solidity: function survivingPlays(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) SurvivingPlays(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "survivingPlays", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SurvivingPlays is a free data retrieval call binding the contract method 0x91518686.
//
// Solidity: function survivingPlays(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) SurvivingPlays(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SurvivingPlays(&_ZigZagZog.CallOpts, arg0)
}

// SurvivingPlays is a free data retrieval call binding the contract method 0x91518686.
//
// Solidity: function survivingPlays(uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) SurvivingPlays(arg0 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.SurvivingPlays(&_ZigZagZog.CallOpts, arg0)
}

// TrianglePlayerCount is a free data retrieval call binding the contract method 0xa091e3e3.
//
// Solidity: function trianglePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) TrianglePlayerCount(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "trianglePlayerCount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrianglePlayerCount is a free data retrieval call binding the contract method 0xa091e3e3.
//
// Solidity: function trianglePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) TrianglePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// TrianglePlayerCount is a free data retrieval call binding the contract method 0xa091e3e3.
//
// Solidity: function trianglePlayerCount(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) TrianglePlayerCount(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglePlayerCount(&_ZigZagZog.CallOpts, arg0, arg1)
}

// TrianglesRevealed is a free data retrieval call binding the contract method 0xde1f0f09.
//
// Solidity: function trianglesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) TrianglesRevealed(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "trianglesRevealed", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrianglesRevealed is a free data retrieval call binding the contract method 0xde1f0f09.
//
// Solidity: function trianglesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) TrianglesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// TrianglesRevealed is a free data retrieval call binding the contract method 0xde1f0f09.
//
// Solidity: function trianglesRevealed(uint256 , uint256 ) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) TrianglesRevealed(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.TrianglesRevealed(&_ZigZagZog.CallOpts, arg0, arg1)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x71db08c0.
//
// Solidity: function buyPlays(uint256 gameNumber) payable returns()
func (_ZigZagZog *ZigZagZogTransactor) BuyPlays(opts *bind.TransactOpts, gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "buyPlays", gameNumber)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x71db08c0.
//
// Solidity: function buyPlays(uint256 gameNumber) payable returns()
func (_ZigZagZog *ZigZagZogSession) BuyPlays(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.BuyPlays(&_ZigZagZog.TransactOpts, gameNumber)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x71db08c0.
//
// Solidity: function buyPlays(uint256 gameNumber) payable returns()
func (_ZigZagZog *ZigZagZogTransactorSession) BuyPlays(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.BuyPlays(&_ZigZagZog.TransactOpts, gameNumber)
}

// ClaimWinnings is a paid mutator transaction binding the contract method 0x677bd9ff.
//
// Solidity: function claimWinnings(uint256 gameNumber) returns()
func (_ZigZagZog *ZigZagZogTransactor) ClaimWinnings(opts *bind.TransactOpts, gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "claimWinnings", gameNumber)
}

// ClaimWinnings is a paid mutator transaction binding the contract method 0x677bd9ff.
//
// Solidity: function claimWinnings(uint256 gameNumber) returns()
func (_ZigZagZog *ZigZagZogSession) ClaimWinnings(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ClaimWinnings(&_ZigZagZog.TransactOpts, gameNumber)
}

// ClaimWinnings is a paid mutator transaction binding the contract method 0x677bd9ff.
//
// Solidity: function claimWinnings(uint256 gameNumber) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) ClaimWinnings(gameNumber *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ClaimWinnings(&_ZigZagZog.TransactOpts, gameNumber)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogTransactor) CommitChoices(opts *bind.TransactOpts, gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "commitChoices", gameNumber, roundNumber, signature)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogSession) CommitChoices(gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.Contract.CommitChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, signature)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) CommitChoices(gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.Contract.CommitChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, signature)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogTransactor) RevealChoices(opts *bind.TransactOpts, gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "revealChoices", gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogSession) RevealChoices(gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.RevealChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) RevealChoices(gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.RevealChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// ZigZagZogEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the ZigZagZog contract.
type ZigZagZogEIP712DomainChangedIterator struct {
	Event *ZigZagZogEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogEIP712DomainChanged represents a EIP712DomainChanged event raised by the ZigZagZog contract.
type ZigZagZogEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ZigZagZogEIP712DomainChangedIterator, error) {

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ZigZagZogEIP712DomainChangedIterator{contract: _ZigZagZog.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ZigZagZogEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogEIP712DomainChanged)
				if err := _ZigZagZog.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) ParseEIP712DomainChanged(log types.Log) (*ZigZagZogEIP712DomainChanged, error) {
	event := new(ZigZagZogEIP712DomainChanged)
	if err := _ZigZagZog.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZigZagZogPlayerCommitmentIterator is returned from FilterPlayerCommitment and is used to iterate over the raw logs and unpacked data for PlayerCommitment events raised by the ZigZagZog contract.
type ZigZagZogPlayerCommitmentIterator struct {
	Event *ZigZagZogPlayerCommitment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogPlayerCommitmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogPlayerCommitment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogPlayerCommitment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogPlayerCommitmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogPlayerCommitmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogPlayerCommitment represents a PlayerCommitment event raised by the ZigZagZog contract.
type ZigZagZogPlayerCommitment struct {
	PlayerAddress common.Address
	GameNumber    *big.Int
	RoundNumber   *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPlayerCommitment is a free log retrieval operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) FilterPlayerCommitment(opts *bind.FilterOpts, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (*ZigZagZogPlayerCommitmentIterator, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "PlayerCommitment", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogPlayerCommitmentIterator{contract: _ZigZagZog.contract, event: "PlayerCommitment", logs: logs, sub: sub}, nil
}

// WatchPlayerCommitment is a free log subscription operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) WatchPlayerCommitment(opts *bind.WatchOpts, sink chan<- *ZigZagZogPlayerCommitment, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (event.Subscription, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "PlayerCommitment", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogPlayerCommitment)
				if err := _ZigZagZog.contract.UnpackLog(event, "PlayerCommitment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlayerCommitment is a log parse operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) ParsePlayerCommitment(log types.Log) (*ZigZagZogPlayerCommitment, error) {
	event := new(ZigZagZogPlayerCommitment)
	if err := _ZigZagZog.contract.UnpackLog(event, "PlayerCommitment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateZigZagZogDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int
	var calldata bool

	var playCost *big.Int
	var playCostRaw string
	var commitDuration uint64

	var revealDuration uint64

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {

			if !calldata {
				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if playCostRaw == "" {
				return fmt.Errorf("--play-cost argument not specified")
			}
			playCost = new(big.Int)
			playCost.SetString(playCostRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			// Generate deploy bytecode with constructor arguments
			deployCalldata, err := generateZigZagZogDeployBytecode(
				playCost,
				commitDuration,
				revealDuration,
			)
			if err != nil {
				return fmt.Errorf("failed to generate deploy bytecode: %v", err)
			}

			if calldata {
				deployCalldataHex := hex.EncodeToString(deployCalldata)
				cmd.Println(deployCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployCalldata)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployCalldata, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployZigZagZog(
				transactionOpts,
				client,
				playCost,
				commitDuration,
				revealDuration,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&playCostRaw, "play-cost", "", "play-cost argument")
	cmd.Flags().Uint64Var(&commitDuration, "commit-duration", 0, "commit-duration argument")
	cmd.Flags().Uint64Var(&revealDuration, "reveal-duration", 0, "reveal-duration argument")

	return cmd
}

func generateZigZagZogDeployBytecode(
	playCost *big.Int,
	commitDuration uint64,
	revealDuration uint64,
) ([]byte, error) {
	abiPacked, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("",
		playCost,
		commitDuration,
		revealDuration,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(ZigZagZogMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateChoicesHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var nonce0 *big.Int
	var nonce0Raw string
	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var numCircles *big.Int
	var numCirclesRaw string
	var numSquares *big.Int
	var numSquaresRaw string
	var numTriangles *big.Int
	var numTrianglesRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "choices-hash",
		Short: "Call the ChoicesHash view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if nonce0Raw == "" {
				return fmt.Errorf("--nonce-0 argument not specified")
			}
			nonce0 = new(big.Int)
			nonce0.SetString(nonce0Raw, 0)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if numCirclesRaw == "" {
				return fmt.Errorf("--num-circles argument not specified")
			}
			numCircles = new(big.Int)
			numCircles.SetString(numCirclesRaw, 0)

			if numSquaresRaw == "" {
				return fmt.Errorf("--num-squares argument not specified")
			}
			numSquares = new(big.Int)
			numSquares.SetString(numSquaresRaw, 0)

			if numTrianglesRaw == "" {
				return fmt.Errorf("--num-triangles argument not specified")
			}
			numTriangles = new(big.Int)
			numTriangles.SetString(numTrianglesRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ChoicesHash(
				nonce0,
				gameNumber,
				roundNumber,
				numCircles,
				numSquares,
				numTriangles,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&nonce0Raw, "nonce-0", "", "nonce-0 argument")
	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&numCirclesRaw, "num-circles", "", "num-circles argument")
	cmd.Flags().StringVar(&numSquaresRaw, "num-squares", "", "num-squares argument")
	cmd.Flags().StringVar(&numTrianglesRaw, "num-triangles", "", "num-triangles argument")

	return cmd
}
func CreateCirclePlayerCountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "circle-player-count",
		Short: "Call the CirclePlayerCount view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CirclePlayerCount(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateCirclesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "circles-revealed",
		Short: "Call the CirclesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CirclesRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateCommitDurationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 uint64

	cmd := &cobra.Command{
		Use:   "commit-duration",
		Short: "Call the CommitDuration view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CommitDuration()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateCurrentGameNumberCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "current-game-number",
		Short: "Call the CurrentGameNumber view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CurrentGameNumber()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateEip712DomainCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	}

	cmd := &cobra.Command{
		Use:   "eip-712-domain",
		Short: "Call the Eip712Domain view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Eip712Domain()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGameBalanceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "game-balance",
		Short: "Call the GameBalance view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GameBalance(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateGameStateCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 struct {
		GameTimestamp  *big.Int
		RoundNumber    *big.Int
		RoundTimestamp *big.Int
	}

	cmd := &cobra.Command{
		Use:   "game-state",
		Short: "Call the GameState view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GameState(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateGetRoundOutcomeCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string

	var capture0 uint8

	cmd := &cobra.Command{
		Use:   "get-round-outcome",
		Short: "Call the GetRoundOutcome view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetRoundOutcome(
				gameNumber,
				roundNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")

	return cmd
}
func CreateHasGameEndedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "has-game-ended",
		Short: "Call the HasGameEnded view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.HasGameEnded(
				gameNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")

	return cmd
}
func CreateLastCircleRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "last-circle-revealed",
		Short: "Call the LastCircleRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastCircleRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateLastSquareRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "last-square-revealed",
		Short: "Call the LastSquareRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastSquareRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateLastTriangleRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "last-triangle-revealed",
		Short: "Call the LastTriangleRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastTriangleRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreatePlayCostCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "play-cost",
		Short: "Call the PlayCost view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayCost()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreatePlayerCashedOutCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "player-cashed-out",
		Short: "Call the PlayerCashedOut view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerCashedOut(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")

	return cmd
}
func CreatePlayerCirclesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-circles-revealed",
		Short: "Call the PlayerCirclesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerCirclesRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerCommitmentCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "player-commitment",
		Short: "Call the PlayerCommitment view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerCommitment(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerHasCommittedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "player-has-committed",
		Short: "Call the PlayerHasCommitted view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerHasCommitted(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerHasRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "player-has-revealed",
		Short: "Call the PlayerHasRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerHasRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerSquaresRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-squares-revealed",
		Short: "Call the PlayerSquaresRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerSquaresRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePlayerSurvivingPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-surviving-plays",
		Short: "Call the PlayerSurvivingPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerSurvivingPlays(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")

	return cmd
}
func CreatePlayerTrianglesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string
	var arg2 common.Address
	var arg2Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "player-triangles-revealed",
		Short: "Call the PlayerTrianglesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			if arg2Raw == "" {
				return fmt.Errorf("--arg-2 argument not specified")
			} else if !common.IsHexAddress(arg2Raw) {
				return fmt.Errorf("--arg-2 argument is not a valid Ethereum address")
			}
			arg2 = common.HexToAddress(arg2Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayerTrianglesRevealed(
				arg0,
				arg1,
				arg2,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")
	cmd.Flags().StringVar(&arg2Raw, "arg-2", "", "arg-2 argument (common.Address)")

	return cmd
}
func CreatePurchasedPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 common.Address
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "purchased-plays",
		Short: "Call the PurchasedPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			} else if !common.IsHexAddress(arg1Raw) {
				return fmt.Errorf("--arg-1 argument is not a valid Ethereum address")
			}
			arg1 = common.HexToAddress(arg1Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PurchasedPlays(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument (common.Address)")

	return cmd
}
func CreateRevealDurationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 uint64

	cmd := &cobra.Command{
		Use:   "reveal-duration",
		Short: "Call the RevealDuration view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.RevealDuration()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateSquarePlayerCountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "square-player-count",
		Short: "Call the SquarePlayerCount view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SquarePlayerCount(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateSquaredRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "squared-revealed",
		Short: "Call the SquaredRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SquaredRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateSurvivingPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "surviving-plays",
		Short: "Call the SurvivingPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.SurvivingPlays(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateTrianglePlayerCountCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "triangle-player-count",
		Short: "Call the TrianglePlayerCount view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TrianglePlayerCount(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateTrianglesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "triangles-revealed",
		Short: "Call the TrianglesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TrianglesRevealed(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateZigZagZogVersionCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "zig-zag-zog-version",
		Short: "Call the ZigZagZogVersion view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ZigZagZogVersion()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateBuyPlaysCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string

	cmd := &cobra.Command{
		Use:   "buy-plays",
		Short: "Execute the BuyPlays method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "buyPlays"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.BuyPlays(

				gameNumber,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")

	return cmd
}
func CreateClaimWinningsCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string

	cmd := &cobra.Command{
		Use:   "claim-winnings",
		Short: "Execute the ClaimWinnings method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "claimWinnings"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.ClaimWinnings(

				gameNumber,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")

	return cmd
}
func CreateCommitChoicesCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var signature []byte
	var signatureRaw string

	cmd := &cobra.Command{
		Use:   "commit-choices",
		Short: "Execute the CommitChoices method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			var signatureIntermediate []byte

			var signatureIntermediateHexDecodeErr error
			signatureIntermediate, signatureIntermediateHexDecodeErr = hex.DecodeString(signatureRaw)
			if signatureIntermediateHexDecodeErr != nil {
				return signatureIntermediateHexDecodeErr
			}

			signature = make([]byte, len(signatureIntermediate))

			copy(signature[:], signatureIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "commitChoices"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
				roundNumber,
				signature,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.CommitChoices(

				gameNumber,
				roundNumber,
				signature,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&signatureRaw, "signature", "", "signature argument ([]byte)")

	return cmd
}
func CreateRevealChoicesCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool
	var staticCall bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var nonce0 *big.Int
	var nonce0Raw string
	var numCircles *big.Int
	var numCirclesRaw string
	var numSquares *big.Int
	var numSquaresRaw string
	var numTriangles *big.Int
	var numTrianglesRaw string

	cmd := &cobra.Command{
		Use:   "reveal-choices",
		Short: "Execute the RevealChoices method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if nonce0Raw == "" {
				return fmt.Errorf("--nonce-0 argument not specified")
			}
			nonce0 = new(big.Int)
			nonce0.SetString(nonce0Raw, 0)

			if numCirclesRaw == "" {
				return fmt.Errorf("--num-circles argument not specified")
			}
			numCircles = new(big.Int)
			numCircles.SetString(numCirclesRaw, 0)

			if numSquaresRaw == "" {
				return fmt.Errorf("--num-squares argument not specified")
			}
			numSquares = new(big.Int)
			numSquares.SetString(numSquaresRaw, 0)

			if numTrianglesRaw == "" {
				return fmt.Errorf("--num-triangles argument not specified")
			}
			numTriangles = new(big.Int)
			numTriangles.SetString(numTrianglesRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "revealChoices"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
				roundNumber,
				nonce0,
				numCircles,
				numSquares,
				numTriangles,
			)

			if err != nil {
				return err
			}

			if staticCall {
				client, clientErr := NewClient(rpc)
				if clientErr != nil {
					return clientErr
				}

				// Create the call message
				msg := ethereum.CallMsg{
					To:   &contractAddress,
					Data: txCalldata,
				}

				// Create context with timeout
				ctx, cancel := NewChainContext(timeout)
				defer cancel()

				// Perform static call
				output, err := client.CallContract(ctx, msg, nil)
				if err != nil {
					return fmt.Errorf("static call failed: %v", err)
				}

				// Unpack the result
				result, err := abi.Unpack(methodName, output)
				if err != nil {
					return fmt.Errorf("failed to unpack result: %v", err)
				}

				if len(result) > 0 {
					// Get method outputs from ABI to access parameter names
					method, exists := abi.Methods[methodName]
					if !exists {
						return fmt.Errorf("method %s not found in ABI", methodName)
					}

					// Print each return value
					for i, val := range result {
						// Get parameter name if available
						paramName := fmt.Sprintf("output%d", i)
						if i < len(method.Outputs) {
							if method.Outputs[i].Name != "" {
								paramName = method.Outputs[i].Name
							}
						}
						switch v := val.(type) {
						case bool:
							cmd.Printf("%s: %t\n", paramName, v)
						case string:
							cmd.Printf("%s: %s\n", paramName, v)
						case *big.Int:
							cmd.Printf("%s: %s\n", paramName, v.String())
						case common.Address:
							cmd.Printf("%s: %s\n", paramName, v.Hex())
						default:
							rv := reflect.ValueOf(v)
							if rv.Kind() == reflect.Struct {
								PrintStruct(cmd, paramName, rv, 0)
							} else {
								cmd.Printf("%s: %v\n", paramName, v)
							}
						}
					}
				} else {
					return fmt.Errorf("no result returned from static call")
				}

				return nil
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.RevealChoices(

				gameNumber,
				roundNumber,
				nonce0,
				numCircles,
				numSquares,
				numTriangles,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")
	cmd.Flags().BoolVar(&staticCall, "static-call", false, "Set this flag if want to call the method without sending a transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&nonce0Raw, "nonce-0", "", "nonce-0 argument")
	cmd.Flags().StringVar(&numCirclesRaw, "num-circles", "", "num-circles argument")
	cmd.Flags().StringVar(&numSquaresRaw, "num-squares", "", "num-squares argument")
	cmd.Flags().StringVar(&numTrianglesRaw, "num-triangles", "", "num-triangles argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the ZIG_ZAG_ZOG_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the ZIG_ZAG_ZOG_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("ZIG_ZAG_ZOG_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateZigZagZogCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "zig-zag-zog",
		Short: "Interact with the ZigZagZog contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployZigZagZog := CreateZigZagZogDeploymentCommand()
	cmdDeployZigZagZog.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployZigZagZog)

	cmdViewChoicesHash := CreateChoicesHashCommand()
	cmdViewChoicesHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewChoicesHash)
	cmdViewCirclePlayerCount := CreateCirclePlayerCountCommand()
	cmdViewCirclePlayerCount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCirclePlayerCount)
	cmdViewCirclesRevealed := CreateCirclesRevealedCommand()
	cmdViewCirclesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCirclesRevealed)
	cmdViewCommitDuration := CreateCommitDurationCommand()
	cmdViewCommitDuration.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCommitDuration)
	cmdViewCurrentGameNumber := CreateCurrentGameNumberCommand()
	cmdViewCurrentGameNumber.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCurrentGameNumber)
	cmdViewEip712Domain := CreateEip712DomainCommand()
	cmdViewEip712Domain.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEip712Domain)
	cmdViewGameBalance := CreateGameBalanceCommand()
	cmdViewGameBalance.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGameBalance)
	cmdViewGameState := CreateGameStateCommand()
	cmdViewGameState.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGameState)
	cmdViewGetRoundOutcome := CreateGetRoundOutcomeCommand()
	cmdViewGetRoundOutcome.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetRoundOutcome)
	cmdViewHasGameEnded := CreateHasGameEndedCommand()
	cmdViewHasGameEnded.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewHasGameEnded)
	cmdViewLastCircleRevealed := CreateLastCircleRevealedCommand()
	cmdViewLastCircleRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastCircleRevealed)
	cmdViewLastSquareRevealed := CreateLastSquareRevealedCommand()
	cmdViewLastSquareRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastSquareRevealed)
	cmdViewLastTriangleRevealed := CreateLastTriangleRevealedCommand()
	cmdViewLastTriangleRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastTriangleRevealed)
	cmdViewPlayCost := CreatePlayCostCommand()
	cmdViewPlayCost.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayCost)
	cmdViewPlayerCashedOut := CreatePlayerCashedOutCommand()
	cmdViewPlayerCashedOut.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerCashedOut)
	cmdViewPlayerCirclesRevealed := CreatePlayerCirclesRevealedCommand()
	cmdViewPlayerCirclesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerCirclesRevealed)
	cmdViewPlayerCommitment := CreatePlayerCommitmentCommand()
	cmdViewPlayerCommitment.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerCommitment)
	cmdViewPlayerHasCommitted := CreatePlayerHasCommittedCommand()
	cmdViewPlayerHasCommitted.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerHasCommitted)
	cmdViewPlayerHasRevealed := CreatePlayerHasRevealedCommand()
	cmdViewPlayerHasRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerHasRevealed)
	cmdViewPlayerSquaresRevealed := CreatePlayerSquaresRevealedCommand()
	cmdViewPlayerSquaresRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerSquaresRevealed)
	cmdViewPlayerSurvivingPlays := CreatePlayerSurvivingPlaysCommand()
	cmdViewPlayerSurvivingPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerSurvivingPlays)
	cmdViewPlayerTrianglesRevealed := CreatePlayerTrianglesRevealedCommand()
	cmdViewPlayerTrianglesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayerTrianglesRevealed)
	cmdViewPurchasedPlays := CreatePurchasedPlaysCommand()
	cmdViewPurchasedPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPurchasedPlays)
	cmdViewRevealDuration := CreateRevealDurationCommand()
	cmdViewRevealDuration.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewRevealDuration)
	cmdViewSquarePlayerCount := CreateSquarePlayerCountCommand()
	cmdViewSquarePlayerCount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSquarePlayerCount)
	cmdViewSquaredRevealed := CreateSquaredRevealedCommand()
	cmdViewSquaredRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSquaredRevealed)
	cmdViewSurvivingPlays := CreateSurvivingPlaysCommand()
	cmdViewSurvivingPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSurvivingPlays)
	cmdViewTrianglePlayerCount := CreateTrianglePlayerCountCommand()
	cmdViewTrianglePlayerCount.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTrianglePlayerCount)
	cmdViewTrianglesRevealed := CreateTrianglesRevealedCommand()
	cmdViewTrianglesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTrianglesRevealed)
	cmdViewZigZagZogVersion := CreateZigZagZogVersionCommand()
	cmdViewZigZagZogVersion.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewZigZagZogVersion)

	cmdTransactBuyPlays := CreateBuyPlaysCommand()
	cmdTransactBuyPlays.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBuyPlays)
	cmdTransactClaimWinnings := CreateClaimWinningsCommand()
	cmdTransactClaimWinnings.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaimWinnings)
	cmdTransactCommitChoices := CreateCommitChoicesCommand()
	cmdTransactCommitChoices.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCommitChoices)
	cmdTransactRevealChoices := CreateRevealChoicesCommand()
	cmdTransactRevealChoices.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRevealChoices)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}

func PrintStruct(cmd *cobra.Command, name string, rv reflect.Value, depth int) {
	indent := strings.Repeat("  ", depth)
	cmd.Printf("%s%s:\n", indent, name)

	rt := rv.Type()
	for i := 0; i < rv.NumField(); i++ {
		field := rv.Field(i)
		fieldName := rt.Field(i).Name

		switch f := field.Interface().(type) {
		case common.Address:
			cmd.Printf("%s  %s: %s\n", indent, fieldName, f.Hex())
		case *big.Int:
			cmd.Printf("%s  %s: %s\n", indent, fieldName, f.String())
		default:
			// Check if field is a nested struct
			if field.Kind() == reflect.Struct {
				PrintStruct(cmd, fieldName, field, depth+1)
			} else {
				cmd.Printf("%s  %s: %v\n", indent, fieldName, f)
			}
		}
	}
}
