// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.15
// seer command: seer evm generate --package zigzagzog --cli --foundry out/ZigZagZog.sol/ZigZagZog.json --struct ZigZagZog --output bindings/zigzagzog/ZigZagZog.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package zigzagzog

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// ZigZagZogMetaData contains all meta data concerning the ZigZagZog contract.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var ZigZagZogMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_playCost\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_commitDuration\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"_revealDuration\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"GameState\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gameTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gameBalance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"survivingPlays\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ZigZagZogVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"buyPlays\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"choicesHash\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numCircles\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numSquares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numTriangles\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"commitChoices\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"currentGameNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCirclesRevealed\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getGameBalance\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPlayerCirclesRevealed\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPlayerCommittment\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPlayerHasCommitted\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPlayerHasRevealed\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPlayerSquaresRevealed\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPlayerSurvivingPlays\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPlayerTrianglesRevealed\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPurchasedPlays\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSquaresRevealed\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTrianglesRevealed\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"playCost\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"revealChoices\",\"inputs\":[{\"name\":\"gameNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numCircles\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numSquares\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"numTriangles\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revealDuration\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PlayerCommitment\",\"inputs\":[{\"name\":\"playerAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"gameNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"roundNumber\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "0x610160604052600060045534801561001657600080fd5b5060405161234b38038061234b833981016040819052610035916101f4565b60408051808201825260098152685a69675a61675a6f6760b81b602080830191909152825180840190935260058352640302e312e360dc1b908301529061007d82600061015e565b6101205261008c81600161015e565b61014052815160208084019190912060e052815190820120610100524660a05261011960e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052600292909255600380546001600160401b0393841668010000000000000000026001600160801b031990911693909216929092171790556103ff565b600060208351101561017a5761017383610191565b905061018b565b8161018584826102cf565b5060ff90505b92915050565b600080829050601f815111156101c5578260405163305a27a960e01b81526004016101bc919061038d565b60405180910390fd5b80516101d0826103db565b179392505050565b80516001600160401b03811681146101ef57600080fd5b919050565b60008060006060848603121561020957600080fd5b83519250610219602085016101d8565b9150610227604085016101d8565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061025a57607f821691505b60208210810361027a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102ca57806000526020600020601f840160051c810160208510156102a75750805b601f840160051c820191505b818110156102c757600081556001016102b3565b50505b505050565b81516001600160401b038111156102e8576102e8610230565b6102fc816102f68454610246565b84610280565b6020601f82116001811461033057600083156103185750848201515b600019600385901b1c1916600184901b1784556102c7565b600084815260208120601f198516915b828110156103605787850151825560209485019460019092019101610340565b508482101561037e5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b602081526000825180602084015260005b818110156103bb576020818601810151604086840101520161039e565b506000604082850101526040601f19601f83011684010191505092915050565b8051602080830151919081101561027a5760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611ef2610459600039600061147601526000611444015260006117d5015260006117ad01526000611708015260006117320152600061175c0152611ef26000f3fe6080604052600436106101405760003560e01c80638ffa3623116100b6578063d0b8d7b21161006f578063d0b8d7b214610489578063d1ae4e75146104da578063d3f24af514610557578063e2d23ba21461059e578063f1ed7aef146105e5578063fb22198b1461060557600080fd5b80638ffa36231461038b57806394091219146103ab5780639dad1da5146103e7578063a4516fad14610417578063c96ac3411461042d578063ca342aed1461044d57600080fd5b806363a483a81161010857806363a483a8146102b75780636f833811146102d9578063761e781e14610313578063846d2c291461033357806384b0196e1461033b578063886a6de11461036357600080fd5b80632eb1713e14610145578063339d2c711461018c578063357517bd146101ba5780633b0c31281461021b5780634989f3ba14610269575b600080fd5b34801561015157600080fd5b50610176604051806040016040528060058152602001640302e312e360dc1b81525081565b60405161018391906119ac565b60405180910390f35b34801561019857600080fd5b506101ac6101a73660046119db565b61061b565b604051908152602001610183565b3480156101c657600080fd5b5061020b6101d53660046119db565b6000928352600560209081526040808520938552600a90930181528284206001600160a01b039290921684525290205460ff1690565b6040519015158152602001610183565b34801561022757600080fd5b506101ac6102363660046119db565b6000928352600560209081526040808520938552600e90930181528284206001600160a01b039290921684525290205490565b34801561027557600080fd5b506101ac6102843660046119db565b6000928352600560209081526040808520938552600f90930181528284206001600160a01b039290921684525290205490565b3480156102c357600080fd5b506102d76102d2366004611a10565b610651565b005b3480156102e557600080fd5b506003546102fa9067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610183565b34801561031f57600080fd5b506101ac61032e366004611a53565b610aa8565b6102d7610acc565b34801561034757600080fd5b50610350610cdd565b6040516101839796959493929190611a75565b34801561036f57600080fd5b506003546102fa90600160401b900467ffffffffffffffff1681565b34801561039757600080fd5b506101ac6103a6366004611a10565b610d23565b3480156103b757600080fd5b506101ac6103c6366004611a53565b6000918252600560209081526040808420928452600d909201905290205490565b3480156103f357600080fd5b506101ac610402366004611b0d565b60009081526005602052604090206004015490565b34801561042357600080fd5b506101ac60045481565b34801561043957600080fd5b506102d7610448366004611b3c565b610dac565b34801561045957600080fd5b506101ac610468366004611a53565b6000918252600560209081526040808420928452600c909201905290205490565b34801561049557600080fd5b5061020b6104a43660046119db565b6000928352600560209081526040808520938552600890930181528284206001600160a01b039290921684525290205460ff1690565b3480156104e657600080fd5b5061052a6104f5366004611b0d565b600560208190526000918252604090912080546001820154600283015460038401546004850154949095015492949193909286565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610183565b34801561056357600080fd5b506101ac610572366004611c08565b60008281526005602090815260408083206001600160a01b038516845260070190915290205492915050565b3480156105aa57600080fd5b506101ac6105b9366004611c08565b60008281526005602090815260408083206001600160a01b038516845260060190915290205492915050565b3480156105f157600080fd5b506101766106003660046119db565b611306565b34801561061157600080fd5b506101ac60025481565b600083815260056020908152604080832085845260100182528083206001600160a01b03851684529091529020545b9392505050565b6000868152600560209081526040808320888452600a810183528184203385529092529091205460ff16156106e65760405162461bcd60e51b815260206004820152603060248201527f5a69675a61675a6f672e72657665616c43686f696365733a20706c617965722060448201526f185b1c9958591e481c995d99585b195960821b60648201526084015b60405180910390fd5b60038054908201546107029167ffffffffffffffff1690611c4a565b42116107765760405162461bcd60e51b815260206004820152603760248201527f5a69675a61675a6f672e72657665616c43686f696365733a2072657665616c2060448201527f706861736520686173206e6f742079657420626567756e00000000000000000060648201526084016106dd565b600380549082015467ffffffffffffffff600160401b830481169261079d92911690611c4a565b6107a79190611c4a565b42111561080e5760405162461bcd60e51b815260206004820152602f60248201527f5a69675a61675a6f672e72657665616c43686f696365733a2072657665616c2060448201526e1c1a185cd9481a185cc8195b991959608a1b60648201526084016106dd565b600061081e868989888888610d23565b6000888152600984016020908152604080832033808552925290912080549293506108d29284919061084f90611c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90611c5d565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b50505050506113c9565b6109315760405162461bcd60e51b815260206004820152602a60248201527f5a69675a61675a6f672e72657665616c43686f696365733a20696e76616c6964604482015269207369676e617475726560b01b60648201526084016106dd565b3360009081526007830160205260409020548361094e8688611c4a565b6109589190611c4a565b146109c35760405162461bcd60e51b815260206004820152603560248201527f5a69675a61675a6f672e72657665616c43686f696365733a20696e73756666696044820152746369656e742072656d61696e696e6720706c61797360581b60648201526084016106dd565b6000878152600b83016020526040812080548792906109e3908490611c4a565b90915550506000878152600c8301602052604081208054869290610a08908490611c4a565b90915550506000878152600d8301602052604081208054859290610a2d908490611c4a565b9091555050506000868152600e8201602090815260408083203380855290835281842097909755888352600f84018252808320878452825280832095909555878252601083018152848220868352815284822093909355958652600a01815281852092855291909152909120805460ff191660011790555050565b6000828152600560209081526040808320848452600b019091529020545b92915050565b600354600454600090815260056020526040902060010154610af89167ffffffffffffffff1690611c4a565b421180610b055750600454155b15610b545760048054906000610b1a83611c97565b9091555050600480546000908152600560205260408082204260019182018190558454845282842060020191909155925482529020600301555b600060025434610b649190611cb0565b905060008111610bdc5760405162461bcd60e51b815260206004820152603760248201527f5a69675a61675a6f672e627579506c61797328293a20696e737566666963696560448201527f6e742076616c756520746f20627579206120706c61792e00000000000000000060648201526084016106dd565b600454600090815260056020908152604080832033845260060190915281208054839290610c0b908490611c4a565b90915550506004805460009081526005602081815260408084203385526007018252808420869055935483528190529181209091018054839290610c50908490611c4a565b9091555050600254600090610c659083611cd2565b9050806005600060045481526020019081526020016000206004016000828254610c8f9190611c4a565b9091555060009050610ca18234611ce9565b90508015610cd857604051339082156108fc029083906000818181858888f19350505050158015610cd6573d6000803e3d6000fd5b505b505050565b600060608060008060006060610cf161143d565b610cf961146f565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b604080517f0bf13bf07d9cf2111cab3b66057c105b0fa1e62159747b7f78670ba637f3b30f6020820152908101879052606081018690526080810185905260a0810184905260c0810183905260e08101829052600090819061010001604051602081830303815290604052805190602001209050610da08161149c565b98975050505050505050565b60008381526005602052604090206002810154831115610e9757600380549082015467ffffffffffffffff600160401b8304811692610ded92911690611c4a565b610df79190611c4a565b42118015610e1357506002810154610e0f9084611ce9565b6001145b610e795760405162461bcd60e51b815260206004820152603160248201527f5a69675a61675a6f672e636f6d6d697443686f696365733a20726f756e642068604482015270185cdb89dd081cdd185c9d1959081e595d607a1b60648201526084016106dd565b600281018054906000610e8b83611c97565b90915550504260038201555b6003805490820154610eb39167ffffffffffffffff1690611c4a565b421115610f1c5760405162461bcd60e51b815260206004820152603160248201527f5a69675a61675a6f672e636f6d6d697443686f696365733a20636f6d6d6974206044820152701dda5b991bddc81a185cc81c185cdcd959607a1b60648201526084016106dd565b6000838152600882016020908152604080832033845290915290205460ff1615610fa25760405162461bcd60e51b815260206004820152603160248201527f5a69675a61675a6f672e636f6d6d697443686f696365733a20706c6179657220604482015270185b1c9958591e4818dbdb5b5a5d1d1959607a1b60648201526084016106dd565b600183111561128a576000610fb8600185611ce9565b6000818152600b84016020908152604080832054600c8701835281842054600d8801909352908320549394509192610ff19291906114c9565b9050600081600381111561100757611007611cfc565b0361108d57600082815260108401602090815260408083203380855290835281842054868552600f880184528285209185529252909120546110499190611c4a565b336000908152600785016020908152604080832093909355848252600d8601815282822054600c8701909152919020546110839190611c4a565b60058401556111c5565b60018160038111156110a1576110a1611cfc565b0361111d57600082815260108401602090815260408083203380855290835281842054868552600e880184528285209185529252909120546110e39190611c4a565b336000908152600785016020908152604080832093909355848252600d8601815282822054600b8701909152919020546110839190611c4a565b600281600381111561113157611131611cfc565b036111ad576000828152600f8401602090815260408083203380855290835281842054868552600e880184528285209185529252909120546111739190611c4a565b336000908152600785016020908152604080832093909355848252600c8601815282822054600b8701909152919020546110839190611c4a565b60405162461bcd60e51b81526004016106dd90611d12565b3360009081526007840160205260409020546112425760405162461bcd60e51b815260206004820152603660248201527f5a69675a61675a6f672e636f6d6d697443686f696365733a20706c6179657220604482015275686173206e6f2072656d61696e696e6720706c61797360501b60648201526084016106dd565b6002836005015411158061126a57503360009081526007840160205260409020546005840154145b156112875760405162461bcd60e51b81526004016106dd90611d12565b50505b6000838152600882016020908152604080832033808552908352818420805460ff1916600117905586845260098501835281842090845290915290206112d08382611da7565b506040518390859033907f012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede90600090a450505050565b600083815260056020908152604080832085845260090182528083206001600160a01b0385168452909152902080546060919061134290611c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461136e90611c5d565b80156113bb5780601f10611390576101008083540402835291602001916113bb565b820191906000526020600020905b81548152906001019060200180831161139e57829003601f168201915b505050505090509392505050565b6000836001600160a01b03163b60000361142b576000806113ea8585611527565b509092509050600081600381111561140457611404611cfc565b1480156114225750856001600160a01b0316826001600160a01b0316145b9250505061064a565b611436848484611574565b905061064a565b606061146a7f00000000000000000000000000000000000000000000000000000000000000006000611650565b905090565b606061146a7f00000000000000000000000000000000000000000000000000000000000000006001611650565b6000610ac66114a96116fb565b8360405161190160f01b8152600281019290925260228201526042902090565b6000828411156114ea578184106114e25750600061064a565b50600261064a565b82840361151857818410156115015750600261064a565b8184036115105750600361064a565b50600061064a565b8183106114e25750600161064a565b600080600083516041036115615760208401516040850151606086015160001a61155388828585611826565b95509550955050505061156d565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401611596929190611e66565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516115cb9190611e87565b600060405180830381855afa9150503d8060008114611606576040519150601f19603f3d011682016040523d82523d6000602084013e61160b565b606091505b509150915081801561161f57506020815110155b801561164657508051630b135d3f60e11b906116449083016020908101908401611ea3565b145b9695505050505050565b606060ff831461166a57611663836118f5565b9050610ac6565b81805461167690611c5d565b80601f01602080910402602001604051908101604052809291908181526020018280546116a290611c5d565b80156116ef5780601f106116c4576101008083540402835291602001916116ef565b820191906000526020600020905b8154815290600101906020018083116116d257829003601f168201915b50505050509050610ac6565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561175457507f000000000000000000000000000000000000000000000000000000000000000046145b1561177e57507f000000000000000000000000000000000000000000000000000000000000000090565b61146a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561186157506000915060039050826118eb565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156118b5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118e1575060009250600191508290506118eb565b9250600091508190505b9450945094915050565b6060600061190283611934565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f811115610ac657604051632cd44ac360e21b815260040160405180910390fd5b60005b8381101561197757818101518382015260200161195f565b50506000910152565b6000815180845261199881602086016020860161195c565b601f01601f19169290920160200192915050565b60208152600061064a6020830184611980565b80356001600160a01b03811681146119d657600080fd5b919050565b6000806000606084860312156119f057600080fd5b8335925060208401359150611a07604085016119bf565b90509250925092565b60008060008060008060c08789031215611a2957600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008060408385031215611a6657600080fd5b50508035926020909101359150565b60ff60f81b8816815260e060208201526000611a9460e0830189611980565b8281036040840152611aa68189611980565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015611afc578351835260209384019390920191600101611ade565b50909b9a5050505050505050505050565b600060208284031215611b1f57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215611b5157600080fd5b8335925060208401359150604084013567ffffffffffffffff811115611b7657600080fd5b8401601f81018613611b8757600080fd5b803567ffffffffffffffff811115611ba157611ba1611b26565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611bd057611bd0611b26565b604052818152828201602001881015611be857600080fd5b816020840160208301376000602083830101528093505050509250925092565b60008060408385031215611c1b57600080fd5b82359150611c2b602084016119bf565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ac657610ac6611c34565b600181811c90821680611c7157607f821691505b602082108103611c9157634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201611ca957611ca9611c34565b5060010190565b600082611ccd57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610ac657610ac6611c34565b81810381811115610ac657610ac6611c34565b634e487b7160e01b600052602160045260246000fd5b60208082526027908201527f5a69675a61675a6f672e636f6d6d697443686f696365733a2067616d652068616040820152661cc8195b99195960ca1b606082015260800190565b601f821115610cd857806000526020600020601f840160051c81016020851015611d805750805b601f840160051c820191505b81811015611da05760008155600101611d8c565b5050505050565b815167ffffffffffffffff811115611dc157611dc1611b26565b611dd581611dcf8454611c5d565b84611d59565b6020601f821160018114611e095760008315611df15750848201515b600019600385901b1c1916600184901b178455611da0565b600084815260208120601f198516915b82811015611e395787850151825560209485019460019092019101611e19565b5084821015611e575786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b828152604060208201526000611e7f6040830184611980565b949350505050565b60008251611e9981846020870161195c565b9190910192915050565b600060208284031215611eb557600080fd5b505191905056fea2646970667358221220a0579113bb17deeaa428d7da05241e6723f8591b0e00782dbdfa6f8a54878eae64736f6c634300081c0033",
}

// ZigZagZogABI is the input ABI used to generate the binding from.
// Deprecated: Use ZigZagZogMetaData.ABI instead.
var ZigZagZogABI = ZigZagZogMetaData.ABI

// ZigZagZogBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ZigZagZogMetaData.Bin instead.
var ZigZagZogBin = ZigZagZogMetaData.Bin

// DeployZigZagZog deploys a new Ethereum contract, binding an instance of ZigZagZog to it.
func DeployZigZagZog(auth *bind.TransactOpts, backend bind.ContractBackend, _playCost *big.Int, _commitDuration uint64, _revealDuration uint64) (common.Address, *types.Transaction, *ZigZagZog, error) {
	parsed, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ZigZagZogBin), backend, _playCost, _commitDuration, _revealDuration)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ZigZagZog{ZigZagZogCaller: ZigZagZogCaller{contract: contract}, ZigZagZogTransactor: ZigZagZogTransactor{contract: contract}, ZigZagZogFilterer: ZigZagZogFilterer{contract: contract}}, nil
}

// ZigZagZog is an auto generated Go binding around an Ethereum contract.
type ZigZagZog struct {
	ZigZagZogCaller     // Read-only binding to the contract
	ZigZagZogTransactor // Write-only binding to the contract
	ZigZagZogFilterer   // Log filterer for contract events
}

// ZigZagZogCaller is an auto generated read-only Go binding around an Ethereum contract.
type ZigZagZogCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ZigZagZogTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ZigZagZogFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ZigZagZogSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ZigZagZogSession struct {
	Contract     *ZigZagZog        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ZigZagZogCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ZigZagZogCallerSession struct {
	Contract *ZigZagZogCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ZigZagZogTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ZigZagZogTransactorSession struct {
	Contract     *ZigZagZogTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ZigZagZogRaw is an auto generated low-level Go binding around an Ethereum contract.
type ZigZagZogRaw struct {
	Contract *ZigZagZog // Generic contract binding to access the raw methods on
}

// ZigZagZogCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ZigZagZogCallerRaw struct {
	Contract *ZigZagZogCaller // Generic read-only contract binding to access the raw methods on
}

// ZigZagZogTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ZigZagZogTransactorRaw struct {
	Contract *ZigZagZogTransactor // Generic write-only contract binding to access the raw methods on
}

// NewZigZagZog creates a new instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZog(address common.Address, backend bind.ContractBackend) (*ZigZagZog, error) {
	contract, err := bindZigZagZog(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ZigZagZog{ZigZagZogCaller: ZigZagZogCaller{contract: contract}, ZigZagZogTransactor: ZigZagZogTransactor{contract: contract}, ZigZagZogFilterer: ZigZagZogFilterer{contract: contract}}, nil
}

// NewZigZagZogCaller creates a new read-only instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogCaller(address common.Address, caller bind.ContractCaller) (*ZigZagZogCaller, error) {
	contract, err := bindZigZagZog(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogCaller{contract: contract}, nil
}

// NewZigZagZogTransactor creates a new write-only instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogTransactor(address common.Address, transactor bind.ContractTransactor) (*ZigZagZogTransactor, error) {
	contract, err := bindZigZagZog(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogTransactor{contract: contract}, nil
}

// NewZigZagZogFilterer creates a new log filterer instance of ZigZagZog, bound to a specific deployed contract.
func NewZigZagZogFilterer(address common.Address, filterer bind.ContractFilterer) (*ZigZagZogFilterer, error) {
	contract, err := bindZigZagZog(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogFilterer{contract: contract}, nil
}

// bindZigZagZog binds a generic wrapper to an already deployed contract.
func bindZigZagZog(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZigZagZog *ZigZagZogRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZigZagZog.Contract.ZigZagZogCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZigZagZog *ZigZagZogRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ZigZagZogTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZigZagZog *ZigZagZogRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZigZagZog.Contract.ZigZagZogTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ZigZagZog *ZigZagZogCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ZigZagZog.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ZigZagZog *ZigZagZogTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZigZagZog.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ZigZagZog *ZigZagZogTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ZigZagZog.Contract.contract.Transact(opts, method, params...)
}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameNumber, uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp, uint256 gameBalance, uint256 survivingPlays)
func (_ZigZagZog *ZigZagZogCaller) GameState(opts *bind.CallOpts, arg0 *big.Int) (struct {
	GameNumber     *big.Int
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
	GameBalance    *big.Int
	SurvivingPlays *big.Int
}, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "GameState", arg0)

	outstruct := new(struct {
		GameNumber     *big.Int
		GameTimestamp  *big.Int
		RoundNumber    *big.Int
		RoundTimestamp *big.Int
		GameBalance    *big.Int
		SurvivingPlays *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GameNumber = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.GameTimestamp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.RoundNumber = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.RoundTimestamp = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.GameBalance = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SurvivingPlays = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameNumber, uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp, uint256 gameBalance, uint256 survivingPlays)
func (_ZigZagZog *ZigZagZogSession) GameState(arg0 *big.Int) (struct {
	GameNumber     *big.Int
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
	GameBalance    *big.Int
	SurvivingPlays *big.Int
}, error) {
	return _ZigZagZog.Contract.GameState(&_ZigZagZog.CallOpts, arg0)
}

// GameState is a free data retrieval call binding the contract method 0xd1ae4e75.
//
// Solidity: function GameState(uint256 ) view returns(uint256 gameNumber, uint256 gameTimestamp, uint256 roundNumber, uint256 roundTimestamp, uint256 gameBalance, uint256 survivingPlays)
func (_ZigZagZog *ZigZagZogCallerSession) GameState(arg0 *big.Int) (struct {
	GameNumber     *big.Int
	GameTimestamp  *big.Int
	RoundNumber    *big.Int
	RoundTimestamp *big.Int
	GameBalance    *big.Int
	SurvivingPlays *big.Int
}, error) {
	return _ZigZagZog.Contract.GameState(&_ZigZagZog.CallOpts, arg0)
}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogCaller) ZigZagZogVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "ZigZagZogVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogSession) ZigZagZogVersion() (string, error) {
	return _ZigZagZog.Contract.ZigZagZogVersion(&_ZigZagZog.CallOpts)
}

// ZigZagZogVersion is a free data retrieval call binding the contract method 0x2eb1713e.
//
// Solidity: function ZigZagZogVersion() view returns(string)
func (_ZigZagZog *ZigZagZogCallerSession) ZigZagZogVersion() (string, error) {
	return _ZigZagZog.Contract.ZigZagZogVersion(&_ZigZagZog.CallOpts)
}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogCaller) ChoicesHash(opts *bind.CallOpts, nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "choicesHash", nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogSession) ChoicesHash(nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	return _ZigZagZog.Contract.ChoicesHash(&_ZigZagZog.CallOpts, nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)
}

// ChoicesHash is a free data retrieval call binding the contract method 0x8ffa3623.
//
// Solidity: function choicesHash(uint256 nonce, uint256 gameNumber, uint256 roundNumber, uint256 numCircles, uint256 numSquares, uint256 numTriangles) view returns(bytes32)
func (_ZigZagZog *ZigZagZogCallerSession) ChoicesHash(nonce *big.Int, gameNumber *big.Int, roundNumber *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) ([32]byte, error) {
	return _ZigZagZog.Contract.ChoicesHash(&_ZigZagZog.CallOpts, nonce, gameNumber, roundNumber, numCircles, numSquares, numTriangles)
}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCaller) CommitDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "commitDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogSession) CommitDuration() (uint64, error) {
	return _ZigZagZog.Contract.CommitDuration(&_ZigZagZog.CallOpts)
}

// CommitDuration is a free data retrieval call binding the contract method 0x6f833811.
//
// Solidity: function commitDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCallerSession) CommitDuration() (uint64, error) {
	return _ZigZagZog.Contract.CommitDuration(&_ZigZagZog.CallOpts)
}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) CurrentGameNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "currentGameNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) CurrentGameNumber() (*big.Int, error) {
	return _ZigZagZog.Contract.CurrentGameNumber(&_ZigZagZog.CallOpts)
}

// CurrentGameNumber is a free data retrieval call binding the contract method 0xa4516fad.
//
// Solidity: function currentGameNumber() view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) CurrentGameNumber() (*big.Int, error) {
	return _ZigZagZog.Contract.CurrentGameNumber(&_ZigZagZog.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ZigZagZog.Contract.Eip712Domain(&_ZigZagZog.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ZigZagZog *ZigZagZogCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ZigZagZog.Contract.Eip712Domain(&_ZigZagZog.CallOpts)
}

// GetCirclesRevealed is a free data retrieval call binding the contract method 0x761e781e.
//
// Solidity: function getCirclesRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetCirclesRevealed(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getCirclesRevealed", gameNumber, roundNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCirclesRevealed is a free data retrieval call binding the contract method 0x761e781e.
//
// Solidity: function getCirclesRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetCirclesRevealed(gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetCirclesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// GetCirclesRevealed is a free data retrieval call binding the contract method 0x761e781e.
//
// Solidity: function getCirclesRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetCirclesRevealed(gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetCirclesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// GetGameBalance is a free data retrieval call binding the contract method 0x9dad1da5.
//
// Solidity: function getGameBalance(uint256 gameNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetGameBalance(opts *bind.CallOpts, gameNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getGameBalance", gameNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetGameBalance is a free data retrieval call binding the contract method 0x9dad1da5.
//
// Solidity: function getGameBalance(uint256 gameNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetGameBalance(gameNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetGameBalance(&_ZigZagZog.CallOpts, gameNumber)
}

// GetGameBalance is a free data retrieval call binding the contract method 0x9dad1da5.
//
// Solidity: function getGameBalance(uint256 gameNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetGameBalance(gameNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetGameBalance(&_ZigZagZog.CallOpts, gameNumber)
}

// GetPlayerCirclesRevealed is a free data retrieval call binding the contract method 0x3b0c3128.
//
// Solidity: function getPlayerCirclesRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetPlayerCirclesRevealed(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPlayerCirclesRevealed", gameNumber, roundNumber, player)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPlayerCirclesRevealed is a free data retrieval call binding the contract method 0x3b0c3128.
//
// Solidity: function getPlayerCirclesRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetPlayerCirclesRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerCirclesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerCirclesRevealed is a free data retrieval call binding the contract method 0x3b0c3128.
//
// Solidity: function getPlayerCirclesRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetPlayerCirclesRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerCirclesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerCommittment is a free data retrieval call binding the contract method 0xf1ed7aef.
//
// Solidity: function getPlayerCommittment(uint256 gameNumber, uint256 roundNumber, address player) view returns(bytes)
func (_ZigZagZog *ZigZagZogCaller) GetPlayerCommittment(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int, player common.Address) ([]byte, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPlayerCommittment", gameNumber, roundNumber, player)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetPlayerCommittment is a free data retrieval call binding the contract method 0xf1ed7aef.
//
// Solidity: function getPlayerCommittment(uint256 gameNumber, uint256 roundNumber, address player) view returns(bytes)
func (_ZigZagZog *ZigZagZogSession) GetPlayerCommittment(gameNumber *big.Int, roundNumber *big.Int, player common.Address) ([]byte, error) {
	return _ZigZagZog.Contract.GetPlayerCommittment(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerCommittment is a free data retrieval call binding the contract method 0xf1ed7aef.
//
// Solidity: function getPlayerCommittment(uint256 gameNumber, uint256 roundNumber, address player) view returns(bytes)
func (_ZigZagZog *ZigZagZogCallerSession) GetPlayerCommittment(gameNumber *big.Int, roundNumber *big.Int, player common.Address) ([]byte, error) {
	return _ZigZagZog.Contract.GetPlayerCommittment(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerHasCommitted is a free data retrieval call binding the contract method 0xd0b8d7b2.
//
// Solidity: function getPlayerHasCommitted(uint256 gameNumber, uint256 roundNumber, address player) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) GetPlayerHasCommitted(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int, player common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPlayerHasCommitted", gameNumber, roundNumber, player)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetPlayerHasCommitted is a free data retrieval call binding the contract method 0xd0b8d7b2.
//
// Solidity: function getPlayerHasCommitted(uint256 gameNumber, uint256 roundNumber, address player) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) GetPlayerHasCommitted(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (bool, error) {
	return _ZigZagZog.Contract.GetPlayerHasCommitted(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerHasCommitted is a free data retrieval call binding the contract method 0xd0b8d7b2.
//
// Solidity: function getPlayerHasCommitted(uint256 gameNumber, uint256 roundNumber, address player) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) GetPlayerHasCommitted(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (bool, error) {
	return _ZigZagZog.Contract.GetPlayerHasCommitted(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerHasRevealed is a free data retrieval call binding the contract method 0x357517bd.
//
// Solidity: function getPlayerHasRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(bool)
func (_ZigZagZog *ZigZagZogCaller) GetPlayerHasRevealed(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int, player common.Address) (bool, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPlayerHasRevealed", gameNumber, roundNumber, player)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetPlayerHasRevealed is a free data retrieval call binding the contract method 0x357517bd.
//
// Solidity: function getPlayerHasRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(bool)
func (_ZigZagZog *ZigZagZogSession) GetPlayerHasRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (bool, error) {
	return _ZigZagZog.Contract.GetPlayerHasRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerHasRevealed is a free data retrieval call binding the contract method 0x357517bd.
//
// Solidity: function getPlayerHasRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(bool)
func (_ZigZagZog *ZigZagZogCallerSession) GetPlayerHasRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (bool, error) {
	return _ZigZagZog.Contract.GetPlayerHasRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerSquaresRevealed is a free data retrieval call binding the contract method 0x4989f3ba.
//
// Solidity: function getPlayerSquaresRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetPlayerSquaresRevealed(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPlayerSquaresRevealed", gameNumber, roundNumber, player)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPlayerSquaresRevealed is a free data retrieval call binding the contract method 0x4989f3ba.
//
// Solidity: function getPlayerSquaresRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetPlayerSquaresRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerSquaresRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerSquaresRevealed is a free data retrieval call binding the contract method 0x4989f3ba.
//
// Solidity: function getPlayerSquaresRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetPlayerSquaresRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerSquaresRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerSurvivingPlays is a free data retrieval call binding the contract method 0xd3f24af5.
//
// Solidity: function getPlayerSurvivingPlays(uint256 gameNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetPlayerSurvivingPlays(opts *bind.CallOpts, gameNumber *big.Int, player common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPlayerSurvivingPlays", gameNumber, player)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPlayerSurvivingPlays is a free data retrieval call binding the contract method 0xd3f24af5.
//
// Solidity: function getPlayerSurvivingPlays(uint256 gameNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetPlayerSurvivingPlays(gameNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerSurvivingPlays(&_ZigZagZog.CallOpts, gameNumber, player)
}

// GetPlayerSurvivingPlays is a free data retrieval call binding the contract method 0xd3f24af5.
//
// Solidity: function getPlayerSurvivingPlays(uint256 gameNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetPlayerSurvivingPlays(gameNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerSurvivingPlays(&_ZigZagZog.CallOpts, gameNumber, player)
}

// GetPlayerTrianglesRevealed is a free data retrieval call binding the contract method 0x339d2c71.
//
// Solidity: function getPlayerTrianglesRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetPlayerTrianglesRevealed(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPlayerTrianglesRevealed", gameNumber, roundNumber, player)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPlayerTrianglesRevealed is a free data retrieval call binding the contract method 0x339d2c71.
//
// Solidity: function getPlayerTrianglesRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetPlayerTrianglesRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerTrianglesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPlayerTrianglesRevealed is a free data retrieval call binding the contract method 0x339d2c71.
//
// Solidity: function getPlayerTrianglesRevealed(uint256 gameNumber, uint256 roundNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetPlayerTrianglesRevealed(gameNumber *big.Int, roundNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPlayerTrianglesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber, player)
}

// GetPurchasedPlays is a free data retrieval call binding the contract method 0xe2d23ba2.
//
// Solidity: function getPurchasedPlays(uint256 gameNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetPurchasedPlays(opts *bind.CallOpts, gameNumber *big.Int, player common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getPurchasedPlays", gameNumber, player)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPurchasedPlays is a free data retrieval call binding the contract method 0xe2d23ba2.
//
// Solidity: function getPurchasedPlays(uint256 gameNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetPurchasedPlays(gameNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPurchasedPlays(&_ZigZagZog.CallOpts, gameNumber, player)
}

// GetPurchasedPlays is a free data retrieval call binding the contract method 0xe2d23ba2.
//
// Solidity: function getPurchasedPlays(uint256 gameNumber, address player) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetPurchasedPlays(gameNumber *big.Int, player common.Address) (*big.Int, error) {
	return _ZigZagZog.Contract.GetPurchasedPlays(&_ZigZagZog.CallOpts, gameNumber, player)
}

// GetSquaresRevealed is a free data retrieval call binding the contract method 0xca342aed.
//
// Solidity: function getSquaresRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetSquaresRevealed(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getSquaresRevealed", gameNumber, roundNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSquaresRevealed is a free data retrieval call binding the contract method 0xca342aed.
//
// Solidity: function getSquaresRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetSquaresRevealed(gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetSquaresRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// GetSquaresRevealed is a free data retrieval call binding the contract method 0xca342aed.
//
// Solidity: function getSquaresRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetSquaresRevealed(gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetSquaresRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// GetTrianglesRevealed is a free data retrieval call binding the contract method 0x94091219.
//
// Solidity: function getTrianglesRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) GetTrianglesRevealed(opts *bind.CallOpts, gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "getTrianglesRevealed", gameNumber, roundNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTrianglesRevealed is a free data retrieval call binding the contract method 0x94091219.
//
// Solidity: function getTrianglesRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) GetTrianglesRevealed(gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetTrianglesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// GetTrianglesRevealed is a free data retrieval call binding the contract method 0x94091219.
//
// Solidity: function getTrianglesRevealed(uint256 gameNumber, uint256 roundNumber) view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) GetTrianglesRevealed(gameNumber *big.Int, roundNumber *big.Int) (*big.Int, error) {
	return _ZigZagZog.Contract.GetTrianglesRevealed(&_ZigZagZog.CallOpts, gameNumber, roundNumber)
}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogCaller) PlayCost(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "playCost")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogSession) PlayCost() (*big.Int, error) {
	return _ZigZagZog.Contract.PlayCost(&_ZigZagZog.CallOpts)
}

// PlayCost is a free data retrieval call binding the contract method 0xfb22198b.
//
// Solidity: function playCost() view returns(uint256)
func (_ZigZagZog *ZigZagZogCallerSession) PlayCost() (*big.Int, error) {
	return _ZigZagZog.Contract.PlayCost(&_ZigZagZog.CallOpts)
}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCaller) RevealDuration(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ZigZagZog.contract.Call(opts, &out, "revealDuration")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogSession) RevealDuration() (uint64, error) {
	return _ZigZagZog.Contract.RevealDuration(&_ZigZagZog.CallOpts)
}

// RevealDuration is a free data retrieval call binding the contract method 0x886a6de1.
//
// Solidity: function revealDuration() view returns(uint64)
func (_ZigZagZog *ZigZagZogCallerSession) RevealDuration() (uint64, error) {
	return _ZigZagZog.Contract.RevealDuration(&_ZigZagZog.CallOpts)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x846d2c29.
//
// Solidity: function buyPlays() payable returns()
func (_ZigZagZog *ZigZagZogTransactor) BuyPlays(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "buyPlays")
}

// BuyPlays is a paid mutator transaction binding the contract method 0x846d2c29.
//
// Solidity: function buyPlays() payable returns()
func (_ZigZagZog *ZigZagZogSession) BuyPlays() (*types.Transaction, error) {
	return _ZigZagZog.Contract.BuyPlays(&_ZigZagZog.TransactOpts)
}

// BuyPlays is a paid mutator transaction binding the contract method 0x846d2c29.
//
// Solidity: function buyPlays() payable returns()
func (_ZigZagZog *ZigZagZogTransactorSession) BuyPlays() (*types.Transaction, error) {
	return _ZigZagZog.Contract.BuyPlays(&_ZigZagZog.TransactOpts)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogTransactor) CommitChoices(opts *bind.TransactOpts, gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "commitChoices", gameNumber, roundNumber, signature)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogSession) CommitChoices(gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.Contract.CommitChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, signature)
}

// CommitChoices is a paid mutator transaction binding the contract method 0xc96ac341.
//
// Solidity: function commitChoices(uint256 gameNumber, uint256 roundNumber, bytes signature) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) CommitChoices(gameNumber *big.Int, roundNumber *big.Int, signature []byte) (*types.Transaction, error) {
	return _ZigZagZog.Contract.CommitChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, signature)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogTransactor) RevealChoices(opts *bind.TransactOpts, gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.contract.Transact(opts, "revealChoices", gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogSession) RevealChoices(gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.RevealChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// RevealChoices is a paid mutator transaction binding the contract method 0x63a483a8.
//
// Solidity: function revealChoices(uint256 gameNumber, uint256 roundNumber, uint256 nonce, uint256 numCircles, uint256 numSquares, uint256 numTriangles) returns()
func (_ZigZagZog *ZigZagZogTransactorSession) RevealChoices(gameNumber *big.Int, roundNumber *big.Int, nonce *big.Int, numCircles *big.Int, numSquares *big.Int, numTriangles *big.Int) (*types.Transaction, error) {
	return _ZigZagZog.Contract.RevealChoices(&_ZigZagZog.TransactOpts, gameNumber, roundNumber, nonce, numCircles, numSquares, numTriangles)
}

// ZigZagZogEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the ZigZagZog contract.
type ZigZagZogEIP712DomainChangedIterator struct {
	Event *ZigZagZogEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogEIP712DomainChanged represents a EIP712DomainChanged event raised by the ZigZagZog contract.
type ZigZagZogEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ZigZagZogEIP712DomainChangedIterator, error) {

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ZigZagZogEIP712DomainChangedIterator{contract: _ZigZagZog.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ZigZagZogEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogEIP712DomainChanged)
				if err := _ZigZagZog.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ZigZagZog *ZigZagZogFilterer) ParseEIP712DomainChanged(log types.Log) (*ZigZagZogEIP712DomainChanged, error) {
	event := new(ZigZagZogEIP712DomainChanged)
	if err := _ZigZagZog.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ZigZagZogPlayerCommitmentIterator is returned from FilterPlayerCommitment and is used to iterate over the raw logs and unpacked data for PlayerCommitment events raised by the ZigZagZog contract.
type ZigZagZogPlayerCommitmentIterator struct {
	Event *ZigZagZogPlayerCommitment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ZigZagZogPlayerCommitmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ZigZagZogPlayerCommitment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ZigZagZogPlayerCommitment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ZigZagZogPlayerCommitmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ZigZagZogPlayerCommitmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ZigZagZogPlayerCommitment represents a PlayerCommitment event raised by the ZigZagZog contract.
type ZigZagZogPlayerCommitment struct {
	PlayerAddress common.Address
	GameNumber    *big.Int
	RoundNumber   *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPlayerCommitment is a free log retrieval operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) FilterPlayerCommitment(opts *bind.FilterOpts, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (*ZigZagZogPlayerCommitmentIterator, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.FilterLogs(opts, "PlayerCommitment", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return &ZigZagZogPlayerCommitmentIterator{contract: _ZigZagZog.contract, event: "PlayerCommitment", logs: logs, sub: sub}, nil
}

// WatchPlayerCommitment is a free log subscription operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) WatchPlayerCommitment(opts *bind.WatchOpts, sink chan<- *ZigZagZogPlayerCommitment, playerAddress []common.Address, gameNumber []*big.Int, roundNumber []*big.Int) (event.Subscription, error) {

	var playerAddressRule []interface{}
	for _, playerAddressItem := range playerAddress {
		playerAddressRule = append(playerAddressRule, playerAddressItem)
	}
	var gameNumberRule []interface{}
	for _, gameNumberItem := range gameNumber {
		gameNumberRule = append(gameNumberRule, gameNumberItem)
	}
	var roundNumberRule []interface{}
	for _, roundNumberItem := range roundNumber {
		roundNumberRule = append(roundNumberRule, roundNumberItem)
	}

	logs, sub, err := _ZigZagZog.contract.WatchLogs(opts, "PlayerCommitment", playerAddressRule, gameNumberRule, roundNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ZigZagZogPlayerCommitment)
				if err := _ZigZagZog.contract.UnpackLog(event, "PlayerCommitment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlayerCommitment is a log parse operation binding the contract event 0x012ef2f357be275abbb89994d1b50a01bf040cc89e803ec555657c54139bbede.
//
// Solidity: event PlayerCommitment(address indexed playerAddress, uint256 indexed gameNumber, uint256 indexed roundNumber)
func (_ZigZagZog *ZigZagZogFilterer) ParsePlayerCommitment(log types.Log) (*ZigZagZogPlayerCommitment, error) {
	event := new(ZigZagZogPlayerCommitment)
	if err := _ZigZagZog.contract.UnpackLog(event, "PlayerCommitment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateZigZagZogDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int
	var calldata bool

	var playCost *big.Int
	var playCostRaw string
	var commitDuration uint64

	var revealDuration uint64

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {

			if !calldata {
				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if playCostRaw == "" {
				return fmt.Errorf("--play-cost argument not specified")
			}
			playCost = new(big.Int)
			playCost.SetString(playCostRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			// Generate deploy bytecode with constructor arguments
			deployCalldata, err := generateZigZagZogDeployBytecode(
				playCost,
				commitDuration,
				revealDuration,
			)
			if err != nil {
				return fmt.Errorf("failed to generate deploy bytecode: %v", err)
			}

			if calldata {
				deployCalldataHex := hex.EncodeToString(deployCalldata)
				cmd.Println(deployCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployCalldata)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployCalldata, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployZigZagZog(
				transactionOpts,
				client,
				playCost,
				commitDuration,
				revealDuration,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&playCostRaw, "play-cost", "", "play-cost argument")
	cmd.Flags().Uint64Var(&commitDuration, "commit-duration", 0, "commit-duration argument")
	cmd.Flags().Uint64Var(&revealDuration, "reveal-duration", 0, "reveal-duration argument")

	return cmd
}

func generateZigZagZogDeployBytecode(
	playCost *big.Int,
	commitDuration uint64,
	revealDuration uint64,
) ([]byte, error) {
	abiPacked, err := ZigZagZogMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("",
		playCost,
		commitDuration,
		revealDuration,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(ZigZagZogMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateChoicesHashCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var nonce0 *big.Int
	var nonce0Raw string
	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var numCircles *big.Int
	var numCirclesRaw string
	var numSquares *big.Int
	var numSquaresRaw string
	var numTriangles *big.Int
	var numTrianglesRaw string

	var capture0 [32]byte

	cmd := &cobra.Command{
		Use:   "choices-hash",
		Short: "Call the ChoicesHash view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if nonce0Raw == "" {
				return fmt.Errorf("--nonce-0 argument not specified")
			}
			nonce0 = new(big.Int)
			nonce0.SetString(nonce0Raw, 0)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if numCirclesRaw == "" {
				return fmt.Errorf("--num-circles argument not specified")
			}
			numCircles = new(big.Int)
			numCircles.SetString(numCirclesRaw, 0)

			if numSquaresRaw == "" {
				return fmt.Errorf("--num-squares argument not specified")
			}
			numSquares = new(big.Int)
			numSquares.SetString(numSquaresRaw, 0)

			if numTrianglesRaw == "" {
				return fmt.Errorf("--num-triangles argument not specified")
			}
			numTriangles = new(big.Int)
			numTriangles.SetString(numTrianglesRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ChoicesHash(
				nonce0,
				gameNumber,
				roundNumber,
				numCircles,
				numSquares,
				numTriangles,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&nonce0Raw, "nonce-0", "", "nonce-0 argument")
	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&numCirclesRaw, "num-circles", "", "num-circles argument")
	cmd.Flags().StringVar(&numSquaresRaw, "num-squares", "", "num-squares argument")
	cmd.Flags().StringVar(&numTrianglesRaw, "num-triangles", "", "num-triangles argument")

	return cmd
}
func CreateCommitDurationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 uint64

	cmd := &cobra.Command{
		Use:   "commit-duration",
		Short: "Call the CommitDuration view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CommitDuration()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateCurrentGameNumberCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "current-game-number",
		Short: "Call the CurrentGameNumber view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CurrentGameNumber()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateEip712DomainCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	}

	cmd := &cobra.Command{
		Use:   "eip-712-domain",
		Short: "Call the Eip712Domain view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Eip712Domain()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGameStateCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 struct {
		GameNumber     *big.Int
		GameTimestamp  *big.Int
		RoundNumber    *big.Int
		RoundTimestamp *big.Int
		GameBalance    *big.Int
		SurvivingPlays *big.Int
	}

	cmd := &cobra.Command{
		Use:   "game-state",
		Short: "Call the GameState view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GameState(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateGetCirclesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-circles-revealed",
		Short: "Call the GetCirclesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetCirclesRevealed(
				gameNumber,
				roundNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")

	return cmd
}
func CreateGetGameBalanceCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-game-balance",
		Short: "Call the GetGameBalance view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetGameBalance(
				gameNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")

	return cmd
}
func CreateGetPlayerCirclesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-player-circles-revealed",
		Short: "Call the GetPlayerCirclesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPlayerCirclesRevealed(
				gameNumber,
				roundNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetPlayerCommittmentCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 []byte

	cmd := &cobra.Command{
		Use:   "get-player-committment",
		Short: "Call the GetPlayerCommittment view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPlayerCommittment(
				gameNumber,
				roundNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetPlayerHasCommittedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "get-player-has-committed",
		Short: "Call the GetPlayerHasCommitted view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPlayerHasCommitted(
				gameNumber,
				roundNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetPlayerHasRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "get-player-has-revealed",
		Short: "Call the GetPlayerHasRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPlayerHasRevealed(
				gameNumber,
				roundNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetPlayerSquaresRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-player-squares-revealed",
		Short: "Call the GetPlayerSquaresRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPlayerSquaresRevealed(
				gameNumber,
				roundNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetPlayerSurvivingPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-player-surviving-plays",
		Short: "Call the GetPlayerSurvivingPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPlayerSurvivingPlays(
				gameNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetPlayerTrianglesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-player-triangles-revealed",
		Short: "Call the GetPlayerTrianglesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPlayerTrianglesRevealed(
				gameNumber,
				roundNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetPurchasedPlaysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var player common.Address
	var playerRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-purchased-plays",
		Short: "Call the GetPurchasedPlays view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if playerRaw == "" {
				return fmt.Errorf("--player argument not specified")
			} else if !common.IsHexAddress(playerRaw) {
				return fmt.Errorf("--player argument is not a valid Ethereum address")
			}
			player = common.HexToAddress(playerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetPurchasedPlays(
				gameNumber,
				player,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&playerRaw, "player", "", "player argument (common.Address)")

	return cmd
}
func CreateGetSquaresRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-squares-revealed",
		Short: "Call the GetSquaresRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetSquaresRevealed(
				gameNumber,
				roundNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")

	return cmd
}
func CreateGetTrianglesRevealedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "get-triangles-revealed",
		Short: "Call the GetTrianglesRevealed view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.GetTrianglesRevealed(
				gameNumber,
				roundNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")

	return cmd
}
func CreatePlayCostCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "play-cost",
		Short: "Call the PlayCost view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.PlayCost()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateRevealDurationCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 uint64

	cmd := &cobra.Command{
		Use:   "reveal-duration",
		Short: "Call the RevealDuration view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.RevealDuration()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %d\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateZigZagZogVersionCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 string

	cmd := &cobra.Command{
		Use:   "zig-zag-zog-version",
		Short: "Call the ZigZagZogVersion view method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ZigZagZogCallerSession{
				Contract: &contract.ZigZagZogCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ZigZagZogVersion()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateBuyPlaysCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	cmd := &cobra.Command{
		Use:   "buy-plays",
		Short: "Execute the BuyPlays method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "buyPlays"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.BuyPlays()
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	return cmd
}
func CreateCommitChoicesCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var signature []byte
	var signatureRaw string

	cmd := &cobra.Command{
		Use:   "commit-choices",
		Short: "Execute the CommitChoices method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			var signatureIntermediate []byte

			var signatureIntermediateHexDecodeErr error
			signatureIntermediate, signatureIntermediateHexDecodeErr = hex.DecodeString(signatureRaw)
			if signatureIntermediateHexDecodeErr != nil {
				return signatureIntermediateHexDecodeErr
			}

			copy(signature[:], signatureIntermediate)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "commitChoices"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
				roundNumber,
				signature,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.CommitChoices(

				gameNumber,
				roundNumber,
				signature,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&signatureRaw, "signature", "", "signature argument ([]byte)")

	return cmd
}
func CreateRevealChoicesCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var gameNumber *big.Int
	var gameNumberRaw string
	var roundNumber *big.Int
	var roundNumberRaw string
	var nonce0 *big.Int
	var nonce0Raw string
	var numCircles *big.Int
	var numCirclesRaw string
	var numSquares *big.Int
	var numSquaresRaw string
	var numTriangles *big.Int
	var numTrianglesRaw string

	cmd := &cobra.Command{
		Use:   "reveal-choices",
		Short: "Execute the RevealChoices method on a ZigZagZog contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if gameNumberRaw == "" {
				return fmt.Errorf("--game-number argument not specified")
			}
			gameNumber = new(big.Int)
			gameNumber.SetString(gameNumberRaw, 0)

			if roundNumberRaw == "" {
				return fmt.Errorf("--round-number argument not specified")
			}
			roundNumber = new(big.Int)
			roundNumber.SetString(roundNumberRaw, 0)

			if nonce0Raw == "" {
				return fmt.Errorf("--nonce-0 argument not specified")
			}
			nonce0 = new(big.Int)
			nonce0.SetString(nonce0Raw, 0)

			if numCirclesRaw == "" {
				return fmt.Errorf("--num-circles argument not specified")
			}
			numCircles = new(big.Int)
			numCircles.SetString(numCirclesRaw, 0)

			if numSquaresRaw == "" {
				return fmt.Errorf("--num-squares argument not specified")
			}
			numSquares = new(big.Int)
			numSquares.SetString(numSquaresRaw, 0)

			if numTrianglesRaw == "" {
				return fmt.Errorf("--num-triangles argument not specified")
			}
			numTriangles = new(big.Int)
			numTriangles.SetString(numTrianglesRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := ZigZagZogMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "revealChoices"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				gameNumber,
				roundNumber,
				nonce0,
				numCircles,
				numSquares,
				numTriangles,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewZigZagZog(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ZigZagZogTransactorSession{
				Contract:     &contract.ZigZagZogTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.RevealChoices(

				gameNumber,
				roundNumber,
				nonce0,
				numCircles,
				numSquares,
				numTriangles,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&gameNumberRaw, "game-number", "", "game-number argument")
	cmd.Flags().StringVar(&roundNumberRaw, "round-number", "", "round-number argument")
	cmd.Flags().StringVar(&nonce0Raw, "nonce-0", "", "nonce-0 argument")
	cmd.Flags().StringVar(&numCirclesRaw, "num-circles", "", "num-circles argument")
	cmd.Flags().StringVar(&numSquaresRaw, "num-squares", "", "num-squares argument")
	cmd.Flags().StringVar(&numTrianglesRaw, "num-triangles", "", "num-triangles argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the ZIG_ZAG_ZOG_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the ZIG_ZAG_ZOG_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("ZIG_ZAG_ZOG_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateZigZagZogCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "zig-zag-zog",
		Short: "Interact with the ZigZagZog contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployZigZagZog := CreateZigZagZogDeploymentCommand()
	cmdDeployZigZagZog.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployZigZagZog)

	cmdViewChoicesHash := CreateChoicesHashCommand()
	cmdViewChoicesHash.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewChoicesHash)
	cmdViewCommitDuration := CreateCommitDurationCommand()
	cmdViewCommitDuration.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCommitDuration)
	cmdViewCurrentGameNumber := CreateCurrentGameNumberCommand()
	cmdViewCurrentGameNumber.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCurrentGameNumber)
	cmdViewEip712Domain := CreateEip712DomainCommand()
	cmdViewEip712Domain.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewEip712Domain)
	cmdViewGameState := CreateGameStateCommand()
	cmdViewGameState.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGameState)
	cmdViewGetCirclesRevealed := CreateGetCirclesRevealedCommand()
	cmdViewGetCirclesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetCirclesRevealed)
	cmdViewGetGameBalance := CreateGetGameBalanceCommand()
	cmdViewGetGameBalance.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetGameBalance)
	cmdViewGetPlayerCirclesRevealed := CreateGetPlayerCirclesRevealedCommand()
	cmdViewGetPlayerCirclesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPlayerCirclesRevealed)
	cmdViewGetPlayerCommittment := CreateGetPlayerCommittmentCommand()
	cmdViewGetPlayerCommittment.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPlayerCommittment)
	cmdViewGetPlayerHasCommitted := CreateGetPlayerHasCommittedCommand()
	cmdViewGetPlayerHasCommitted.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPlayerHasCommitted)
	cmdViewGetPlayerHasRevealed := CreateGetPlayerHasRevealedCommand()
	cmdViewGetPlayerHasRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPlayerHasRevealed)
	cmdViewGetPlayerSquaresRevealed := CreateGetPlayerSquaresRevealedCommand()
	cmdViewGetPlayerSquaresRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPlayerSquaresRevealed)
	cmdViewGetPlayerSurvivingPlays := CreateGetPlayerSurvivingPlaysCommand()
	cmdViewGetPlayerSurvivingPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPlayerSurvivingPlays)
	cmdViewGetPlayerTrianglesRevealed := CreateGetPlayerTrianglesRevealedCommand()
	cmdViewGetPlayerTrianglesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPlayerTrianglesRevealed)
	cmdViewGetPurchasedPlays := CreateGetPurchasedPlaysCommand()
	cmdViewGetPurchasedPlays.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetPurchasedPlays)
	cmdViewGetSquaresRevealed := CreateGetSquaresRevealedCommand()
	cmdViewGetSquaresRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetSquaresRevealed)
	cmdViewGetTrianglesRevealed := CreateGetTrianglesRevealedCommand()
	cmdViewGetTrianglesRevealed.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetTrianglesRevealed)
	cmdViewPlayCost := CreatePlayCostCommand()
	cmdViewPlayCost.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewPlayCost)
	cmdViewRevealDuration := CreateRevealDurationCommand()
	cmdViewRevealDuration.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewRevealDuration)
	cmdViewZigZagZogVersion := CreateZigZagZogVersionCommand()
	cmdViewZigZagZogVersion.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewZigZagZogVersion)

	cmdTransactBuyPlays := CreateBuyPlaysCommand()
	cmdTransactBuyPlays.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBuyPlays)
	cmdTransactCommitChoices := CreateCommitChoicesCommand()
	cmdTransactCommitChoices.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCommitChoices)
	cmdTransactRevealChoices := CreateRevealChoicesCommand()
	cmdTransactRevealChoices.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactRevealChoices)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}
